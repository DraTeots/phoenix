var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ARManager.html",[0,0.243,1,2.33]],["body/classes/ARManager.html",[0,0.232,1,3.074,2,0.372,3,0.246,4,0.217,5,0.162,6,2.408,7,5.194,8,1.006,9,0.456,10,4.235,11,1.54,12,1.92,13,2.208,14,3.074,15,3.86,16,0.162,17,0.609,18,2.256,19,5.235,20,1.826,21,5.235,22,3.913,23,4.438,24,1.489,25,3.417,26,5.124,27,3.417,28,3.798,29,2.862,30,3.417,31,3.417,32,3.417,33,0.56,34,4.22,35,2.724,36,3.417,37,4.571,38,3.913,39,3.417,40,3.913,41,3.417,42,1.077,43,3.31,44,2.408,45,2.585,46,4.786,47,0.776,48,2.474,49,1.009,50,0.606,51,0.025,52,0.494,53,0.281,54,0.568,55,2.372,56,1.156,57,0.855,58,0.726,59,1.009,60,2.806,61,2.356,62,2.801,63,3.913,64,3.208,65,4.571,66,1.39,67,4.571,68,3.875,69,1.072,70,4.571,71,1.305,72,4.571,73,2.573,74,2.474,75,3.074,76,2.801,77,4.304,78,4.571,79,1.481,80,0.712,81,3.875,82,2.806,83,3.904,84,2.529,85,2.757,86,5.718,87,2.806,88,1.39,89,3.904,90,1.599,91,2.806,92,2.208,93,2.057,94,1.246,95,2.806,96,3.033,97,2.529,98,3.46,99,3.208,100,2.806,101,1.316,102,2.806,103,0.593,104,2.226,105,2.226,106,2.474,107,1.006,108,2.806,109,2.806,110,1.949,111,3.31,112,0.954,113,3.417,114,4.571,115,2.801,116,4.571,117,0.923,118,2.806,119,2.806,120,2.028,121,1.143,122,2.474,123,2.806,124,2.474,125,1.722,126,2.2,127,2.474,128,1.864,129,2.806,130,2.474,131,3.417,132,2.226,133,2.226,134,0.642,135,0.596,136,2.226,137,2.028,138,2.226,139,2.226,140,2.806,141,2.474,142,2.474,143,1.143,144,2.474,145,2.474,146,2.474,147,1.599,148,1.599,149,2.028,150,3.31,151,0.276,152,0.524,153,4.438,154,3.31,155,4.571,156,3.31,157,5.235,158,3.31,159,2.474,160,0.406,161,3.31,162,2.806,163,3.31,164,1.864,165,2.806,166,3.31,167,1.578,168,2.226,169,3.31,170,5.235,171,3.31,172,2.806,173,3.31,174,1.864,175,3.31,176,3.31,177,3.31,178,2.806,179,3.31,180,3.31,181,3.31,182,3.31,183,3.31,184,0.016,185,0.016]],["title/classes/ActiveVariable.html",[0,0.243,186,1.951]],["body/classes/ActiveVariable.html",[0,0.32,2,0.513,3,0.34,4,0.3,5,0.223,9,0.476,16,0.223,17,0.752,20,1.748,24,1.513,33,0.692,42,1.076,47,0.738,49,1.245,50,0.627,51,0.025,52,0.511,53,0.273,54,0.609,57,0.659,58,0.876,93,2.878,94,1.245,96,3.09,97,3.234,103,0.523,112,0.953,126,1.918,149,4.102,151,0.471,152,0.568,184,0.02,185,0.02,186,3.177,187,5.004,188,3.413,189,3.619,190,4.783,191,5.642,192,3.458,193,5.642,194,4.912,195,5.642,196,4.102,197,4.566,198,5.123,199,4.566,200,4.217,201,6.123,202,5.675,203,4.566,204,4.566,205,5.642,206,4.566,207,4.783,208,5.642,209,4.566,210,6.396,211,0.879,212,4.566,213,4.566,214,4.566,215,4.566,216,4.566]],["title/interfaces/AnimationPreset.html",[217,1.276,218,1.951]],["body/interfaces/AnimationPreset.html",[0,0.155,3,0.165,4,0.146,5,0.108,6,0.872,8,0.675,9,0.165,11,1.266,12,1.434,13,1.072,16,0.108,17,0.455,20,1.332,24,1.262,29,2.009,42,0.804,44,1.913,45,2.106,49,0.49,51,0.026,52,0.444,53,0.233,54,0.433,55,1.434,58,0.272,59,0.918,69,1.347,71,1.332,73,1.249,77,2.295,79,2.104,80,0.647,84,1.072,85,1.535,88,0.675,90,1.072,92,1.072,93,0.998,94,1.112,96,2.434,97,2.763,98,2.548,101,0.558,103,0.316,107,1.419,112,0.975,117,1.052,120,1.36,121,0.766,133,2.797,134,0.617,135,0.4,136,1.493,147,1.072,148,1.649,151,0.285,152,0.634,160,0.272,167,1.837,168,1.493,172,3.525,184,0.012,185,0.012,192,1.36,207,1.881,211,1.03,217,0.817,218,2.341,219,1.249,220,1.493,221,4.199,222,1.921,223,4.697,224,4.51,225,3.171,226,2.295,227,3.303,228,1.004,229,4.477,230,4.887,231,1.256,232,5.989,233,2.341,234,5.779,235,3.412,236,1.776,237,1.881,238,4.158,239,1.921,240,2.117,241,2.893,242,2.295,243,2.219,244,5.719,245,2.091,246,2.295,247,3.412,248,3.139,249,2.091,250,2.219,251,1.341,252,2.009,253,2.219,254,1.881,255,2.009,256,1.505,257,2.893,258,1.36,259,0.872,260,2.219,261,2.219,262,3.412,263,2.219,264,1.881,265,1.921,266,2.219,267,2.091,268,1.36,269,2.219,270,1.018,271,2.219,272,3.525,273,2.219,274,3.525,275,2.219,276,4.271,277,2.219,278,2.219,279,4.142,280,1.072,281,2.091,282,2.893,283,5.726,284,3.525,285,1.881,286,1.921,287,2.219,288,2.219,289,2.551,290,1.493,291,1.881,292,2.219,293,1.904,294,2.219,295,2.219,296,2.219,297,3.525,298,2.219,299,3.412,300,1.881,301,2.091,302,2.091,303,1.881,304,1.155,305,2.219,306,2.219,307,2.219,308,2.219,309,2.219,310,2.219,311,2.219,312,4.271,313,4.271,314,5.607,315,3.389,316,4.271,317,5.719,318,2.628,319,2.219,320,3.412,321,2.219,322,2.219,323,1.36,324,4.158,325,2.219,326,3.412,327,2.219,328,4.158,329,4.667,330,2.219,331,1.659,332,2.219,333,5.32,334,2.219,335,1.535,336,2.295,337,3.412,338,4.667,339,3.087,340,2.219,341,1.072,342,2.009,343,3.412,344,4.667,345,1.493,346,4.667,347,2.219,348,1.881,349,2.219,350,3.412,351,4.667,352,1.493,353,3.412,354,3.412,355,2.219,356,3.412,357,3.412,358,3.412,359,3.412,360,2.219,361,2.219,362,1.881,363,1.155,364,1.881,365,2.219,366,3.412,367,2.219,368,2.219,369,2.219,370,1.659,371,2.219,372,2.219,373,2.219,374,2.219,375,1.881,376,1.881,377,1.881,378,3.412,379,2.219,380,2.219,381,2.219,382,3.412,383,2.219,384,1.36,385,2.219,386,2.219,387,3.139,388,2.893,389,2.219,390,2.219,391,2.219,392,2.219,393,2.219,394,2.219,395,1.493,396,2.893,397,2.219,398,2.219,399,2.219,400,2.219,401,2.219,402,3.412,403,1.659,404,2.219,405,2.219,406,2.219,407,2.219,408,2.219,409,2.219,410,3.412,411,2.219,412,2.219,413,2.219,414,2.219,415,2.219,416,2.219,417,2.219,418,2.219,419,2.219,420,2.219,421,2.219,422,2.219,423,2.219,424,2.219,425,2.219,426,2.219,427,2.219,428,2.219,429,3.412,430,4.158,431,2.219,432,2.219,433,2.219,434,1.881,435,2.219,436,1.493,437,2.219,438,3.053,439,4.849,440,4.158,441,3.412,442,2.893,443,3.412,444,2.219,445,2.219,446,4.667,447,1.881,448,2.219,449,2.295,450,4.158,451,1.493,452,2.219,453,1.155,454,3.412,455,3.412,456,2.219,457,2.219,458,2.219,459,2.219,460,2.219,461,2.219,462,2.219,463,1.881,464,1.36,465,3.412,466,2.219,467,1.072,468,1.493,469,2.219,470,1.881,471,5.719,472,3.976,473,3.412,474,1.249,475,4.158,476,2.219,477,4.158,478,2.219,479,2.893,480,1.881,481,2.219,482,2.219,483,3.412,484,3.412,485,2.551,486,3.412,487,2.219,488,3.412,489,2.219,490,2.219,491,2.219,492,2.219,493,2.219,494,2.219,495,2.219,496,2.219,497,2.219,498,2.219,499,2.219,500,2.219,501,3.525,502,3.412,503,2.219,504,2.219,505,2.219,506,4.667,507,2.219,508,2.219,509,2.219,510,1.659,511,1.493,512,3.412,513,2.219,514,1.881,515,2.219,516,1.881,517,2.219,518,1.881,519,2.219,520,3.412,521,2.429,522,2.091,523,3.412,524,2.219,525,1.659,526,2.219,527,1.881,528,2.219,529,3.412,530,2.219,531,2.219,532,2.219,533,2.893,534,2.219,535,3.412,536,2.219,537,2.219,538,2.219,539,2.219,540,2.219]],["title/classes/CMSObjects.html",[0,0.243,541,2.33]],["body/classes/CMSObjects.html",[0,0.311,2,0.499,3,0.33,4,0.291,5,0.217,9,0.413,16,0.217,18,2.227,24,0.98,33,0.68,47,0.499,50,0.667,51,0.025,52,0.371,53,0.181,54,0.412,59,1.224,68,3.765,69,1.797,80,0.692,85,2.495,103,0.514,117,0.692,134,0.68,135,0.8,143,1.915,151,0.371,152,0.412,160,0.544,167,1.915,168,3.73,184,0.019,185,0.019,211,1.071,228,0.864,239,3.123,241,4.702,242,3.73,245,3.706,246,3.73,255,2.679,270,0.959,289,3.32,302,2.722,342,2.679,395,3.73,485,4.146,541,3.73,542,4.702,543,3.765,544,3.399,545,2.679,546,4.702,547,4.146,548,4.702,549,5.546,550,5.546,551,4.441,552,3.399,553,6.649,554,6.649,555,6.048,556,4.441,557,5.546,558,5.546,559,5.546,560,3.32,561,4.441,562,3.765,563,5.546,564,4.441,565,4.441,566,4.441,567,4.441,568,4.441,569,4.441,570,5.546,571,6.048,572,6.048,573,5.546,574,6.048,575,6.048,576,3.32,577,5.546,578,6.048,579,6.048,580,5.546,581,6.048,582,6.048,583,5.546,584,3.765,585,5.546,586,3.765,587,3.765,588,5.546,589,4.441,590,4.441,591,4.441,592,4.441,593,4.441,594,4.441,595,3.765,596,2.987,597,4.441,598,2.722,599,4.441,600,6.048,601,3.765,602,4.441,603,4.441,604,5.546,605,4.441,606,4.441,607,3.765,608,4.441,609,4.441,610,4.441,611,4.441,612,4.441]],["title/classes/ColorManager.html",[0,0.243,613,2.33]],["body/classes/ColorManager.html",[0,0.269,2,0.432,3,0.286,4,0.253,5,0.188,6,2.516,8,1.17,9,0.476,11,1.64,12,2.125,16,0.188,24,1.479,33,0.62,42,0.907,44,2.21,47,0.7,49,1.117,50,0.638,51,0.025,52,0.575,53,0.254,54,0.578,55,2.522,56,0.849,58,0.736,69,1.945,76,3.1,80,1.068,85,2.276,94,1.248,101,1.271,103,0.557,112,0.971,117,0.599,134,0.62,135,0.693,136,4.389,151,0.321,152,0.614,167,2.465,184,0.018,185,0.018,228,0.935,251,1.988,255,3.236,256,1.509,259,1.988,270,0.975,335,2.276,341,2.444,451,2.588,453,2.941,607,3.262,613,3.402,614,3.923,615,4.038,616,3.781,617,5.058,618,5.652,619,5.058,620,3.847,621,3.847,622,3.781,623,5.058,624,2.876,625,4.038,626,3.124,627,3.086,628,3.999,629,5.058,630,3.781,631,5.058,632,3.847,633,3.781,634,3.847,635,5.09,636,6.003,637,4.288,638,2.876,639,5.058,640,3.402,641,5.058,642,3.781,643,5.058,644,3.1,645,5.058,646,3.847,647,5.058,648,3.402,649,5.058,650,3.262,651,3.847,652,3.847,653,3.847,654,3.847,655,3.847,656,5.058,657,5.058,658,5.058,659,5.058,660,3.781,661,5.058,662,5.058,663,5.058,664,3.847,665,3.847,666,3.847,667,3.847,668,3.847,669,5.058,670,5.058,671,3.847,672,3.262,673,3.847,674,3.847,675,3.847,676,3.847,677,3.847,678,3.847,679,3.847]],["title/classes/ColorOptions.html",[0,0.243,680,2.59]],["body/classes/ColorOptions.html",[0,0.171,2,0.275,3,0.182,4,0.161,5,0.119,9,0.391,11,1.109,12,1.544,16,0.119,17,0.489,20,2.029,33,0.45,42,0.866,47,0.745,49,0.811,50,0.629,51,0.026,52,0.533,53,0.265,54,0.455,55,1.544,56,0.54,57,0.827,58,0.826,59,1.083,61,1.653,66,1.342,69,2.09,71,1.753,73,1.377,76,3.007,80,0.86,85,1.986,88,1.117,92,2.371,103,0.586,112,0.957,117,0.687,126,1.028,134,0.601,135,0.662,151,0.307,152,0.531,160,0.601,167,2.472,184,0.013,185,0.013,228,0.939,233,2.069,255,2.371,256,1.544,259,1.928,270,0.708,293,1.834,304,1.273,335,1.653,341,2.132,345,1.645,453,2.982,511,2.472,522,1.499,613,3.854,614,4.11,615,2.969,616,3.668,627,2.486,628,2.705,633,1.828,637,3.115,648,3.3,680,2.747,681,3.473,682,1.645,683,2.402,684,4.414,685,4.414,686,4.414,687,4.414,688,4.414,689,4.414,690,4.907,691,4.907,692,4.907,693,3.675,694,3.675,695,4.907,696,4.907,697,4.907,698,4.907,699,3.675,700,2.446,701,4.907,702,3.11,703,4.907,704,4.858,705,2.446,706,2.472,707,1.049,708,3.115,709,4.683,710,2.534,711,4.907,712,3.776,713,3.675,714,3.014,715,3.675,716,4.017,717,3.675,718,5.524,719,3.834,720,4.907,721,3.675,722,3.675,723,3.675,724,3.675,725,2.446,726,3.115,727,6.143,728,2.446,729,3.512,730,2.446,731,2.446,732,2.969,733,2.472,734,2.446,735,1.854,736,2.297,737,5.26,738,4.414,739,2.763,740,3.675,741,2.446,742,3.675,743,2.446,744,3.3,745,3.538,746,2.446,747,2.446,748,2.446,749,3.675,750,2.446,751,3.3,752,3.675,753,3.299,754,4.459,755,4.459,756,4.414,757,5.26,758,4.414,759,3.675,760,2.446,761,5.26,762,2.371,763,2.446,764,2.446,765,2.446,766,2.446,767,2.747,768,3.675,769,5.895,770,2.446,771,3.675,772,3.675,773,1.499,774,2.074,775,1.828,776,1.499,777,1.499,778,1.828,779,3.538,780,4.907,781,2.446,782,2.446,783,2.446,784,4.414,785,2.486,786,2.446,787,1.912,788,5.26,789,2.446,790,2.446,791,2.074,792,2.446,793,2.074,794,2.446,795,2.446,796,2.446,797,2.446,798,2.446,799,2.446,800,2.446,801,3.675,802,5.524,803,2.446,804,2.446,805,2.446,806,3.675,807,3.675,808,2.446,809,2.446,810,2.446,811,2.446,812,3.675,813,2.446,814,4.414,815,4.414,816,3.675,817,1.645,818,1.645,819,2.074,820,1.828,821,1.828,822,2.074,823,2.074,824,2.446,825,2.446,826,2.446,827,2.446,828,2.446,829,4.414,830,3.675,831,3.675,832,2.446,833,3.675,834,3.675,835,3.675,836,2.446,837,2.446,838,2.446,839,2.446,840,2.446,841,1.182,842,2.446,843,2.074,844,2.446,845,2.446,846,2.446,847,2.446,848,3.675,849,3.115,850,2.446]],["title/interfaces/Configuration.html",[217,1.276,851,1.276]],["body/interfaces/Configuration.html",[3,0.319,4,0.281,5,0.209,9,0.319,11,1.078,16,0.209,17,0.723,45,2.303,51,0.025,53,0.284,54,0.661,56,1.455,57,0.951,59,1.198,61,2.965,62,3.325,66,1.65,80,1.054,117,0.927,121,1.873,134,0.791,135,0.772,143,1.873,151,0.358,164,3.055,184,0.019,185,0.019,217,1.579,218,3.522,219,2.415,220,2.885,222,3.522,228,1.084,231,1.998,256,1.622,315,3.649,622,4.056,683,2.159,702,3.522,735,2.711,736,3.097,776,2.628,851,2.303,852,3.636,853,2.275,854,6.255,855,6.255,856,5.303,857,4.675,858,6.255,859,4.15,860,6.255,861,5.303,862,6.255,863,6.255,864,4.056,865,3.255,866,2.132,867,4.056,868,3.055,869,5.426,870,2.441,871,4.6,872,3.325,873,3.325,874,3.097,875,3.649,876,3.055,877,5.426,878,5.426,879,5.426,880,5.426,881,6.255,882,4.207,883,4.056,884,4.289,885,4.289,886,4.289,887,3.206,888,2.415,889,3.206,890,4.289,891,4.289,892,4.289]],["title/classes/CoordinateHelper.html",[0,0.243,893,2.123]],["body/classes/CoordinateHelper.html",[0,0.252,2,0.404,3,0.267,4,0.236,5,0.176,9,0.467,16,0.176,18,2.559,24,1.346,33,0.716,47,0.705,50,0.676,51,0.025,52,0.509,53,0.249,54,0.566,56,0.794,71,1.56,103,0.619,117,1.113,134,0.441,135,0.647,151,0.3,152,0.605,160,0.77,184,0.017,185,0.017,211,0.978,240,2.696,270,0.926,272,4.954,274,4.632,276,4.632,286,3.29,291,3.048,293,1.91,297,5.662,301,4.093,303,3.048,370,4.368,384,3.348,395,3.253,447,5.324,640,3.253,817,3.253,841,1.737,893,2.963,894,5.44,895,2.688,896,3.253,897,4.368,898,4.836,899,4.836,900,5.844,901,5.464,902,4.836,903,4.632,904,4.836,905,3.595,906,4.691,907,3.595,908,4.836,909,4.836,910,4.1,911,4.836,912,4.728,913,3.595,914,5.464,915,3.595,916,6.609,917,4.836,918,4.836,919,4.836,920,4.1,921,4.1,922,2.723,923,3.595,924,5.229,925,3.595,926,5.844,927,4.836,928,5.844,929,5.844,930,5.844,931,6.28,932,4.836,933,5.844,934,6.787,935,4.836,936,3.595,937,6.524,938,4.368,939,5.844,940,5.844,941,5.844,942,5.844,943,3.595,944,3.595,945,4.836,946,3.595,947,4.836,948,3.595,949,3.595,950,3.595,951,4.1,952,3.615,953,4.836,954,4.954,955,4.836,956,4.836,957,3.595,958,3.595,959,5.844,960,4.836,961,3.595,962,4.836,963,3.595,964,3.595,965,3.595,966,3.048,967,3.595,968,3.595,969,3.595,970,3.595,971,3.595,972,3.595]],["title/classes/Cut.html",[0,0.243,973,2.123]],["body/classes/Cut.html",[0,0.25,2,0.401,3,0.265,4,0.234,5,0.174,9,0.358,16,0.174,17,0.641,20,1.935,24,1.538,33,0.59,42,1.133,47,0.774,49,1.062,50,0.596,51,0.025,52,0.534,53,0.28,54,0.54,56,1.547,57,0.984,58,0.857,59,1.528,71,1.373,80,0.907,93,2.164,103,0.618,112,0.847,117,1.088,151,0.298,152,0.581,160,0.437,184,0.017,185,0.017,228,1.077,252,2.629,256,1.739,304,3.26,341,2.814,468,3.918,474,3.064,640,3.235,754,5.654,755,5.654,910,4.078,973,4.283,974,3.024,975,3.024,976,3.567,977,4.241,978,5.442,979,5.442,980,5.442,981,5.442,982,4.09,983,6.404,984,6.404,985,6.404,986,6.404,987,4.81,988,6.081,989,6.081,990,3.84,991,3.567,992,4.81,993,3.595,994,5.442,995,6.669,996,5.442,997,3.66,998,6.265,999,6.265,1000,4.683,1001,3.567,1002,5.312,1003,5.825,1004,4.078,1005,3.567,1006,3.567,1007,3.567,1008,3.567,1009,3.567,1010,3.567,1011,3.567,1012,3.567,1013,4.81,1014,3.567,1015,2.503,1016,4.81,1017,3.567,1018,5.825,1019,4.81,1020,3.567,1021,3.567,1022,4.81,1023,4.81,1024,4.81,1025,4.81,1026,5.442,1027,4.81,1028,4.81,1029,3.567]],["title/classes/EffectsManager.html",[0,0.243,1030,2.33]],["body/classes/EffectsManager.html",[0,0.232,2,0.371,3,0.246,4,0.217,5,0.161,6,2.65,8,1.005,9,0.456,11,1.418,16,0.161,17,0.608,20,1.947,24,1.525,29,3.09,33,0.56,42,1.233,44,2.481,45,2.633,47,0.752,50,0.606,51,0.025,52,0.494,53,0.271,54,0.549,55,2.371,56,1.307,57,0.958,58,0.405,59,1.008,61,2.539,71,0.944,94,1.246,99,3.458,101,1.315,103,0.568,110,2.269,112,0.922,134,0.726,135,0.595,151,0.276,152,0.602,160,0.405,184,0.016,185,0.016,211,0.879,228,1.067,251,1.795,270,0.659,331,4.218,336,3.796,467,2.206,626,3.329,638,2.471,714,2.206,853,2.366,1030,3.072,1031,5.717,1032,5.004,1033,4.218,1034,5.811,1035,3.872,1036,3.872,1037,5.505,1038,6.743,1039,5.232,1040,4.61,1041,5.643,1042,4.567,1043,4.567,1044,4.567,1045,4.567,1046,4.567,1047,3.872,1048,3.872,1049,5.643,1050,2.799,1051,3.796,1052,4.218,1053,2.026,1054,5.232,1055,2.471,1056,6.572,1057,5.232,1058,2.803,1059,3.414,1060,3.414,1061,4.692,1062,2.471,1063,3.306,1064,4.218,1065,4.784,1066,4.218,1067,5.423,1068,4.567,1069,3.306,1070,4.567,1071,3.306,1072,4.567,1073,2.803,1074,3.072,1075,4.567,1076,2.803,1077,3.306,1078,2.224,1079,4.567,1080,3.306,1081,3.306,1082,3.306,1083,4.567,1084,3.306,1085,4.436,1086,3.872,1087,3.306,1088,3.306,1089,3.306,1090,2.026,1091,4.567,1092,5.232,1093,4.567,1094,4.567,1095,3.306,1096,3.306,1097,3.306,1098,3.306,1099,3.306,1100,2.803,1101,3.306,1102,3.306,1103,3.306,1104,3.306,1105,3.306,1106,3.306,1107,3.306]],["title/interfaces/EventDataLoader.html",[217,1.276,859,2.123]],["body/interfaces/EventDataLoader.html",[3,0.414,4,0.244,5,0.182,9,0.459,11,1.594,16,0.271,33,0.606,47,0.727,50,0.606,51,0.025,52,0.494,53,0.252,54,0.549,69,2.289,80,1.09,88,1.999,103,0.642,112,0.77,117,0.865,121,1.708,125,2.574,134,0.681,151,0.31,152,0.617,184,0.017,185,0.017,217,1.369,219,2.094,226,3.327,228,1.11,231,1.369,233,2.785,255,3.176,256,1.734,323,3.406,544,3.032,547,3.698,626,2.574,627,3.129,628,3.032,630,4.428,648,3.327,707,1.691,710,2.335,753,3.698,762,2.39,777,3.63,785,2.994,821,3.698,853,1.708,859,3.032,870,2.226,874,2.574,887,2.78,889,2.78,922,2.785,1108,5.573,1109,2.78,1110,4.947,1111,4.521,1112,4.947,1113,5.558,1114,5.558,1115,4.947,1116,5.022,1117,5.022,1118,4.947,1119,5.924,1120,3.72,1121,5.022,1122,3.72,1123,4.266,1124,3.698,1125,3.72,1126,5.022,1127,4.428,1128,3.3,1129,4.428,1130,3.701,1131,3.72,1132,5.376,1133,4.194,1134,2.574,1135,4.947,1136,4.947,1137,4.194,1138,3.985,1139,3.698,1140,4.947,1141,4.947,1142,3.698,1143,4.947,1144,3.327,1145,3.738,1146,3.698,1147,4.194,1148,3.72,1149,4.194,1150,4.194,1151,3.72,1152,3.327,1153,3.985,1154,4.194,1155,5.376,1156,3.72,1157,4.428,1158,3.698,1159,4.947,1160,3.72,1161,4.194,1162,4.028,1163,4.194,1164,3.698,1165,3.72,1166,2.78]],["title/classes/ExportManager.html",[0,0.243,1167,2.59]],["body/classes/ExportManager.html",[0,0.262,2,0.42,3,0.278,4,0.245,5,0.272,6,2.496,8,1.137,9,0.472,11,1.247,12,2.085,16,0.183,20,1.901,24,1.402,33,0.608,44,2.449,47,0.694,50,0.632,51,0.025,52,0.515,53,0.252,54,0.573,66,1.805,90,2.398,92,3.362,103,0.573,112,0.773,134,0.727,135,0.673,151,0.465,152,0.61,160,0.683,184,0.017,185,0.017,211,0.773,228,1.063,245,4.264,251,1.95,256,1.691,258,3.041,270,0.991,323,4.156,627,1.682,672,3.169,841,1.806,851,2.423,866,1.95,1000,3.71,1053,2.291,1139,3.71,1144,4.764,1167,3.71,1168,5.384,1169,5.572,1170,4.963,1171,4.963,1172,4.963,1173,4.963,1174,3.738,1175,3.738,1176,5.032,1177,3.992,1178,3.71,1179,4.207,1180,4.207,1181,5.936,1182,3.943,1183,4.963,1184,3.041,1185,4.963,1186,3.738,1187,3.892,1188,4.963,1189,3.738,1190,4.963,1191,3.738,1192,3.71,1193,4.963,1194,4.963,1195,3.738,1196,4.963,1197,3.738,1198,2.514,1199,3.169,1200,3.738,1201,5.572,1202,3.748,1203,3.738,1204,3.738,1205,3.738,1206,4.963,1207,5.936,1208,3.738,1209,2.514,1210,2.514,1211,3.169,1212,2.794,1213,4.207,1214,3.738,1215,3.738,1216,3.169,1217,3.738,1218,3.738,1219,3.738,1220,5.936,1221,3.738,1222,5.936,1223,3.738,1224,3.169,1225,3.738,1226,3.738,1227,3.738,1228,3.738,1229,3.738,1230,3.738,1231,3.738,1232,3.738]],["title/classes/Field.html",[0,0.243,982,2.33]],["body/classes/Field.html",[0,0.385,2,0.408,3,0.27,4,0.239,5,0.177,9,0.27,13,1.756,16,0.177,17,0.484,18,2.161,33,0.597,47,0.408,50,0.372,51,0.026,52,0.303,53,0.148,54,0.337,56,0.802,57,0.524,59,1.075,71,1.037,79,2.041,88,1.105,94,0.802,103,0.584,107,1.105,117,1.059,121,1.255,134,0.445,135,0.654,143,1.682,148,1.756,151,0.303,152,0.606,160,0.597,184,0.017,185,0.017,196,2.227,211,0.566,236,1.891,240,2.956,252,1.756,265,3.093,267,2.227,270,0.974,280,1.756,281,3.367,304,3.278,318,2.046,352,3.948,363,1.891,449,3.276,474,3.093,521,1.891,712,2.742,719,3.093,739,2.046,762,2.353,818,2.444,841,3.043,982,3.948,1015,1.891,1090,2.985,1202,2.444,1233,3.276,1234,2.444,1235,2.717,1236,3.634,1237,3.634,1238,3.634,1239,3.641,1240,4.501,1241,4.501,1242,2.046,1243,2.717,1244,2.703,1245,2.717,1246,2.717,1247,2.717,1248,3.948,1249,3.597,1250,2.717,1251,2.717,1252,2.717,1253,4.116,1254,2.717,1255,2.717,1256,2.717,1257,2.717,1258,4.387,1259,4.107,1260,3.641,1261,3.641,1262,4.81,1263,4.888,1264,4.387,1265,3.948,1266,2.717,1267,2.717,1268,2.717,1269,4.951,1270,2.717,1271,2.046,1272,4.888,1273,2.717,1274,2.444,1275,4.575,1276,5.003,1277,2.717,1278,4.81,1279,2.717,1280,2.717,1281,2.717,1282,3.641,1283,2.717,1284,3.641,1285,4.107,1286,2.717,1287,2.717,1288,2.717,1289,2.717,1290,2.717,1291,2.717,1292,2.717,1293,2.717,1294,2.717,1295,2.717,1296,2.717,1297,2.717,1298,2.717,1299,2.717,1300,2.717,1301,2.717,1302,2.046,1303,2.717,1304,4.107,1305,3.641,1306,2.717,1307,4.107,1308,2.717,1309,4.107,1310,3.641,1311,2.717,1312,2.717,1313,2.717,1314,2.717,1315,2.717,1316,2.717,1317,2.717,1318,2.717,1319,2.717,1320,2.717,1321,2.717,1322,3.641,1323,3.641,1324,3.641,1325,4.107,1326,2.985,1327,4.107,1328,3.641,1329,2.444,1330,3.276,1331,2.444,1332,2.227,1333,2.985,1334,2.717,1335,2.717,1336,2.717,1337,2.717,1338,2.717,1339,2.717,1340,2.717]],["title/classes/InfoLogger.html",[0,0.243,1130,1.951]],["body/classes/InfoLogger.html",[0,0.326,2,0.522,3,0.529,4,0.305,5,0.227,9,0.425,16,0.227,17,0.76,20,1.92,33,0.7,47,0.723,50,0.476,51,0.025,52,0.388,53,0.252,54,0.431,57,0.823,58,0.7,73,3.214,80,1.047,88,1.736,103,0.573,110,1.971,112,0.724,117,0.889,126,1.955,151,0.388,152,0.529,160,0.57,184,0.02,185,0.02,228,0.724,256,1.742,626,2.97,707,1.838,739,3.214,785,3.065,853,1.606,1130,3.214,1145,4.662,1146,3.478,1153,4.523,1164,4.267,1341,5.601,1342,3.944,1343,6.175,1344,6.175,1345,6.438,1346,4.652,1347,4.839,1348,4.652,1349,5.708,1350,5.708,1351,4.267,1352,4.839,1353,5.708,1354,4.652,1355,5.708,1356,5.027,1357,4.652,1358,4.267,1359,4.267,1360,4.652,1361,4.652,1362,4.652,1363,4.652,1364,4.652]],["title/classes/LoadingManager.html",[0,0.243,1365,2.123]],["body/classes/LoadingManager.html",[0,0.232,2,0.372,3,0.247,4,0.218,5,0.162,8,1.008,9,0.467,11,1.609,16,0.162,17,0.61,18,1.929,20,1.912,24,1.559,33,0.561,42,1.235,47,0.762,49,1.01,50,0.627,51,0.026,52,0.511,53,0.275,54,0.568,57,0.906,58,0.77,66,1.593,74,3.421,80,1.057,94,1.434,96,3.327,97,3.279,103,0.594,112,1.063,117,0.978,147,3.36,151,0.277,152,0.583,160,0.406,184,0.016,185,0.016,194,4.224,231,1.221,233,2.577,251,1.303,270,0.815,293,1.593,341,2.211,436,4.632,707,1.827,710,1.393,733,4.123,787,1.726,866,2.409,870,3.014,876,3.822,990,3.756,1053,2.032,1062,2.479,1182,3.905,1365,3.463,1366,5.786,1367,2.811,1368,5.24,1369,5.24,1370,5.24,1371,5.24,1372,4.577,1373,4.577,1374,4.577,1375,4.577,1376,4.577,1377,4.577,1378,3.88,1379,3.316,1380,3.316,1381,4.577,1382,5.2,1383,3.316,1384,4.577,1385,3.316,1386,4.577,1387,3.316,1388,5.197,1389,4.577,1390,3.316,1391,3.078,1392,4.577,1393,2.811,1394,4.577,1395,5.65,1396,4.577,1397,2.479,1398,4.577,1399,4.577,1400,2.811,1401,4.577,1402,3.316,1403,5.24,1404,3.316,1405,4.577,1406,3.316,1407,3.316,1408,2.811,1409,5.24,1410,4.577,1411,3.316,1412,3.316,1413,3.316,1414,3.316,1415,4.577,1416,3.316,1417,4.577,1418,3.88,1419,4.577,1420,3.316,1421,3.316,1422,4.577,1423,3.316,1424,4.577,1425,3.316,1426,3.316,1427,3.316,1428,3.316,1429,3.316]],["title/classes/PhoenixMenuNode.html",[0,0.243,702,1.951]],["body/classes/PhoenixMenuNode.html",[0,0.161,2,0.259,3,0.171,4,0.151,5,0.112,9,0.45,16,0.112,17,0.468,20,1.541,33,0.43,42,0.827,47,0.756,49,1.192,50,0.619,51,0.026,52,0.582,53,0.28,54,0.55,56,1.408,57,0.81,58,0.801,59,1.192,66,1.919,69,1.659,71,1.214,75,3.631,76,3.139,80,1.068,88,1.067,93,2.141,94,1.393,101,0.579,103,0.606,107,1.803,112,0.942,117,0.547,121,2.153,126,2.358,134,0.282,139,2.361,151,0.192,152,0.606,160,0.688,164,1.296,167,1.469,184,0.012,185,0.012,190,2.976,192,2.151,198,3.557,211,0.359,231,1.566,268,1.411,270,0.928,293,1.294,434,1.952,467,2.922,468,2.361,522,2.151,525,2.624,576,2.624,627,1.036,660,5.102,681,3.518,683,2.202,702,3.832,707,1.358,710,1.787,716,2.916,735,2.927,736,3.726,767,4.521,776,4.143,787,1.827,820,1.721,849,2.976,851,2.131,866,1.38,888,3.807,997,1.549,1074,2.361,1111,1.549,1134,1.827,1187,1.411,1244,2.726,1382,4.035,1430,1.952,1431,5.608,1432,4.254,1433,4.254,1434,4.254,1435,4.944,1436,4.254,1437,6.312,1438,5.456,1439,4.254,1440,4.254,1441,4.254,1442,3.51,1443,3.51,1444,3.51,1445,4.758,1446,2.976,1447,3.51,1448,3.51,1449,4.758,1450,1.952,1451,3.51,1452,4.906,1453,2.303,1454,2.303,1455,2.303,1456,5.027,1457,4.034,1458,3.51,1459,2.303,1460,2.303,1461,2.303,1462,2.303,1463,2.976,1464,2.303,1465,2.303,1466,2.303,1467,2.303,1468,2.303,1469,2.303,1470,4.254,1471,2.303,1472,3.554,1473,3.51,1474,2.303,1475,2.976,1476,3.51,1477,2.303,1478,4.906,1479,4.758,1480,4.758,1481,3.51,1482,2.303,1483,2.303,1484,2.976,1485,2.303,1486,3.258,1487,2.303,1488,3.51,1489,2.303,1490,3.51,1491,2.303,1492,2.976,1493,3.51,1494,2.303,1495,3.607,1496,2.624,1497,3.51,1498,3.607,1499,1.952,1500,2.303,1501,5.122,1502,3.51,1503,3.51,1504,2.303,1505,2.303,1506,2.303,1507,3.51,1508,2.303,1509,2.303,1510,2.303,1511,2.303,1512,2.303,1513,2.303,1514,1.549,1515,2.303,1516,2.303,1517,2.303,1518,2.303,1519,2.303,1520,2.303,1521,4.758,1522,3.51,1523,3.51,1524,2.303,1525,2.303,1526,2.303,1527,4.758,1528,1.952,1529,2.303,1530,2.303,1531,2.303,1532,2.303,1533,2.303,1534,2.303,1535,4.254,1536,2.303,1537,1.952,1538,2.303,1539,2.303,1540,2.303,1541,2.303,1542,2.303,1543,3.51,1544,2.303,1545,2.303,1546,2.303,1547,2.303,1548,3.51,1549,2.303,1550,2.303,1551,2.303,1552,4.254,1553,1.952,1554,2.303,1555,2.303,1556,2.303,1557,3.51,1558,2.303,1559,4.254,1560,2.303,1561,2.303,1562,2.303,1563,2.303,1564,2.303,1565,2.303,1566,2.303,1567,2.303,1568,2.303,1569,2.303,1570,2.303,1571,4.254,1572,2.303,1573,2.303,1574,2.303,1575,2.303,1576,2.303,1577,2.303,1578,5.613,1579,2.303,1580,4.254,1581,2.303,1582,3.51,1583,2.303,1584,2.303,1585,2.303,1586,2.303,1587,2.303]],["title/interfaces/PhoenixUI.html",[217,1.276,1588,2.33]],["body/interfaces/PhoenixUI.html",[3,0.255,4,0.225,5,0.168,9,0.48,16,0.168,33,0.574,44,1.617,47,0.743,50,0.649,51,0.025,52,0.572,53,0.287,54,0.588,57,0.676,66,1.424,69,1.857,80,1.095,94,1.177,101,1.177,103,0.62,112,1.087,126,2.408,134,0.574,135,0.618,151,0.286,152,0.629,167,2.138,184,0.016,185,0.016,198,4.485,217,1.964,219,1.931,228,1.097,245,3.512,256,1.771,259,2.253,290,3.151,335,2.787,342,3.198,345,3.151,387,4.166,467,2.263,525,3.501,545,2.263,616,4.284,627,2.904,628,3.512,681,3.478,683,1.979,706,4.755,707,1.98,735,2.893,785,3.031,851,2.11,870,2.579,888,3.763,920,5.251,973,3.512,993,3.501,1074,3.151,1123,3.855,1124,4.284,1128,2.983,1391,3.151,1588,3.151,1589,2.908,1590,3.971,1591,3.971,1592,5.334,1593,5.732,1594,4.684,1595,4.684,1596,5.732,1597,4.684,1598,4.684,1599,6.193,1600,4.684,1601,4.684,1602,3.43,1603,5.251,1604,3.43,1605,5.732,1606,3.987,1607,3.43,1608,3.971,1609,4.684,1610,4.684,1611,4.684,1612,3.43,1613,5.732,1614,4.684,1615,5.732,1616,3.43,1617,4.684,1618,5.732,1619,3.971,1620,3.43,1621,4.684,1622,5.732,1623,3.43,1624,4.859,1625,3.971,1626,4.684,1627,3.43,1628,4.684,1629,4.684,1630,3.43,1631,3.971,1632,3.971,1633,4.684,1634,3.43,1635,4.684,1636,5.732,1637,3.43,1638,4.684,1639,3.43]],["title/classes/PresetView.html",[0,0.243,882,2.33]],["body/classes/PresetView.html",[0,0.279,2,0.448,3,0.297,4,0.262,5,0.195,9,0.385,16,0.195,17,0.69,24,1.566,33,0.635,42,1.22,45,2.538,47,0.757,49,1.143,50,0.408,51,0.025,52,0.575,53,0.272,54,0.37,57,0.747,58,0.746,61,2.33,79,2.161,80,1.073,101,1.53,103,0.48,110,1.788,117,1.103,143,1.788,151,0.432,152,0.564,160,0.489,184,0.018,185,0.018,222,3.918,227,2.915,293,1.574,301,4.089,438,3.635,778,2.98,865,3.167,868,3.987,882,3.483,883,2.98,1235,3.87,1265,3.483,1435,5.24,1450,3.38,1498,3.38,1499,4.875,1640,5.085,1641,2.98,1642,5.178,1643,5.178,1644,3.87,1645,5.178,1646,6.465,1647,6.672,1648,6.672,1649,6.582,1650,6.582,1651,6.087,1652,5.481,1653,5.178,1654,6.087,1655,6.087,1656,3.987,1657,3.987,1658,3.987,1659,6.087,1660,3.87,1661,3.987,1662,3.987,1663,3.987,1664,3.987,1665,3.38,1666,3.987,1667,3.987,1668,3.987,1669,3.987,1670,3.987,1671,3.987,1672,3.987,1673,3.987]],["title/classes/PrettySymbols.html",[0,0.243,773,2.123]],["body/classes/PrettySymbols.html",[0,0.293,2,0.469,3,0.311,4,0.274,5,0.204,9,0.437,16,0.204,17,0.711,18,2.505,22,4.395,24,1.298,33,0.654,47,0.66,49,0.923,50,0.681,51,0.025,52,0.445,53,0.271,54,0.495,57,0.603,58,0.512,69,2.204,80,1.049,103,0.545,151,0.349,152,0.594,160,0.721,184,0.019,185,0.019,211,0.831,231,2.281,259,1.642,265,2.353,270,0.923,280,2.019,375,3.543,544,3.271,598,2.561,644,4.012,707,1.193,710,2.603,712,3.005,719,3.005,773,3.271,775,4.893,779,3.59,823,3.543,841,2.578,843,3.543,896,2.811,906,3.59,912,3.59,924,3.989,1248,3.59,1249,3.271,1514,4.167,1674,5.252,1675,3.543,1676,6.999,1677,5.337,1678,5.337,1679,5.252,1680,5.337,1681,6.195,1682,6.195,1683,5.252,1684,6.195,1685,4.179,1686,5.337,1687,4.179,1688,6.737,1689,5.337,1690,5.337,1691,4.179,1692,6.654,1693,6.401,1694,5.88,1695,4.179,1696,4.179,1697,4.179,1698,4.179,1699,4.179,1700,5.88,1701,3.543,1702,5.337,1703,4.179,1704,4.179,1705,4.179,1706,5.337,1707,4.179,1708,4.179,1709,4.179,1710,4.179,1711,4.179,1712,3.543,1713,4.179,1714,6.195,1715,4.179,1716,4.179,1717,4.179,1718,5.337,1719,4.179,1720,4.179,1721,4.179,1722,4.179,1723,4.179,1724,4.179]],["title/classes/RKHelper.html",[0,0.243,1725,2.33]],["body/classes/RKHelper.html",[0,0.292,2,0.467,3,0.31,4,0.273,5,0.203,9,0.46,16,0.203,18,2.503,24,1.296,33,0.758,47,0.659,50,0.601,51,0.025,52,0.49,53,0.261,54,0.544,56,1.366,57,0.892,58,0.51,59,1.411,79,2.004,88,1.619,94,1.411,103,0.636,107,2.021,110,1.838,112,0.648,134,0.719,135,0.75,151,0.347,152,0.574,160,0.784,184,0.019,185,0.019,225,2.77,228,0.829,231,1.96,240,2.747,252,2.989,259,2.092,265,3.483,270,0.981,335,3.029,339,4.125,341,2.572,363,3.054,403,3.112,521,2.77,598,2.551,817,2.8,819,3.529,820,3.98,893,2.551,895,3.112,896,3.948,897,3.112,906,2.8,912,3.581,952,3.112,1015,2.77,1152,3.581,1240,2.8,1241,2.8,1242,3.743,1253,2.8,1330,4.161,1331,3.581,1332,3.918,1712,4.513,1725,3.581,1726,5.245,1727,5.869,1728,4.513,1729,5.324,1730,4.163,1731,4.163,1732,5.324,1733,5.324,1734,6.394,1735,6.186,1736,5.324,1737,4.163,1738,5.324,1739,4.513,1740,5.324,1741,5.324,1742,5.324,1743,5.324,1744,4.163,1745,5.869,1746,4.163,1747,4.163,1748,4.163,1749,5.324,1750,4.163,1751,4.163,1752,4.163,1753,4.163,1754,4.163,1755,4.163,1756,4.163,1757,4.163,1758,4.163,1759,4.163,1760,4.163,1761,4.163,1762,4.163,1763,4.163,1764,4.163,1765,4.163,1766,4.163,1767,4.163,1768,4.163,1769,4.163]],["title/classes/RendererManager.html",[0,0.243,248,2.33]],["body/classes/RendererManager.html",[0,0.179,2,0.287,3,0.19,4,0.168,5,0.125,6,2.682,8,0.778,9,0.48,11,1.412,12,1.596,16,0.221,17,0.506,20,1.907,24,1.511,29,3.458,33,0.466,42,1.068,44,2.062,45,2.32,47,0.764,49,0.839,50,0.653,51,0.026,52,0.532,53,0.269,54,0.592,55,2.51,56,1.408,57,0.724,58,0.761,59,1.107,63,2.84,64,4.195,69,1.231,71,1.084,80,0.875,90,2.59,99,4.353,101,1.603,103,0.633,107,1.378,110,1.732,112,0.993,117,0.398,121,0.883,134,0.313,135,0.684,151,0.213,152,0.608,160,0.713,165,2.168,184,0.013,185,0.013,211,0.592,221,1.567,228,0.93,248,2.555,251,1.493,258,2.328,259,1.781,270,0.896,293,1.378,318,2.139,341,2.424,438,3.109,464,3.661,467,1.835,470,3.221,545,2.424,707,1.084,714,1.835,732,4.376,853,1.939,857,3.75,868,2.139,870,2.257,871,4.253,872,3.074,990,1.567,1040,4.018,1050,3.951,1051,4.018,1052,4.466,1053,2.328,1055,1.912,1059,2.84,1061,2.84,1074,2.555,1076,2.168,1100,2.168,1153,4.556,1164,3.75,1184,2.778,1391,2.555,1393,2.168,1397,1.912,1400,2.168,1770,5.784,1771,4.533,1772,5.017,1773,5.36,1774,6.845,1775,3.799,1776,3.799,1777,5.017,1778,5.017,1779,5.017,1780,5.017,1781,2.84,1782,3.799,1783,5.017,1784,3.799,1785,3.799,1786,3.799,1787,3.799,1788,3.799,1789,3.799,1790,3.799,1791,3.799,1792,4.643,1793,2.558,1794,2.558,1795,3.799,1796,3.778,1797,3.799,1798,3.799,1799,2.558,1800,3.799,1801,2.168,1802,3.799,1803,3.799,1804,2.558,1805,2.558,1806,2.168,1807,2.168,1808,5.017,1809,3.799,1810,2.168,1811,3.799,1812,1.977,1813,3.799,1814,2.558,1815,3.799,1816,2.168,1817,3.799,1818,3.799,1819,3.799,1820,2.558,1821,3.799,1822,2.558,1823,3.799,1824,3.221,1825,3.843,1826,3.843,1827,3.799,1828,3.799,1829,2.558,1830,3.799,1831,5.617,1832,2.558,1833,3.799,1834,5.017,1835,5.017,1836,5.017,1837,3.799,1838,2.558,1839,2.558,1840,1.912,1841,2.558,1842,2.558,1843,1.912,1844,2.558,1845,2.558,1846,2.558,1847,2.558,1848,2.558,1849,3.799,1850,4.533,1851,2.558,1852,2.558,1853,4.533,1854,2.558,1855,2.558,1856,3.799,1857,2.558,1858,4.533,1859,3.799,1860,2.558,1861,3.799,1862,2.558,1863,2.558,1864,2.558,1865,2.558,1866,2.558,1867,3.799,1868,2.558,1869,3.799,1870,5.017,1871,2.558,1872,2.558,1873,2.558,1874,2.558,1875,3.799,1876,2.558,1877,2.558,1878,2.558,1879,3.799]],["title/classes/RungeKutta.html",[0,0.243,1242,1.951]],["body/classes/RungeKutta.html",[0,0.37,2,0.378,3,0.25,4,0.221,5,0.164,9,0.393,13,2.234,16,0.164,17,0.616,18,2.267,33,0.567,47,0.519,50,0.473,51,0.026,52,0.386,53,0.215,54,0.429,56,0.743,57,0.486,58,0.413,59,1.255,71,1.32,79,2.137,88,1.406,94,1.166,103,0.605,107,1.606,112,0.524,117,1.088,121,1.162,134,0.413,135,0.606,143,1.963,148,1.626,151,0.281,152,0.596,160,0.567,184,0.016,185,0.016,196,2.063,211,0.524,231,1.239,236,2.406,240,2.942,252,2.234,265,3.202,267,2.833,270,0.961,280,2.552,281,3.485,304,3.494,318,1.895,352,3.825,363,2.749,449,3.11,474,3.356,521,2.406,712,2.974,719,3.202,739,2.603,762,2.747,818,3.11,841,2.975,1015,2.406,1090,3.485,1202,2.264,1233,3.553,1234,2.264,1239,4.25,1240,4.6,1241,4.6,1242,2.603,1243,3.456,1244,2.821,1245,3.456,1246,3.456,1247,3.456,1248,4.142,1249,3.774,1250,2.516,1251,2.516,1252,2.516,1253,4.009,1254,2.516,1255,2.516,1256,2.516,1257,2.516,1258,4.25,1259,3.948,1260,3.456,1261,3.456,1262,4.715,1263,4.802,1264,4.25,1265,3.825,1266,2.516,1267,2.516,1268,2.516,1269,4.872,1270,2.516,1271,1.895,1272,4.802,1273,2.516,1274,2.264,1275,4.455,1276,4.93,1277,2.516,1278,4.715,1279,2.516,1280,2.516,1281,2.516,1282,3.456,1283,2.516,1284,3.456,1285,3.948,1286,2.516,1287,2.516,1288,2.516,1289,2.516,1290,2.516,1291,2.516,1292,2.516,1293,2.516,1294,2.516,1295,2.516,1296,2.516,1297,2.516,1298,2.516,1299,2.516,1300,2.516,1301,2.516,1302,1.895,1303,2.516,1304,3.948,1305,3.456,1306,2.516,1307,3.948,1308,2.516,1309,3.948,1310,3.456,1311,2.516,1312,2.516,1313,2.516,1314,2.516,1315,2.516,1316,2.516,1317,2.516,1318,2.516,1319,2.516,1320,2.516,1321,2.516,1322,4.455,1323,4.455,1324,4.25,1325,4.455,1326,3.485,1327,4.455,1328,4.25,1329,3.11,1330,3.825,1331,3.11,1332,3.237,1333,2.833,1334,2.516,1335,2.516,1336,2.516,1337,2.516,1338,2.516,1339,2.516,1340,2.516,1880,3.366,1881,3.366,1882,3.366]],["title/classes/ScriptLoader.html",[0,0.243,1883,2.59]],["body/classes/ScriptLoader.html",[0,0.314,2,0.504,3,0.334,4,0.294,5,0.219,9,0.415,11,1.127,16,0.219,18,2.237,24,0.99,33,0.684,47,0.504,50,0.459,51,0.025,52,0.374,53,0.183,54,0.563,57,0.647,58,0.55,59,1.232,80,1.038,103,0.518,126,1.885,134,0.55,151,0.374,152,0.563,160,0.55,184,0.019,185,0.019,211,0.869,228,0.869,256,1.598,270,0.876,293,1.364,345,3.017,707,1.28,865,3.308,866,2.57,872,3.42,874,2.904,876,3.42,977,3.42,1109,3.353,1134,2.334,1182,3.579,1365,3.723,1438,4.731,1883,4.172,1884,4.731,1885,5.291,1886,6.356,1887,5.581,1888,4.731,1889,6.075,1890,4.486,1891,6.888,1892,6.356,1893,6.075,1894,4.486,1895,5.15,1896,6.075,1897,6.538,1898,5.581,1899,5.581,1900,5.581,1901,4.275,1902,3.803,1903,4.486,1904,4.486,1905,5.581,1906,4.486,1907,4.486,1908,4.486,1909,4.486,1910,4.486,1911,4.486,1912,4.486,1913,4.486,1914,4.486,1915,5.581,1916,4.486,1917,6.356,1918,6.356,1919,4.486,1920,3.803,1921,4.486,1922,4.486,1923,3.803,1924,4.486,1925,4.486]],["title/classes/SelectionManager.html",[0,0.243,1926,2.59]],["body/classes/SelectionManager.html",[0,0.168,2,0.269,3,0.178,4,0.157,5,0.117,6,2.679,8,0.729,9,0.423,11,1.56,12,1.52,16,0.117,17,0.647,20,2.02,24,1.483,33,0.444,42,1.229,44,2.345,45,2.422,47,0.763,48,1.792,50,0.561,51,0.026,52,0.489,53,0.268,54,0.484,55,2.041,56,1.256,57,0.701,58,0.672,59,1.21,62,3.488,69,2.254,71,1.033,80,0.934,85,1.628,88,1.477,92,2.952,94,1.21,97,2.648,101,1.378,103,0.584,107,0.729,110,1.893,112,0.912,117,0.373,128,2.038,134,0.672,135,0.432,143,1.8,151,0.2,152,0.567,160,0.595,184,0.013,185,0.013,186,2.936,189,1.247,200,2.705,211,0.886,228,1.064,231,1.605,245,3.36,251,2.155,255,2.897,256,1.473,258,2.218,259,1.422,268,1.469,270,0.896,286,3.441,293,1.326,302,1.469,331,4.098,341,1.748,467,1.748,552,1.469,624,1.792,625,2.434,626,2.528,635,4.118,707,0.684,710,1.832,714,1.748,744,4.281,762,1.748,773,1.469,774,2.032,775,1.792,841,1.748,853,2.256,875,1.612,1030,4.323,1032,3.897,1033,4.483,1034,4.825,1035,4.42,1036,4.42,1051,4.111,1052,3.631,1064,4.098,1065,4.118,1066,4.098,1067,4.648,1078,2.434,1085,3.068,1086,2.032,1130,3.619,1134,1.247,1145,2.434,1146,3.631,1162,2.977,1166,1.792,1351,4.098,1352,4.118,1356,3.259,1359,3.631,1418,2.032,1781,3.259,1796,3.687,1840,2.705,1926,2.705,1927,5.778,1928,5.449,1929,4.36,1930,4.36,1931,4.36,1932,4.36,1933,4.36,1934,4.36,1935,4.36,1936,4.648,1937,4.118,1938,4.857,1939,4.118,1940,4.857,1941,4.118,1942,3.619,1943,3.619,1944,3.619,1945,3.619,1946,3.068,1947,2.032,1948,1.792,1949,2.032,1950,3.619,1951,3.619,1952,2.397,1953,3.619,1954,2.032,1955,6.364,1956,5.482,1957,2.397,1958,4.857,1959,2.397,1960,2.032,1961,3.619,1962,3.619,1963,1.612,1964,1.792,1965,2.397,1966,3.631,1967,2.397,1968,4.967,1969,2.397,1970,2.397,1971,2.397,1972,4.805,1973,3.068,1974,2.397,1975,3.068,1976,3.068,1977,3.619,1978,3.619,1979,2.397,1980,2.397,1981,3.619,1982,2.397,1983,4.36,1984,3.619,1985,3.619,1986,2.397,1987,3.619,1988,2.397,1989,4.36,1990,2.397,1991,2.397,1992,2.397,1993,2.397,1994,1.792,1995,2.434,1996,2.397,1997,4.36,1998,2.397,1999,2.397,2000,2.397,2001,2.397,2002,2.032,2003,2.397,2004,2.397,2005,2.397,2006,2.397,2007,2.397,2008,2.397,2009,2.397,2010,4.648,2011,5.482,2012,2.397,2013,3.619,2014,2.397,2015,4.36,2016,2.397,2017,3.619,2018,3.619,2019,3.619,2020,3.619,2021,2.397,2022,2.397,2023,2.397,2024,4.857,2025,3.619,2026,5.214,2027,2.397,2028,2.397,2029,2.397,2030,2.397,2031,3.619,2032,2.397,2033,2.397,2034,2.397,2035,2.397,2036,2.397,2037,2.397,2038,2.397,2039,2.397,2040,2.397,2041,2.397,2042,2.397,2043,2.397,2044,2.397,2045,2.397,2046,2.397,2047,2.397,2048,2.397,2049,3.619,2050,2.397,2051,1.792,2052,2.032,2053,2.397,2054,2.397,2055,2.397,2056,2.397,2057,2.397,2058,3.619,2059,2.397,2060,2.397,2061,2.397,2062,2.397,2063,2.397,2064,2.397,2065,2.397,2066,2.397,2067,2.397,2068,2.397,2069,2.397,2070,2.397,2071,2.397,2072,2.397,2073,2.397,2074,2.397,2075,2.397,2076,2.397]],["title/classes/State.html",[0,0.243,1244,1.456]],["body/classes/State.html",[0,0.328,2,0.384,3,0.255,4,0.225,5,0.167,9,0.255,13,1.654,16,0.167,17,0.71,18,1.722,47,0.724,51,0.026,53,0.263,56,0.756,57,0.93,58,0.791,59,1.033,71,1.335,73,1.928,79,2.052,88,1.041,94,0.756,103,0.531,107,1.041,117,1.08,121,1.182,134,0.42,135,0.616,143,1.615,148,1.654,151,0.286,152,0.598,160,0.573,184,0.016,185,0.016,196,2.098,211,0.83,236,2.434,240,2.924,252,1.654,265,3.376,267,2.867,270,0.964,280,1.654,281,3.266,293,1.882,304,3.357,318,1.928,352,3.852,363,1.782,384,2.867,449,3.146,472,2.559,474,3.376,521,1.782,712,3,719,3.225,739,2.634,762,2.26,818,2.303,841,2.99,1015,1.782,1090,2.867,1202,2.303,1233,4.4,1234,2.303,1239,3.497,1240,4.451,1241,4.451,1242,1.928,1243,2.559,1244,2.748,1245,2.559,1246,2.559,1247,2.559,1248,4.163,1249,3.793,1250,2.559,1251,2.559,1252,2.559,1253,4.033,1254,2.559,1255,2.559,1256,2.559,1257,2.559,1258,4.281,1259,3.983,1260,3.497,1261,3.497,1262,4.736,1263,4.822,1264,4.281,1265,3.852,1266,2.559,1267,2.559,1268,2.559,1269,4.89,1270,2.559,1271,1.928,1272,4.822,1273,2.559,1274,2.303,1275,4.482,1276,4.947,1277,2.559,1278,4.736,1279,2.559,1280,2.559,1281,2.559,1282,3.497,1283,2.559,1284,3.497,1285,3.983,1286,2.559,1287,2.559,1288,2.559,1289,2.559,1290,2.559,1291,2.559,1292,2.559,1293,2.559,1294,2.559,1295,2.559,1296,2.559,1297,2.559,1298,2.559,1299,2.559,1300,2.559,1301,2.559,1302,1.928,1303,2.559,1304,3.983,1305,3.497,1306,2.559,1307,3.983,1308,2.559,1309,3.983,1310,3.497,1311,2.559,1312,2.559,1313,2.559,1314,2.559,1315,2.559,1316,2.559,1317,2.559,1318,2.559,1319,2.559,1320,2.559,1321,2.559,1322,3.497,1323,3.497,1324,3.497,1325,3.983,1326,3.266,1327,3.983,1328,3.497,1329,3.146,1330,3.146,1331,2.303,1332,2.098,1333,3.51,1334,2.559,1335,2.559,1336,2.559,1337,2.559,1338,2.559,1339,2.559,1340,2.559,2077,4.678,2078,4.678,2079,4.678,2080,4.678,2081,3.424,2082,3.424,2083,3.424,2084,3.424,2085,3.424,2086,3.424,2087,3.424,2088,3.424,2089,3.424,2090,2.903]],["title/classes/StateManager.html",[0,0.243,2091,2.123]],["body/classes/StateManager.html",[0,0.21,2,0.336,3,0.223,4,0.197,5,0.146,8,0.911,9,0.464,11,1.638,16,0.146,17,0.568,18,2.185,20,1.416,33,0.522,42,1.169,44,1.472,45,2.476,47,0.772,48,2.24,49,0.941,50,0.625,51,0.026,52,0.509,53,0.274,54,0.566,56,1.095,57,0.78,58,0.662,61,2.432,66,1.805,80,0.989,90,2.059,93,1.918,101,1.654,103,0.624,107,0.911,112,0.972,117,1.003,121,1.472,134,0.7,135,0.54,151,0.25,152,0.566,160,0.662,164,3.438,184,0.015,185,0.015,186,1.687,189,1.559,211,0.924,227,3.043,228,0.989,231,1.827,251,1.675,257,4.206,268,1.836,270,0.78,301,4.264,438,3.674,638,2.24,702,3.342,707,0.855,710,2.085,733,4.332,735,2.565,736,3.248,776,1.836,785,1.918,787,1.559,791,3.614,853,2.192,861,5.031,866,2.124,888,1.687,1051,3.635,1053,1.836,1055,2.24,1058,2.54,1062,2.24,1090,3.312,1128,1.559,1157,3.187,1182,2.4,1187,3.312,1198,2.867,1199,2.54,1244,2.923,1378,3.614,1397,2.24,1446,3.614,1472,1.687,1484,3.614,1486,3.626,1553,2.54,1660,4.665,1801,2.54,1812,3.453,1816,2.54,1948,2.24,1963,2.016,1994,2.24,2091,3.637,2092,5.851,2093,4.263,2094,4.962,2095,4.962,2096,5.405,2097,5.405,2098,5.405,2099,5.405,2100,5.405,2101,5.405,2102,4.263,2103,4.263,2104,4.263,2105,4.263,2106,4.263,2107,4.263,2108,2.997,2109,4.263,2110,4.962,2111,5.405,2112,4.962,2113,4.263,2114,5.405,2115,2.997,2116,2.997,2117,2.997,2118,4.263,2119,4.263,2120,2.997,2121,4.263,2122,2.997,2123,4.263,2124,2.997,2125,4.263,2126,2.997,2127,4.263,2128,2.997,2129,2.24,2130,5.405,2131,5.405,2132,2.997,2133,4.263,2134,2.997,2135,2.997,2136,2.997,2137,2.54,2138,2.997,2139,2.54,2140,2.997,2141,4.263,2142,4.263,2143,4.263,2144,2.997,2145,2.997,2146,2.997,2147,2.997,2148,2.997,2149,2.997,2150,2.997,2151,2.997,2152,2.997,2153,4.962,2154,2.997,2155,4.962,2156,2.997,2157,2.997,2158,2.997,2159,4.206,2160,3.614,2161,2.997,2162,2.997,2163,2.997,2164,2.997,2165,2.997,2166,2.997,2167,2.997,2168,2.997]],["title/classes/TracksMaterial.html",[0,0.243,2169,2.33]],["body/classes/TracksMaterial.html",[0,0.313,2,0.36,3,0.239,4,0.211,5,0.157,9,0.333,14,3.463,16,0.218,17,0.596,42,1.054,47,0.502,49,1.137,50,0.328,51,0.026,52,0.268,53,0.131,54,0.297,56,0.987,58,0.778,59,1.47,71,1.812,75,3.746,79,1.039,80,0.499,94,1.339,101,1.294,103,0.297,112,0.696,117,0.945,134,0.393,135,0.577,147,2.691,151,0.373,152,0.477,160,0.683,167,2.149,184,0.016,185,0.016,211,1.072,225,2.327,239,2.518,240,1.879,242,3.746,246,3.008,249,2.74,270,0.743,293,1.565,302,3.413,335,2.939,339,4.003,453,1.669,552,2.74,596,3.94,598,1.966,642,4.379,644,3.413,707,0.915,729,2.74,870,2.636,977,3.718,1050,2.74,1060,2.398,1078,2.157,1333,3.413,1995,2.157,2169,3.463,2170,2.398,2171,4.746,2172,4.365,2173,4.365,2174,3.791,2175,4.472,2176,3.343,2177,2.719,2178,3.791,2179,4.966,2180,2.719,2181,4.966,2182,4.722,2183,2.719,2184,2.719,2185,2.719,2186,3.791,2187,3.791,2188,2.719,2189,2.719,2190,2.719,2191,2.719,2192,2.719,2193,2.719,2194,2.719,2195,2.719,2196,3.791,2197,3.791,2198,2.719,2199,2.719,2200,2.719,2201,2.719,2202,3.791,2203,3.791,2204,3.791,2205,3.791,2206,3.791,2207,3.791,2208,2.719,2209,3.791,2210,3.791,2211,3.791,2212,2.719,2213,3.791,2214,2.719,2215,2.719,2216,5.383,2217,3.791,2218,3.791,2219,3.791,2220,3.791,2221,3.791,2222,3.791,2223,3.791,2224,3.791,2225,3.791,2226,5.383,2227,2.719,2228,3.791,2229,2.719,2230,3.791,2231,2.719,2232,3.791,2233,2.719,2234,3.791,2235,2.719,2236,3.791,2237,2.719,2238,3.791,2239,2.719,2240,2.719,2241,2.719,2242,2.719,2243,2.719,2244,2.719,2245,2.719,2246,2.719,2247,2.719,2248,2.719,2249,2.719,2250,2.719,2251,2.719,2252,2.719,2253,4.365,2254,4.966,2255,4.365,2256,5.143,2257,5.143,2258,4.365,2259,4.722,2260,3.008,2261,4.365,2262,4.365,2263,5.383,2264,4.365,2265,4.722,2266,4.722,2267,2.719,2268,2.719,2269,4.966,2270,2.719,2271,4.722,2272,2.719,2273,2.719,2274,4.365,2275,3.791,2276,2.719,2277,2.719,2278,2.719,2279,2.719,2280,2.719,2281,4.722,2282,3.791,2283,3.791,2284,4.722,2285,2.719,2286,2.719,2287,3.791,2288,2.719,2289,2.719,2290,2.719,2291,3.791,2292,2.719,2293,2.719,2294,4.365,2295,2.398,2296,2.719,2297,2.719,2298,2.719,2299,2.719,2300,3.791,2301,2.719,2302,2.719,2303,2.719,2304,2.719,2305,2.719,2306,2.719,2307,2.719,2308,2.719,2309,2.719,2310,2.719,2311,2.719,2312,2.719,2313,4.365,2314,3.791,2315,2.719,2316,2.719,2317,3.791,2318,2.719]],["title/classes/TracksMesh.html",[0,0.243,249,2.123]],["body/classes/TracksMesh.html",[0,0.3,2,0.339,3,0.225,4,0.198,5,0.147,9,0.319,14,3.351,16,0.209,17,0.571,33,0.525,42,1.174,47,0.746,49,1.1,50,0.309,51,0.026,52,0.252,53,0.266,54,0.28,56,0.666,58,0.766,59,1.454,71,1.785,75,4.116,79,0.978,80,0.47,94,1.313,101,1.252,103,0.462,112,0.776,117,1.034,134,0.37,135,0.543,147,2.62,151,0.357,152,0.462,160,0.665,167,2.227,184,0.015,185,0.015,211,1.064,225,2.98,239,2.805,240,2.278,242,4.206,246,2.882,249,3.053,270,0.719,293,1.515,302,3.323,335,2.902,339,4.149,453,1.571,552,3.646,596,4.206,598,1.85,642,4.281,644,2.626,707,1.223,729,3.509,870,2.813,977,3.646,1050,2.626,1060,2.256,1078,2.03,1333,3.323,1995,2.882,2169,2.882,2170,2.256,2171,4.053,2172,3.633,2173,2.559,2174,2.559,2176,2.256,2177,2.559,2178,4.597,2179,5.392,2180,4.223,2181,5.301,2182,5.043,2183,3.633,2184,4.223,2185,4.223,2186,3.633,2187,3.633,2188,2.559,2189,2.559,2190,2.559,2191,2.559,2192,2.559,2193,2.559,2194,2.559,2195,2.559,2196,3.633,2197,4.597,2198,3.633,2199,3.633,2200,2.559,2201,2.559,2202,3.633,2203,3.633,2204,3.633,2205,3.633,2206,3.633,2207,3.633,2208,2.559,2209,3.633,2210,3.633,2211,3.633,2212,2.559,2213,3.633,2214,2.559,2215,2.559,2216,5.301,2217,3.633,2218,3.633,2219,3.633,2220,3.633,2221,3.633,2222,3.633,2223,3.633,2224,3.633,2225,3.633,2226,5.301,2227,2.559,2228,3.633,2229,2.559,2230,3.633,2231,2.559,2232,3.633,2233,2.559,2234,3.633,2235,2.559,2236,3.633,2237,2.559,2238,3.633,2239,2.559,2240,2.559,2241,2.559,2242,2.559,2243,2.559,2244,2.559,2245,2.559,2246,2.559,2247,2.559,2248,2.559,2249,2.559,2250,2.559,2251,2.559,2252,2.559,2253,4.223,2254,4.855,2255,4.223,2256,5.043,2257,5.043,2258,4.223,2259,4.597,2260,2.882,2261,4.223,2262,4.223,2263,5.301,2264,4.223,2265,4.597,2266,4.597,2267,2.559,2268,2.559,2269,4.855,2270,2.559,2271,4.597,2272,2.559,2273,2.559,2274,4.223,2275,3.633,2276,2.559,2277,2.559,2278,2.559,2279,2.559,2280,2.559,2281,4.597,2282,3.633,2283,3.633,2284,4.597,2285,2.559,2286,2.559,2287,3.633,2288,2.559,2289,2.559,2290,2.559,2291,3.633,2292,2.559,2293,2.559,2294,4.223,2295,2.256,2296,2.559,2297,2.559,2298,2.559,2299,2.559,2300,3.633,2301,2.559,2302,2.559,2303,2.559,2304,2.559,2305,2.559,2306,2.559,2307,2.559,2308,2.559,2309,2.559,2310,2.559,2311,2.559,2312,2.559,2313,4.223,2314,3.633,2315,2.559,2316,2.559,2317,3.633,2318,2.559,2319,4.285,2320,4.285,2321,3.018,2322,3.018,2323,3.018,2324,3.018,2325,3.018,2326,3.018,2327,3.018,2328,3.018,2329,3.018,2330,3.018,2331,3.018]],["title/classes/URLOptionsManager.html",[0,0.243,2332,2.33]],["body/classes/URLOptionsManager.html",[0,0.186,2,0.299,3,0.345,4,0.175,5,0.335,8,0.809,9,0.438,11,1.37,16,0.13,17,0.521,20,1.908,24,1.457,33,0.48,35,3.209,42,1.205,47,0.714,50,0.642,51,0.026,52,0.475,53,0.278,54,0.528,57,0.738,58,0.48,59,1.258,62,2.398,64,3.134,66,1.657,80,1.064,88,1.555,101,1.285,103,0.602,107,1.19,112,0.849,126,1.644,134,0.698,143,1.351,151,0.326,152,0.56,160,0.722,174,3.316,184,0.014,185,0.014,189,2.036,211,0.849,228,1.07,231,1.44,236,2.036,251,1.538,252,1.286,256,1.519,270,0.945,280,2.471,323,2.843,370,1.989,510,4.517,521,2.036,545,1.286,584,3.317,586,3.317,683,2.366,710,1.118,714,2.633,716,2.398,735,2.539,745,4.064,751,2.632,777,2.398,851,2.368,853,2.033,865,3.69,866,2.142,867,4.073,872,2.398,873,2.398,874,2.662,876,1.499,922,2.203,1050,2.398,1128,2.036,1134,1.385,1162,1.631,1209,1.79,1244,1.118,1271,2.203,1302,3.068,1472,3.068,1478,3.317,1486,3.316,1644,2.925,1807,2.256,1812,3.065,1895,3.317,1901,3.833,1920,2.256,1946,2.256,1948,2.925,1954,2.256,2010,3.317,2091,2.843,2137,3.317,2159,2.256,2332,2.632,2333,4.808,2334,5.115,2335,5.115,2336,4.639,2337,5.115,2338,5.115,2339,5.115,2340,3.913,2341,3.913,2342,3.913,2343,3.913,2344,2.662,2345,5.115,2346,3.913,2347,2.662,2348,4.336,2349,3.823,2350,4.831,2351,2.662,2352,5.449,2353,2.662,2354,4.993,2355,5.115,2356,5.115,2357,2.662,2358,3.913,2359,2.662,2360,3.913,2361,3.913,2362,4.831,2363,5.89,2364,3.933,2365,4.259,2366,3.913,2367,3.913,2368,2.662,2369,5.123,2370,3.317,2371,3.913,2372,2.662,2373,5.698,2374,3.913,2375,3.933,2376,2.662,2377,2.632,2378,2.256,2379,2.256,2380,1.989,2381,2.662,2382,2.256,2383,1.989,2384,3.913,2385,2.662,2386,2.662,2387,2.662,2388,2.662,2389,2.662,2390,2.662,2391,2.662,2392,1.631,2393,5.115,2394,4.639,2395,2.256,2396,2.662,2397,2.256,2398,2.662,2399,2.662,2400,3.913,2401,2.662,2402,2.662,2403,4.639,2404,2.662,2405,2.662,2406,2.662,2407,2.256,2408,2.256,2409,2.662,2410,2.662,2411,3.317,2412,2.662,2413,2.662,2414,3.913,2415,2.662,2416,2.662,2417,2.662,2418,2.662,2419,2.662,2420,2.256,2421,2.256,2422,2.662,2423,2.662,2424,2.662,2425,3.317,2426,2.662,2427,3.317,2428,2.662,2429,2.662,2430,2.662,2431,2.662,2432,2.662,2433,2.662,2434,2.662,2435,2.662,2436,2.662,2437,3.317,2438,2.925,2439,3.468,2440,3.913,2441,2.256,2442,2.662,2443,2.662,2444,2.662,2445,2.662,2446,2.256,2447,3.913,2448,3.913,2449,2.662,2450,3.913,2451,3.913,2452,2.662,2453,2.662,2454,2.662,2455,2.662,2456,2.662,2457,2.662,2458,2.662,2459,2.662,2460,2.662,2461,2.662,2462,2.662,2463,2.662,2464,3.913,2465,3.913,2466,3.913,2467,3.913,2468,3.913,2469,3.913,2470,3.317,2471,3.317,2472,3.913,2473,2.662,2474,2.662,2475,3.913,2476,2.662,2477,2.662,2478,2.662,2479,2.662,2480,2.662]],["title/classes/VRManager.html",[0,0.243,2481,2.33]],["body/classes/VRManager.html",[0,0.205,2,0.328,3,0.217,4,0.192,5,0.143,6,2.548,8,0.888,9,0.421,11,1.421,12,1.758,13,2.022,14,2.815,15,3.794,16,0.143,17,0.557,18,1.801,20,1.981,22,3.656,23,4.147,24,1.458,25,3.128,26,5.008,27,3.128,28,4.076,29,2.994,30,3.128,31,3.128,32,3.128,33,0.513,34,3.993,35,2.178,36,3.128,38,3.656,39,3.128,40,3.656,41,3.656,42,1.153,44,1.008,45,2.525,47,0.777,49,0.924,50,0.547,51,0.025,52,0.446,53,0.28,54,0.524,56,0.645,57,0.706,58,0.599,60,2.476,61,1.314,71,0.833,74,2.183,79,1.356,80,0.652,81,3.548,82,2.476,83,3.862,84,2.363,85,2.647,86,5.6,87,2.476,88,1.272,89,3.814,90,1.411,91,2.476,92,2.022,93,1.883,94,1.299,95,2.476,96,2.994,97,2.732,98,3.465,99,3.465,100,2.476,101,1.558,102,2.476,103,0.585,104,1.964,105,1.964,106,2.183,107,0.888,108,2.476,109,2.476,110,1.844,112,1.009,113,2.183,115,1.789,117,0.762,119,2.476,120,1.789,121,1.008,122,2.183,123,2.476,124,2.183,125,1.52,126,2.055,127,2.183,128,1.644,129,2.476,130,2.183,131,4.227,132,2.815,133,2.815,134,0.599,135,0.526,137,1.789,138,1.964,139,1.964,141,2.183,142,2.183,143,1.844,144,2.183,145,2.183,146,2.183,147,1.411,148,1.411,149,1.789,151,0.244,152,0.524,153,4.147,159,2.183,162,2.476,178,2.476,184,0.015,185,0.015,211,0.916,227,3.184,228,0.652,239,1.644,240,2.376,270,0.816,286,3.412,293,1.487,304,1.52,342,1.411,376,3.548,384,2.565,442,4.147,464,1.789,514,2.476,522,1.789,545,2.363,853,1.445,870,1.314,954,2.476,1047,2.476,1138,2.815,1326,4.013,1388,4.529,1963,1.964,1964,3.128,2090,2.476,2395,3.548,2481,2.815,2482,5.495,2483,4.305,2484,4.891,2485,4.891,2486,4.891,2487,4.891,2488,4.891,2489,4.891,2490,4.185,2491,5.342,2492,5.35,2493,6.199,2494,2.92,2495,5.342,2496,4.988,2497,4.529,2498,4.185,2499,4.185,2500,4.185,2501,6.199,2502,2.92,2503,4.185,2504,2.92,2505,2.92,2506,4.185,2507,2.92,2508,2.92,2509,4.147,2510,4.185,2511,2.92,2512,2.92,2513,2.92,2514,2.92,2515,4.185,2516,2.92,2517,2.92,2518,2.92,2519,2.92,2520,2.92,2521,4.185,2522,4.185,2523,4.891,2524,2.92,2525,4.891,2526,2.92,2527,2.92,2528,2.92,2529,2.92,2530,2.92,2531,2.92,2532,2.92,2533,2.92,2534,2.92,2535,2.92,2536,2.92,2537,2.92,2538,2.92,2539,2.92,2540,2.92,2541,2.92,2542,2.92,2543,2.92,2544,2.92,2545,2.92,2546,2.92,2547,2.92,2548,2.92,2549,2.92,2550,2.92,2551,4.185,2552,4.185,2553,2.92,2554,2.92,2555,2.92,2556,2.92,2557,2.92,2558,2.92,2559,2.92,2560,2.476,2561,2.476,2562,2.92,2563,2.92,2564,2.92,2565,4.185,2566,2.92,2567,2.92,2568,2.92,2569,2.92]],["title/interfaces/Window.html",[217,1.276,2392,2.123]],["body/interfaces/Window.html",[0,0.185,3,0.32,4,0.106,5,0.272,9,0.12,10,1.622,11,1.615,12,1.414,13,0.779,16,0.19,17,0.352,20,1.623,24,1.51,28,2.264,29,1.278,33,0.324,35,2.542,44,1.923,45,1.434,49,0.356,50,0.345,51,0.026,52,0.569,53,0.137,55,1.637,56,1.359,57,0.736,58,0.198,59,1.426,61,2.446,62,2.388,64,2.063,66,1.76,69,2.164,71,0.46,77,4.142,79,0.857,80,1.063,83,1.895,84,2.234,85,0.725,88,1.76,89,2.194,92,1.278,94,0.95,96,2.626,97,2.078,98,2.063,101,0.665,103,0.559,107,1.308,110,1.345,112,0.794,117,0.885,120,0.988,121,0.557,125,1.752,134,0.739,135,0.606,137,2.637,143,1.877,148,0.779,151,0.134,152,0.653,160,0.697,164,1.49,167,1.345,174,3.061,184,0.009,185,0.009,186,1.49,189,0.839,192,0.988,194,1.978,211,0.761,217,1.239,218,1.895,219,0.908,220,1.084,221,3.237,222,1.49,225,0.839,226,1.78,227,0.908,228,1.071,229,1.978,230,2.516,233,1.49,234,2.854,236,0.839,251,1.531,252,0.779,255,2.552,256,1.574,258,0.988,259,1.531,264,2.243,268,0.988,270,0.927,279,3.216,280,2.36,281,2.063,282,2.243,283,3.92,284,2.854,285,1.367,286,0.908,290,3.657,312,2.243,313,2.243,314,4.478,315,1.78,316,2.243,318,0.908,323,2.063,342,3.292,363,0.839,396,3.92,436,1.084,438,0.839,439,1.367,467,1.278,472,1.978,501,2.243,511,1.084,516,1.367,518,1.367,521,2.542,544,1.622,545,0.779,547,1.205,552,0.988,622,1.978,625,2.264,626,1.377,627,2.605,628,0.988,630,1.978,648,1.78,683,1.686,706,1.78,707,1.623,710,2.052,714,2.078,716,0.988,733,1.084,735,2.34,736,2.406,744,2.264,753,1.205,762,0.779,777,0.988,785,2.198,787,1.377,821,1.205,851,2.267,853,1.998,864,1.978,865,3.205,866,1.531,868,1.49,873,2.063,874,1.377,876,3.061,883,1.205,887,1.205,889,2.516,922,0.908,938,1.205,975,3.92,990,0.988,1000,1.205,1015,0.839,1033,1.205,1040,1.78,1048,2.243,1064,1.978,1066,2.516,1111,2.62,1116,1.367,1117,1.367,1121,2.854,1123,1.78,1126,1.367,1127,1.978,1128,2.749,1129,1.978,1130,2.194,1132,1.367,1133,1.367,1134,0.839,1138,1.78,1139,1.205,1144,2.894,1145,2.62,1147,1.367,1149,1.367,1150,1.367,1152,2.62,1153,1.084,1154,2.243,1155,3.647,1157,1.978,1158,1.205,1162,2.388,1163,3.647,1166,1.205,1176,2.243,1177,2.894,1178,1.205,1179,1.367,1180,1.367,1182,1.895,1184,3.126,1192,1.205,1209,1.084,1210,2.264,1212,3.813,1216,1.367,1224,1.367,1244,2.052,1347,2.243,1351,1.205,1358,1.205,1365,2.388,1367,2.243,1391,1.78,1475,1.367,1486,3.136,1492,1.367,1514,1.084,1606,1.205,1608,1.367,1624,2.854,1625,2.243,1632,3.92,1644,1.205,1701,1.367,1792,1.978,1796,1.78,1812,2.654,1824,1.367,1825,1.367,1826,1.367,1843,1.205,1901,3.657,1902,1.367,1936,1.367,1937,1.367,1939,1.367,1941,1.367,1966,1.978,1968,1.367,1972,4.251,1973,1.367,1975,2.243,1976,1.367,1994,1.205,1995,1.084,2002,2.854,2051,2.516,2091,2.388,2160,1.367,2171,2.912,2176,1.978,2260,1.084,2332,2.264,2365,1.978,2377,1.78,2378,1.367,2379,1.367,2392,2.993,2397,3.303,2421,1.367,2427,2.243,2438,3.216,2483,2.388,2570,1.367,2571,1.367,2572,1.612,2573,3.456,2574,2.243,2575,1.612,2576,1.612,2577,1.612,2578,1.612,2579,1.612,2580,1.612,2581,1.084,2582,1.205,2583,1.612,2584,1.612,2585,1.612,2586,3.366,2587,3.366,2588,1.612,2589,1.612,2590,1.612,2591,1.612,2592,2.646,2593,2.646,2594,1.612,2595,2.646,2596,3.366,2597,1.612,2598,3.366,2599,1.612,2600,1.612,2601,1.612,2602,1.612,2603,1.612,2604,1.612,2605,1.612,2606,1.612,2607,1.612,2608,1.612,2609,2.646,2610,1.612,2611,1.612,2612,1.612,2613,3.366,2614,1.612,2615,2.243,2616,1.612,2617,1.612,2618,1.612,2619,1.612,2620,1.612,2621,3.366,2622,3.366,2623,1.612,2624,4.885,2625,1.612,2626,1.612,2627,1.612,2628,1.612,2629,1.612,2630,1.612,2631,1.612,2632,1.612,2633,1.612,2634,2.646,2635,2.646,2636,2.646,2637,2.646,2638,2.646,2639,1.612,2640,1.612,2641,1.612,2642,1.612,2643,1.612,2644,1.612,2645,1.612,2646,1.612,2647,1.612,2648,1.612,2649,1.612,2650,1.612,2651,3.366,2652,1.612,2653,3.366,2654,6.424,2655,4.624,2656,4.624,2657,4.624,2658,6.033,2659,3.896,2660,6.262,2661,4.624,2662,3.366,2663,1.612,2664,2.646,2665,1.612,2666,1.612,2667,4.302,2668,1.612,2669,2.646,2670,2.646,2671,4.624,2672,1.612,2673,1.612,2674,1.612,2675,1.612,2676,1.612,2677,1.612,2678,1.612,2679,2.646,2680,1.612,2681,1.612,2682,1.612,2683,1.612,2684,1.612,2685,1.612,2686,1.612,2687,1.612,2688,1.612,2689,1.612,2690,1.612,2691,1.612,2692,1.612,2693,1.367,2694,1.612,2695,3.896,2696,1.612,2697,1.612,2698,2.646,2699,2.646,2700,1.612,2701,1.612,2702,1.612,2703,3.366,2704,2.646,2705,1.612,2706,1.612,2707,1.612,2708,1.612,2709,1.612,2710,1.612,2711,3.366,2712,1.612,2713,2.646,2714,2.646,2715,1.612,2716,2.646,2717,1.612,2718,1.612,2719,1.612,2720,1.612,2721,1.612,2722,1.612,2723,1.612,2724,1.612,2725,1.612,2726,1.612,2727,1.612,2728,1.612,2729,3.92,2730,1.612,2731,1.612,2732,3.366,2733,1.612,2734,1.612,2735,1.612,2736,3.366,2737,1.367,2738,1.612,2739,1.612,2740,1.612,2741,1.612,2742,1.612,2743,1.612,2744,1.612,2745,1.612,2746,1.612,2747,1.612,2748,1.612,2749,1.612,2750,1.612,2751,1.612,2752,1.612,2753,1.612,2754,1.612,2755,1.612,2756,1.612,2757,1.612,2758,1.612,2759,1.612,2760,1.612,2761,1.612,2762,1.612,2763,1.612,2764,1.612,2765,2.646,2766,1.612,2767,1.612,2768,1.612,2769,1.612,2770,1.612,2771,1.612,2772,1.367,2773,1.612,2774,1.612,2775,1.612,2776,1.612,2777,1.612,2778,1.367,2779,1.612,2780,1.612,2781,1.612,2782,1.612,2783,1.612,2784,1.367,2785,1.612,2786,1.612,2787,1.612,2788,1.367,2789,1.612,2790,2.646,2791,3.896,2792,1.612,2793,1.612,2794,1.612,2795,1.612,2796,1.612,2797,1.612,2798,1.612,2799,1.612,2800,1.612,2801,1.612,2802,1.612,2803,1.612,2804,2.646,2805,1.612,2806,1.612,2807,1.612,2808,1.612,2809,2.646,2810,2.646,2811,1.612,2812,1.612,2813,1.612,2814,1.612]],["title/classes/XRManager.html",[0,0.243,15,1.951]],["body/classes/XRManager.html",[0,0.224,2,0.36,3,0.238,4,0.21,5,0.156,6,2.669,8,0.974,9,0.435,10,3.587,11,1.399,12,1.876,13,2.158,15,2.515,16,0.156,17,0.595,24,1.519,25,3.845,26,5.195,27,3.845,28,4.269,29,3.188,30,4.16,31,3.845,32,3.845,33,0.547,34,4.16,35,2.677,36,3.339,38,4.16,39,3.339,40,4.16,41,3.845,42,0.754,44,1.542,45,2.605,46,3.786,47,0.758,49,0.986,50,0.57,51,0.025,52,0.464,53,0.275,54,0.577,56,0.986,57,0.644,58,0.547,59,0.707,61,2.01,79,1.037,80,0.499,83,3.989,84,2.158,85,3.056,88,1.692,89,4.051,90,2.485,92,2.689,93,2.504,94,1.229,96,3.155,97,2.929,98,3.716,99,3.716,101,1.564,103,0.606,104,3.004,105,3.46,106,3.339,107,1.564,110,2.191,112,0.988,113,3.339,115,2.737,118,2.714,120,2.737,121,1.542,122,3.339,124,3.339,125,2.677,126,2.161,127,3.339,128,2.515,130,2.393,131,4.376,132,3.004,133,3.004,134,0.392,135,0.576,137,3.411,138,2.153,139,2.153,140,2.714,141,2.393,142,2.393,143,1.105,144,3.845,145,2.393,146,2.393,147,1.547,148,1.547,149,1.962,151,0.373,152,0.577,159,2.393,160,0.547,174,1.803,184,0.016,185,0.016,211,0.695,240,1.345,270,0.742,293,0.974,384,1.962,545,1.547,595,2.714,624,3.339,650,2.714,683,1.105,710,1.345,778,2.393,787,1.666,1073,2.714,1302,2.515,1806,2.714,1810,2.714,1947,2.714,1949,2.714,1960,2.714,1963,2.153,1964,2.393,2139,2.714,2420,2.714,2483,3.587,2581,4.568,2815,3.202,2816,5.144,2817,3.202,2818,3.202,2819,3.202,2820,3.202,2821,3.202,2822,3.202,2823,4.466,2824,3.202,2825,3.202,2826,4.466,2827,4.466,2828,4.466,2829,3.202,2830,3.202,2831,3.202,2832,3.202,2833,5.144,2834,3.202,2835,3.202,2836,3.202,2837,4.466,2838,3.202,2839,3.202,2840,5.566,2841,3.202,2842,4.466,2843,3.202,2844,3.202,2845,3.202,2846,3.202,2847,3.202,2848,3.202,2849,3.202,2850,3.202,2851,3.202]],["title/changelog.html",[115,1.777,2852,2.167,2853,2.9]],["body/changelog.html",[0,0.309,1,0.986,3,0.304,4,0.096,5,0.179,10,3.452,11,1.556,15,1.377,17,0.489,29,0.708,35,0.763,42,0.742,44,1.269,45,1.159,49,1.034,51,0.011,52,0.263,53,0.15,54,0.341,55,1.716,57,0.353,58,0.386,63,2.353,64,2.252,66,2.018,69,1.884,73,2.3,76,1.499,77,3.3,79,1.02,83,0.825,84,3.167,89,1.772,93,0.66,94,0.974,101,1.233,105,4.132,110,0.506,117,0.572,125,1.273,128,2.3,132,0.986,134,0.501,138,3.149,147,1.521,149,0.898,160,0.3,164,2.069,167,2.31,168,1.645,174,0.825,184,0.009,185,0.009,189,0.763,192,1.499,196,3.613,200,1.096,211,0.49,217,1.353,221,2.869,222,1.772,225,0.763,226,0.986,227,2.763,228,1.134,229,1.096,233,0.825,236,0.763,239,0.825,251,0.576,255,2.132,256,1.109,259,0.961,279,1.096,280,1.182,286,0.825,293,0.446,300,1.243,301,3.452,315,0.986,335,2.617,336,2.117,339,2.705,342,2.768,348,2.074,362,1.243,363,0.763,364,1.243,377,2.074,387,2.471,388,2.668,395,3.538,436,2.117,438,3.027,451,1.645,453,1.638,463,3.115,464,0.898,467,2.541,468,0.986,474,1.377,485,2.747,510,2.353,511,1.645,541,0.986,544,0.898,545,2.132,546,3.115,562,3.463,576,1.096,587,1.243,596,1.645,601,1.243,615,2.117,625,2.471,626,0.763,627,2.107,633,1.096,640,0.986,644,1.499,660,3.299,683,2.298,706,2.117,707,2.002,714,1.182,716,0.898,719,2.87,726,1.243,729,1.499,732,1.645,735,2.744,736,2.737,739,0.825,744,1.645,745,3.633,751,2.117,762,0.708,767,1.828,779,0.986,785,1.986,787,1.273,817,1.645,822,1.243,851,1.625,853,2.512,856,1.243,864,1.096,865,3.105,866,2.214,868,1.377,873,2.503,874,2.737,875,1.645,876,2.763,893,1.929,896,2.471,897,1.828,903,1.243,906,0.986,912,0.986,921,1.243,924,2.747,938,1.096,966,1.243,973,2.503,977,0.898,990,0.898,993,1.096,997,0.986,1002,1.243,1004,1.243,1032,1.096,1037,1.243,1040,0.986,1059,2.353,1061,1.096,1123,3.3,1124,1.096,1128,3.222,1134,0.763,1137,1.243,1138,1.645,1142,1.828,1144,0.986,1152,2.747,1158,1.828,1161,1.243,1162,0.898,1177,0.986,1178,1.096,1182,2.069,1184,0.898,1187,1.499,1192,1.096,1210,0.986,1212,1.096,1213,2.074,1244,2.061,1249,0.898,1271,1.377,1302,2.069,1326,0.898,1329,2.117,1332,0.898,1356,1.096,1358,2.353,1431,1.243,1435,1.096,1452,1.243,1456,2.668,1457,2.668,1463,1.243,1472,2.87,1486,1.772,1496,4.129,1514,0.986,1588,1.645,1590,1.243,1591,4.16,1603,3.742,1631,2.074,1660,3.299,1679,3.463,1683,2.668,1725,0.986,1728,1.243,1739,1.243,1781,2.353,1792,1.096,1796,0.986,1812,0.763,1840,1.828,1843,2.353,1885,1.828,1888,1.243,1901,0.986,1928,2.668,1966,1.096,1972,1.096,2052,1.243,2260,0.986,2348,2.074,2349,4.407,2354,4.321,2362,3.742,2364,1.243,2365,1.096,2370,2.074,2392,1.499,2411,1.243,2439,1.096,2441,2.074,2481,0.986,2483,2.869,2492,1.243,2509,2.074,2560,2.074,2561,1.243,2573,3.5,2615,1.243,2729,1.243,2737,3.742,2778,4.16,2784,5.47,2788,1.243,2852,1.096,2854,1.466,2855,1.466,2856,1.466,2857,1.466,2858,1.466,2859,1.466,2860,2.446,2861,1.243,2862,2.446,2863,4.682,2864,3.674,2865,4.16,2866,4.682,2867,3.3,2868,1.466,2869,1.466,2870,3.674,2871,4.682,2872,2.446,2873,6.356,2874,1.466,2875,1.466,2876,1.466,2877,1.466,2878,1.466,2879,1.466,2880,1.466,2881,3.147,2882,2.446,2883,1.466,2884,1.466,2885,1.243,2886,1.466,2887,1.466,2888,1.466,2889,3.674,2890,2.446,2891,1.466,2892,2.446,2893,1.466,2894,1.466,2895,1.096,2896,1.466,2897,1.466,2898,1.466,2899,5.259,2900,1.466,2901,1.466,2902,1.466,2903,1.466,2904,2.446,2905,1.466,2906,1.466,2907,1.243,2908,3.463,2909,6.721,2910,1.466,2911,6.143,2912,2.446,2913,1.466,2914,1.466,2915,1.466,2916,4.085,2917,1.466,2918,1.466,2919,6.749,2920,1.466,2921,4.682,2922,1.466,2923,1.466,2924,1.466,2925,3.674,2926,1.466,2927,1.466,2928,1.466,2929,2.668,2930,1.243,2931,1.466,2932,1.466,2933,1.466,2934,1.466,2935,1.466,2936,1.466,2937,1.466,2938,1.466,2939,2.446,2940,4.907,2941,1.466,2942,1.466,2943,3.674,2944,1.466,2945,1.466,2946,1.466,2947,2.446,2948,1.466,2949,2.446,2950,1.466,2951,1.466,2952,1.466,2953,5.524,2954,1.466,2955,1.466,2956,1.466,2957,1.466,2958,1.466,2959,3.674,2960,1.466,2961,3.147,2962,1.466,2963,1.466,2964,1.466,2965,1.466,2966,1.466,2967,1.466,2968,1.466,2969,1.466,2970,4.413,2971,1.466,2972,1.466,2973,1.466,2974,1.466,2975,1.466,2976,1.466,2977,1.466,2978,1.466,2979,1.466,2980,3.147,2981,1.466,2982,1.466,2983,4.085,2984,2.446,2985,1.466,2986,1.466,2987,1.466,2988,1.466,2989,1.466,2990,1.466,2991,5.817,2992,2.446,2993,2.668,2994,1.466,2995,1.466,2996,1.466,2997,1.466,2998,2.446,2999,3.147,3000,2.074,3001,1.466,3002,1.466,3003,3.147,3004,1.466,3005,3.674,3006,1.466,3007,1.466,3008,1.466,3009,1.466,3010,1.466,3011,1.466,3012,1.466,3013,1.243,3014,1.466,3015,1.466,3016,1.466,3017,1.466,3018,1.466,3019,1.466,3020,1.466,3021,1.466,3022,1.466,3023,1.466,3024,1.466,3025,1.466,3026,1.466,3027,1.466,3028,1.466,3029,1.466,3030,1.466,3031,1.466,3032,3.674,3033,1.466,3034,1.466,3035,2.446,3036,4.085,3037,1.466,3038,1.466,3039,1.466,3040,1.466,3041,1.466,3042,1.466,3043,1.466,3044,1.466,3045,1.466,3046,1.466,3047,1.466,3048,2.446,3049,1.466,3050,1.466,3051,1.466,3052,1.466,3053,4.321,3054,1.466,3055,1.466,3056,1.466,3057,1.466,3058,3.147,3059,1.466,3060,1.466,3061,1.466,3062,3.674,3063,1.466,3064,2.446,3065,1.466,3066,1.466,3067,1.466,3068,1.466,3069,1.466,3070,1.466,3071,1.466,3072,1.466,3073,1.466,3074,2.446,3075,1.466,3076,1.466,3077,1.466,3078,1.466,3079,1.466,3080,1.466,3081,1.466,3082,1.466,3083,1.466,3084,1.466,3085,1.466,3086,1.466,3087,1.466,3088,1.466,3089,1.466,3090,3.147,3091,1.466,3092,1.466,3093,1.466,3094,1.466,3095,3.147,3096,1.466,3097,1.466,3098,1.466,3099,1.466,3100,4.413,3101,1.466,3102,4.413,3103,1.466,3104,1.466,3105,1.466,3106,1.466,3107,1.466,3108,1.466,3109,2.446,3110,3.147,3111,2.446,3112,2.446,3113,3.147,3114,4.085,3115,3.147,3116,3.147,3117,3.147,3118,3.147,3119,1.466,3120,2.446,3121,2.446,3122,2.446,3123,1.466,3124,1.466,3125,3.674,3126,3.147,3127,2.446,3128,1.466,3129,1.466,3130,2.446,3131,2.446,3132,2.446,3133,1.466,3134,1.466,3135,1.466,3136,1.466,3137,1.466,3138,3.147,3139,3.147,3140,3.147,3141,3.147,3142,3.147,3143,3.147,3144,1.466,3145,1.466,3146,1.466,3147,1.466,3148,2.446,3149,3.147,3150,3.147,3151,3.147,3152,1.466,3153,3.147,3154,2.446,3155,3.147,3156,3.147,3157,3.147,3158,3.147,3159,2.446,3160,3.147,3161,3.147,3162,2.668,3163,3.674,3164,3.147,3165,3.147,3166,3.147,3167,3.147,3168,1.466,3169,1.466,3170,3.147,3171,2.446,3172,2.446,3173,2.446,3174,3.147,3175,3.147,3176,3.147,3177,2.446,3178,2.074,3179,2.446,3180,1.466,3181,1.466,3182,1.466,3183,1.466,3184,1.466,3185,1.466,3186,1.466,3187,1.466,3188,1.466,3189,1.466,3190,1.466,3191,1.466,3192,1.466,3193,1.466,3194,1.466,3195,1.466,3196,2.446,3197,1.466,3198,1.466,3199,1.466,3200,1.243,3201,1.466,3202,1.466,3203,1.466,3204,1.466,3205,1.466,3206,1.466,3207,1.466,3208,1.466,3209,1.466,3210,1.466,3211,1.466,3212,1.466,3213,1.466,3214,2.446,3215,1.466,3216,1.466,3217,1.466,3218,1.466,3219,2.668,3220,1.466,3221,1.466,3222,1.466,3223,1.466,3224,1.466,3225,1.466,3226,1.466,3227,1.466,3228,1.466,3229,4.413,3230,1.466,3231,1.466,3232,1.466,3233,1.466,3234,1.466,3235,1.466,3236,1.466,3237,1.466,3238,1.466,3239,2.446,3240,1.466,3241,1.466,3242,1.466,3243,1.466,3244,3.147,3245,1.466,3246,1.466,3247,1.466,3248,1.466,3249,1.466,3250,1.466,3251,1.466,3252,1.466,3253,1.466,3254,2.446,3255,1.466,3256,1.466,3257,1.466,3258,1.466,3259,1.466,3260,1.466,3261,1.466,3262,1.466,3263,1.466,3264,1.466,3265,1.466,3266,1.466,3267,1.466,3268,1.466,3269,1.466,3270,1.466,3271,1.466,3272,1.466,3273,1.466,3274,1.466,3275,1.466,3276,1.466,3277,1.243,3278,1.466,3279,1.466,3280,1.466,3281,3.147,3282,1.466,3283,1.466,3284,1.466,3285,1.466,3286,1.466,3287,1.243,3288,1.466,3289,2.446,3290,1.466,3291,1.466,3292,1.466,3293,1.466,3294,1.466,3295,1.466,3296,1.466,3297,1.466,3298,1.466,3299,1.466,3300,1.466,3301,1.466,3302,1.466,3303,1.466,3304,1.466,3305,1.466,3306,1.466,3307,1.466,3308,1.466,3309,2.446,3310,1.466,3311,1.466,3312,1.466,3313,1.466,3314,3.147,3315,1.466,3316,1.466,3317,1.466,3318,1.466,3319,1.466,3320,1.466,3321,1.466,3322,1.466,3323,1.466,3324,1.466,3325,1.466,3326,2.446,3327,1.466,3328,1.466,3329,1.466,3330,1.466,3331,1.466,3332,1.466,3333,1.466,3334,1.466,3335,1.243,3336,1.466,3337,1.466,3338,1.466,3339,1.466,3340,3.674,3341,1.466,3342,1.466,3343,1.466,3344,1.466,3345,1.466,3346,2.446,3347,1.466,3348,1.466,3349,1.466,3350,1.466,3351,1.466,3352,1.466,3353,1.466,3354,1.466,3355,1.466,3356,2.446,3357,1.466,3358,1.466,3359,1.466,3360,1.466,3361,1.466,3362,1.466,3363,1.466,3364,1.466,3365,1.466,3366,1.466,3367,1.466,3368,1.466,3369,1.466,3370,1.466,3371,1.466,3372,1.466,3373,1.466,3374,1.466,3375,1.466,3376,1.466,3377,1.466,3378,1.466,3379,1.466,3380,1.466,3381,1.466,3382,1.466,3383,1.466,3384,1.466,3385,1.466,3386,1.466,3387,1.466,3388,1.466,3389,1.466,3390,1.466,3391,1.466,3392,1.466,3393,1.466,3394,1.466,3395,1.466,3396,1.466,3397,1.466,3398,1.466,3399,1.466,3400,1.466,3401,1.466,3402,1.466,3403,1.466,3404,1.466,3405,1.466,3406,1.466,3407,1.466,3408,1.466,3409,1.466,3410,1.466,3411,1.466,3412,1.466,3413,1.243]],["title/coverage.html",[3414,3.998]],["body/coverage.html",[0,0.507,1,2.622,5,0.19,6,2.727,7,3.304,8,2.133,15,2.194,51,0.025,53,0.159,136,2.622,184,0.018,185,0.018,186,2.194,187,2.913,188,2.913,189,3.495,211,0.607,217,2.306,218,2.194,220,3.431,228,0.607,248,2.622,249,2.388,254,3.304,256,0.98,541,2.622,542,3.304,543,4.325,548,3.304,560,2.913,613,2.622,614,3.126,680,2.913,681,3.407,682,2.622,683,1.761,702,2.194,735,2.143,773,2.388,776,3.126,851,1.435,852,3.304,859,2.388,882,2.622,888,3.202,893,2.388,894,3.304,895,3.814,973,2.388,974,3.304,982,2.622,1030,2.622,1031,3.304,1108,3.304,1109,4.964,1127,2.913,1129,2.913,1130,2.194,1167,2.913,1168,3.304,1198,2.622,1233,3.825,1234,3.825,1242,2.194,1244,1.637,1341,3.304,1342,3.304,1365,2.388,1366,3.304,1408,6.162,1430,3.304,1486,2.194,1588,2.622,1589,4.822,1640,2.913,1641,2.913,1674,3.304,1675,3.304,1725,2.622,1726,3.304,1770,3.304,1812,2.028,1883,2.913,1884,3.304,1926,2.913,1927,3.304,2091,2.388,2092,3.304,2129,2.913,2169,2.622,2170,3.814,2332,2.622,2333,3.814,2375,3.304,2377,2.622,2380,2.913,2383,2.913,2392,2.388,2471,3.304,2481,2.622,2482,3.304,2570,4.325,2571,4.325,2581,2.622,2582,2.913,2930,3.304,3200,3.304,3335,3.304,3414,3.304,3415,3.897,3416,3.897,3417,3.897,3418,6.034,3419,5.687,3420,4.325,3421,4.325,3422,3.304,3423,6.715,3424,3.304,3425,3.304,3426,3.897,3427,4.325,3428,5.102,3429,3.304,3430,5.102,3431,5.102,3432,3.897,3433,3.304,3434,5.102,3435,3.897,3436,5.102,3437,3.897,3438,3.897,3439,3.897,3440,3.897,3441,3.897,3442,3.897,3443,3.897,3444,3.897,3445,3.897,3446,5.102,3447,3.897,3448,3.897,3449,3.897,3450,3.897,3451,5.102,3452,3.897,3453,3.897,3454,5.102,3455,3.897,3456,5.102,3457,3.897,3458,3.897,3459,3.897,3460,3.897,3461,3.897,3462,3.897,3463,4.822,3464,3.897,3465,3.897,3466,3.897,3467,3.897,3468,5.102,3469,5.102,3470,3.897,3471,3.897,3472,3.897,3473,3.897,3474,3.304,3475,3.897,3476,3.897,3477,3.897,3478,3.897]],["title/dependencies.html",[2867,1.95,3479,3.53]],["body/dependencies.html",[51,0.025,135,0.984,184,0.022,185,0.022,237,4.633,873,3.349,2470,4.633,2573,4.085,3413,4.633,3479,5.325,3480,5.465,3481,5.465,3482,5.465,3483,5.465,3484,5.465,3485,5.465,3486,5.465,3487,4.633,3488,5.465,3489,5.465,3490,5.465,3491,5.465,3492,5.465]],["title/miscellaneous/enumerations.html",[3493,1.633,3494,3.53]],["body/miscellaneous/enumerations.html",[6,2.093,8,1.881,10,3.792,16,0.26,51,0.024,53,0.217,58,0.84,83,2.998,89,2.998,137,3.792,184,0.022,185,0.022,222,2.998,228,0.829,256,1.338,438,2.771,453,3.22,614,3.263,615,3.582,681,2.771,682,4.162,683,1.838,704,5.245,712,3.484,732,3.582,777,3.263,779,4.162,868,2.998,1640,3.98,1641,4.625,1652,5.245,1665,4.514,2483,3.792,2574,4.514,2581,3.582,3493,2.998,3494,4.514,3495,5.325,3496,4.514,3497,5.325]],["title/index.html",[16,0.142,115,1.777,2852,2.167]],["body/index.html",[2,0.522,4,0.305,5,0.227,49,1.363,51,0.025,55,2.398,66,2.071,84,2.757,104,3.129,110,1.606,134,0.7,167,1.606,184,0.02,185,0.02,211,1.002,228,1.106,256,1.618,259,1.828,270,0.929,289,3.478,290,4.153,336,3.129,342,2.757,683,1.971,707,1.328,708,3.944,714,2.757,793,3.944,851,2.532,853,2.42,857,4.267,859,3.498,866,2.243,874,2.97,875,3.129,922,2.62,952,3.478,1177,3.129,1184,2.851,1209,3.129,1211,3.944,1235,4.267,1359,3.478,1619,5.458,1812,3.5,1885,3.478,2051,4.267,2377,4.153,2407,4.839,2408,3.944,2772,4.839,2867,3.129,2885,4.839,2907,3.944,2908,3.944,2929,4.839,3000,5.235,3053,3.944,3162,3.944,3287,4.839,3498,4.652,3499,3.944,3500,4.652,3501,3.944,3502,4.652,3503,4.652,3504,5.708,3505,4.652,3506,4.652,3507,4.652,3508,5.708,3509,4.652,3510,4.652,3511,4.652,3512,4.652,3513,4.652,3514,4.652,3515,4.652,3516,4.652,3517,5.708,3518,4.652,3519,4.652,3520,4.652,3521,4.652,3522,4.652,3523,4.652,3524,4.652]],["title/modules.html",[3525,3.998]],["body/modules.html",[51,0.022,184,0.022,185,0.022,3525,4.779]],["title/overview.html",[3526,3.998]],["body/overview.html",[2,0.63,51,0.022,184,0.022,185,0.022,219,3.161,2295,4.196,3526,4.759,3527,5.614]],["title/properties.html",[17,0.555,2867,1.95]],["body/properties.html",[9,0.407,17,0.729,51,0.025,66,1.664,184,0.022,185,0.022,228,0.979,751,3.68,853,1.889,922,3.08,951,4.638,2861,4.638,2865,4.638,3499,4.638,3501,4.638,3528,5.471,3529,5.471,3530,5.471,3531,5.471,3532,5.471,3533,5.471,3534,5.471,3535,5.471,3536,5.471,3537,5.471,3538,5.471]],["title/miscellaneous/typealiases.html",[3493,1.633,3539,4.164]],["body/miscellaneous/typealiases.html",[16,0.242,50,0.508,51,0.021,53,0.292,66,2.116,94,1.31,96,2.397,110,1.713,125,2.582,128,2.793,167,2.049,184,0.021,185,0.021,187,3.709,188,4.436,202,5.031,231,2.422,342,2.397,522,3.04,614,3.04,681,3.088,682,3.992,683,1.713,709,5.031,735,2.923,736,3.591,745,3.337,785,2.232,851,1.827,888,2.793,997,3.337,1128,3.304,1142,3.709,1472,3.886,1495,5.031,1528,4.206,1537,4.206,2496,4.206,2497,4.206,3493,2.793,3496,4.206,3540,4.961,3541,4.961,3542,5.935,3543,6.958,3544,7.003,3545,5.935,3546,5.935,3547,5.935,3548,5.935,3549,5.935,3550,5.935,3551,5.935,3552,4.961,3553,5.935,3554,4.961,3555,4.961]],["title/miscellaneous/variables.html",[2895,3.112,3493,1.633]],["body/miscellaneous/variables.html",[5,0.327,8,1.54,16,0.276,35,2.005,49,0.851,51,0.026,52,0.321,53,0.254,57,0.967,58,0.835,66,1.172,69,1.832,79,2.171,80,1.074,84,2.446,90,1.861,101,0.968,107,1.54,112,0.6,117,0.6,143,1.33,160,0.693,174,2.851,184,0.018,185,0.018,211,1.061,218,2.169,221,2.361,223,3.266,224,3.266,225,2.005,228,0.6,230,5.009,256,1.51,267,3.925,270,0.955,335,1.734,387,2.591,403,2.88,451,2.591,464,3.103,479,3.266,480,3.266,527,3.266,533,4.292,560,3.785,627,2.278,681,2.005,683,1.952,729,2.361,785,1.734,851,1.418,865,2.005,866,1.514,867,2.88,870,1.734,872,3.103,1015,2.005,1111,2.591,1187,2.361,1198,3.406,1210,3.406,1271,2.851,1274,2.591,1382,4.49,1472,2.169,1496,2.88,1606,3.785,1923,3.266,2129,3.785,2333,2.88,2349,2.88,2350,3.266,2369,3.266,2380,3.785,2382,3.266,2383,3.785,2425,4.292,2437,4.292,2438,4.228,2439,3.785,2446,4.292,2582,3.785,2693,3.266,2895,2.88,2993,3.266,3013,4.292,3178,3.266,3219,3.266,3277,3.266,3420,3.266,3421,4.795,3422,4.292,3424,4.292,3425,3.266,3427,3.266,3429,3.266,3433,3.266,3463,3.266,3474,4.292,3487,3.266,3493,2.169,3556,3.853,3557,3.853,3558,5.063,3559,3.853,3560,5.063,3561,3.853,3562,3.853,3563,3.853,3564,3.853,3565,3.853,3566,3.853,3567,3.853,3568,3.853,3569,3.853,3570,3.853,3571,3.853,3572,3.853,3573,3.853,3574,3.853,3575,3.853,3576,3.853,3577,3.853,3578,3.853,3579,3.853,3580,3.853,3581,3.853,3582,3.853,3583,3.853,3584,3.853,3585,3.853,3586,3.853,3587,3.853,3588,3.853,3589,3.853,3590,3.853,3591,3.853,3592,3.853,3593,3.853,3594,5.655,3595,3.853,3596,5.063,3597,3.853,3598,3.853,3599,3.853,3600,3.853,3601,6.007,3602,5.063,3603,5.063,3604,3.853,3605,3.853,3606,3.853,3607,6.007,3608,5.063,3609,3.853,3610,5.063,3611,3.853,3612,3.853,3613,3.853,3614,3.853,3615,5.063,3616,3.853,3617,3.853,3618,3.853,3619,3.853,3620,3.853,3621,3.853,3622,3.853,3623,3.853,3624,3.853,3625,3.853,3626,3.853,3627,3.853,3628,3.853,3629,3.853,3630,3.853,3631,3.853,3632,3.853,3633,3.853,3634,3.853,3635,3.853,3636,3.853,3637,3.853,3638,3.853,3639,3.853,3640,3.853,3641,3.853,3642,3.853,3643,3.853,3644,3.853]]],"invertedIndex":[["",{"_index":51,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":293,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["0.0002",{"_index":1306,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.001",{"_index":2298,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["0.01",{"_index":172,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{}}}],["0.1",{"_index":595,"title":{},"body":{"classes/CMSObjects.html":{},"classes/XRManager.html":{}}}],["0.162.0",{"_index":3490,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":321,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["0.5",{"_index":1308,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.7",{"_index":608,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.9",{"_index":3483,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":322,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["000",{"_index":2111,"title":{},"body":{"classes/StateManager.html":{}}}],["000ab78",{"_index":3109,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":2889,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":2881,"title":{},"body":{"changelog.html":{}}}],["029d526",{"_index":3359,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":2863,"title":{},"body":{"changelog.html":{}}}],["037af62",{"_index":3070,"title":{},"body":{"changelog.html":{}}}],["03a1de4",{"_index":3261,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":2961,"title":{},"body":{"changelog.html":{}}}],["04dc545",{"_index":3371,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":2871,"title":{},"body":{"changelog.html":{}}}],["05ae1d6",{"_index":2952,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":2943,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":2939,"title":{},"body":{"changelog.html":{}}}],["07/07/2021",{"_index":150,"title":{},"body":{"classes/ARManager.html":{}}}],["07d8633",{"_index":3085,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":3035,"title":{},"body":{"changelog.html":{}}}],["0837334",{"_index":3310,"title":{},"body":{"changelog.html":{}}}],["08c8e00",{"_index":3055,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":2916,"title":{},"body":{"changelog.html":{}}}],["094261c",{"_index":3031,"title":{},"body":{"changelog.html":{}}}],["0980379",{"_index":3385,"title":{},"body":{"changelog.html":{}}}],["0a26fea",{"_index":3382,"title":{},"body":{"changelog.html":{}}}],["0b2dd8a",{"_index":3263,"title":{},"body":{"changelog.html":{}}}],["0b95e5b",{"_index":3197,"title":{},"body":{"changelog.html":{}}}],["0ba5097",{"_index":3024,"title":{},"body":{"changelog.html":{}}}],["0c48b27",{"_index":2972,"title":{},"body":{"changelog.html":{}}}],["0x8c8c8c",{"_index":3514,"title":{},"body":{"index.html":{}}}],["0xffffff",{"_index":607,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ColorManager.html":{}}}],["1",{"_index":71,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["1.0",{"_index":2269,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["1.0.1",{"_index":3413,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.0.2",{"_index":3410,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3378,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":3339,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":3319,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":3291,"title":{},"body":{"changelog.html":{}}}],["1.4.1",{"_index":3485,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":3264,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":3190,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":3182,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":3181,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":3180,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":3423,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":73,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/InfoLogger.html":{},"classes/State.html":{},"changelog.html":{}}}],["10/10",{"_index":3435,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1408,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["1000",{"_index":267,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"miscellaneous/variables.html":{}}}],["10000",{"_index":425,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["1007.1048030984678",{"_index":3587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10244f7",{"_index":3023,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":3379,"title":{},"body":{"changelog.html":{}}}],["11/11",{"_index":3436,"title":{},"body":{"coverage.html":{}}}],["1100",{"_index":1750,"title":{},"body":{"classes/RKHelper.html":{}}}],["11000",{"_index":445,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["12",{"_index":2992,"title":{},"body":{"changelog.html":{}}}],["12/12",{"_index":3456,"title":{},"body":{"coverage.html":{}}}],["124a272",{"_index":3137,"title":{},"body":{"changelog.html":{}}}],["1261358",{"_index":3405,"title":{},"body":{"changelog.html":{}}}],["12814.982506255355",{"_index":3589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12834.18729094943",{"_index":3567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12b1754",{"_index":2964,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":2890,"title":{},"body":{"changelog.html":{}}}],["13/13",{"_index":3460,"title":{},"body":{"coverage.html":{}}}],["135.68755273443463",{"_index":3569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1381.1675900848818",{"_index":3585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14",{"_index":2872,"title":{},"body":{"changelog.html":{}}}],["14/14",{"_index":3449,"title":{},"body":{"coverage.html":{}}}],["14cdc8f",{"_index":2995,"title":{},"body":{"changelog.html":{}}}],["14d5f3a",{"_index":3028,"title":{},"body":{"changelog.html":{}}}],["14e4cbb",{"_index":3104,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":2989,"title":{},"body":{"changelog.html":{}}}],["15/15",{"_index":3454,"title":{},"body":{"coverage.html":{}}}],["15dd07c",{"_index":3092,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":2959,"title":{},"body":{"changelog.html":{}}}],["16/16",{"_index":3434,"title":{},"body":{"coverage.html":{}}}],["16ea0df",{"_index":3043,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":2944,"title":{},"body":{"changelog.html":{}}}],["1766.7693725879053",{"_index":3586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1788560",{"_index":2962,"title":{},"body":{"changelog.html":{}}}],["17909eb",{"_index":3401,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":3191,"title":{},"body":{"changelog.html":{}}}],["18/18",{"_index":3448,"title":{},"body":{"coverage.html":{}}}],["18f8db2",{"_index":3362,"title":{},"body":{"changelog.html":{}}}],["19.874838262525053",{"_index":3575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19/19",{"_index":3468,"title":{},"body":{"coverage.html":{}}}],["1906976",{"_index":3399,"title":{},"body":{"changelog.html":{}}}],["1975d70",{"_index":3358,"title":{},"body":{"changelog.html":{}}}],["1].foreach((chargevalue",{"_index":812,"title":{},"body":{"classes/ColorOptions.html":{}}}],["1].oncomplete",{"_index":462,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["1a01248",{"_index":3118,"title":{},"body":{"changelog.html":{}}}],["1a17e99",{"_index":3157,"title":{},"body":{"changelog.html":{}}}],["1af6ae2",{"_index":3122,"title":{},"body":{"changelog.html":{}}}],["1dd0431",{"_index":3129,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":841,"title":{},"body":{"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["2.0",{"_index":951,"title":{},"body":{"classes/CoordinateHelper.html":{},"properties.html":{}}}],["2.0.0",{"_index":3108,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":3068,"title":{},"body":{"changelog.html":{}}}],["2.10.0",{"_index":2938,"title":{},"body":{"changelog.html":{}}}],["2.11.0",{"_index":2918,"title":{},"body":{"changelog.html":{}}}],["2.11.1",{"_index":2915,"title":{},"body":{"changelog.html":{}}}],["2.11.2",{"_index":2906,"title":{},"body":{"changelog.html":{}}}],["2.11.4",{"_index":2898,"title":{},"body":{"changelog.html":{}}}],["2.12.0",{"_index":2888,"title":{},"body":{"changelog.html":{}}}],["2.13.0",{"_index":2880,"title":{},"body":{"changelog.html":{}}}],["2.14.0",{"_index":2878,"title":{},"body":{"changelog.html":{}}}],["2.14.1",{"_index":2869,"title":{},"body":{"changelog.html":{}}}],["2.15.0",{"_index":2868,"title":{},"body":{"changelog.html":{}}}],["2.16.0",{"_index":2861,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["2.2.0",{"_index":3034,"title":{},"body":{"changelog.html":{}}}],["2.3.0",{"_index":3025,"title":{},"body":{"changelog.html":{}}}],["2.3.1",{"_index":3020,"title":{},"body":{"changelog.html":{}}}],["2.3.2",{"_index":3017,"title":{},"body":{"changelog.html":{}}}],["2.4.0",{"_index":3007,"title":{},"body":{"changelog.html":{}}}],["2.5.0",{"_index":2990,"title":{},"body":{"changelog.html":{}}}],["2.5.2",{"_index":2988,"title":{},"body":{"changelog.html":{}}}],["2.6.0",{"_index":2982,"title":{},"body":{"changelog.html":{}}}],["2.7.0",{"_index":2960,"title":{},"body":{"changelog.html":{}}}],["2.8.0",{"_index":2958,"title":{},"body":{"changelog.html":{}}}],["2.9.0",{"_index":2942,"title":{},"body":{"changelog.html":{}}}],["2/2",{"_index":3418,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2560,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["20/06/2021",{"_index":2513,"title":{},"body":{"classes/VRManager.html":{}}}],["20/20",{"_index":3476,"title":{},"body":{"coverage.html":{}}}],["2000",{"_index":533,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["2020",{"_index":3340,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":2991,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":2899,"title":{},"body":{"changelog.html":{}}}],["2023",{"_index":2870,"title":{},"body":{"changelog.html":{}}}],["2024",{"_index":2862,"title":{},"body":{"changelog.html":{}}}],["20ef288",{"_index":3143,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":2864,"title":{},"body":{"changelog.html":{}}}],["21/21",{"_index":3455,"title":{},"body":{"coverage.html":{}}}],["22",{"_index":2879,"title":{},"body":{"changelog.html":{}}}],["22/22",{"_index":3472,"title":{},"body":{"coverage.html":{}}}],["2219a3e",{"_index":3305,"title":{},"body":{"changelog.html":{}}}],["22891.902734328327",{"_index":3591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["22a1ec8",{"_index":3364,"title":{},"body":{"changelog.html":{}}}],["23.1.1",{"_index":3482,"title":{},"body":{"dependencies.html":{}}}],["23/23",{"_index":3451,"title":{},"body":{"coverage.html":{}}}],["234.03507981484574",{"_index":3578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["236bdf4",{"_index":3201,"title":{},"body":{"changelog.html":{}}}],["2371f75",{"_index":3168,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":300,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["24/24",{"_index":3469,"title":{},"body":{"coverage.html":{}}}],["24ecd77",{"_index":2914,"title":{},"body":{"changelog.html":{}}}],["25.884223757326",{"_index":3571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25/25",{"_index":3467,"title":{},"body":{"coverage.html":{}}}],["2516.987185037266",{"_index":3590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["257",{"_index":3222,"title":{},"body":{"changelog.html":{}}}],["25b2a9d",{"_index":3367,"title":{},"body":{"changelog.html":{}}}],["263.3640855132258",{"_index":3574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["26444f1",{"_index":2996,"title":{},"body":{"changelog.html":{}}}],["266af04",{"_index":3270,"title":{},"body":{"changelog.html":{}}}],["2681.277288705242",{"_index":3580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["26eff0e",{"_index":3059,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":2900,"title":{},"body":{"changelog.html":{}}}],["270.10019006776236",{"_index":3572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2700aaf",{"_index":3089,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":2983,"title":{},"body":{"changelog.html":{}}}],["28/06/2021",{"_index":140,"title":{},"body":{"classes/ARManager.html":{},"classes/XRManager.html":{}}}],["289",{"_index":3116,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":2917,"title":{},"body":{"changelog.html":{}}}],["29/06/2021",{"_index":2821,"title":{},"body":{"classes/XRManager.html":{}}}],["29/08/2020",{"_index":2512,"title":{},"body":{"classes/VRManager.html":{}}}],["29093a2",{"_index":3255,"title":{},"body":{"changelog.html":{}}}],["2933.619479808285",{"_index":3579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["29beae7",{"_index":2897,"title":{},"body":{"changelog.html":{}}}],["2c97f5c",{"_index":3144,"title":{},"body":{"changelog.html":{}}}],["2e16371",{"_index":3253,"title":{},"body":{"changelog.html":{}}}],["2e52c22",{"_index":3161,"title":{},"body":{"changelog.html":{}}}],["2fa310f",{"_index":3288,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":302,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["3.0",{"_index":971,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["3.10.1",{"_index":3488,"title":{},"body":{"dependencies.html":{}}}],["3.3333",{"_index":2088,"title":{},"body":{"classes/State.html":{}}}],["3/3",{"_index":3431,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":514,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{}}}],["30/30",{"_index":3446,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":495,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["3000",{"_index":403,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RKHelper.html":{},"miscellaneous/variables.html":{}}}],["3017ca9",{"_index":3083,"title":{},"body":{"changelog.html":{}}}],["303187a",{"_index":3133,"title":{},"body":{"changelog.html":{}}}],["3041166",{"_index":3172,"title":{},"body":{"changelog.html":{}}}],["30b0383",{"_index":3368,"title":{},"body":{"changelog.html":{}}}],["30b5160",{"_index":3251,"title":{},"body":{"changelog.html":{}}}],["312.02688693297375",{"_index":3570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["318.16541790248885",{"_index":3576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["32",{"_index":483,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["3255a65",{"_index":2967,"title":{},"body":{"changelog.html":{}}}],["336",{"_index":3047,"title":{},"body":{"changelog.html":{}}}],["3475836",{"_index":3294,"title":{},"body":{"changelog.html":{}}}],["34a783c",{"_index":3002,"title":{},"body":{"changelog.html":{}}}],["34d9b2c",{"_index":3056,"title":{},"body":{"changelog.html":{}}}],["35/35",{"_index":3438,"title":{},"body":{"coverage.html":{}}}],["3500",{"_index":3573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["359d353",{"_index":3272,"title":{},"body":{"changelog.html":{}}}],["36/36",{"_index":3459,"title":{},"body":{"coverage.html":{}}}],["364",{"_index":3004,"title":{},"body":{"changelog.html":{}}}],["36486b8",{"_index":3060,"title":{},"body":{"changelog.html":{}}}],["3756330",{"_index":3308,"title":{},"body":{"changelog.html":{}}}],["37df19f",{"_index":3343,"title":{},"body":{"changelog.html":{}}}],["3839578",{"_index":3171,"title":{},"body":{"changelog.html":{}}}],["3918159",{"_index":3387,"title":{},"body":{"changelog.html":{}}}],["39241a4",{"_index":3040,"title":{},"body":{"changelog.html":{}}}],["399ac77",{"_index":3412,"title":{},"body":{"changelog.html":{}}}],["3b1991c",{"_index":3268,"title":{},"body":{"changelog.html":{}}}],["3ce675f",{"_index":3302,"title":{},"body":{"changelog.html":{}}}],["3d",{"_index":762,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["3d1f91c",{"_index":2934,"title":{},"body":{"changelog.html":{}}}],["3daabc5",{"_index":3079,"title":{},"body":{"changelog.html":{}}}],["3e5d80d",{"_index":3119,"title":{},"body":{"changelog.html":{}}}],["3f6367f",{"_index":3304,"title":{},"body":{"changelog.html":{}}}],["4/4",{"_index":3430,"title":{},"body":{"coverage.html":{}}}],["40bbba0",{"_index":3212,"title":{},"body":{"changelog.html":{}}}],["4262a1b",{"_index":3374,"title":{},"body":{"changelog.html":{}}}],["43",{"_index":3527,"title":{},"body":{"overview.html":{}}}],["43/43",{"_index":3441,"title":{},"body":{"coverage.html":{}}}],["448eb4f",{"_index":2894,"title":{},"body":{"changelog.html":{}}}],["45/45",{"_index":3444,"title":{},"body":{"coverage.html":{}}}],["455f536",{"_index":3231,"title":{},"body":{"changelog.html":{}}}],["45a0123",{"_index":3258,"title":{},"body":{"changelog.html":{}}}],["4603dbc",{"_index":3041,"title":{},"body":{"changelog.html":{}}}],["46910.7848593543",{"_index":3566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4698ea4",{"_index":3033,"title":{},"body":{"changelog.html":{}}}],["46b8aee",{"_index":3065,"title":{},"body":{"changelog.html":{}}}],["473a39c",{"_index":2978,"title":{},"body":{"changelog.html":{}}}],["4764196",{"_index":3345,"title":{},"body":{"changelog.html":{}}}],["477845f",{"_index":2887,"title":{},"body":{"changelog.html":{}}}],["4791f53",{"_index":2931,"title":{},"body":{"changelog.html":{}}}],["48/48",{"_index":3473,"title":{},"body":{"coverage.html":{}}}],["48130b2",{"_index":3376,"title":{},"body":{"changelog.html":{}}}],["4acca1a",{"_index":3176,"title":{},"body":{"changelog.html":{}}}],["4b10452",{"_index":3377,"title":{},"body":{"changelog.html":{}}}],["4c5fac9",{"_index":2965,"title":{},"body":{"changelog.html":{}}}],["4e41f72",{"_index":3011,"title":{},"body":{"changelog.html":{}}}],["4f80bd6",{"_index":3293,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":2295,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"overview.html":{}}}],["5/5",{"_index":3428,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2548,"title":{},"body":{"classes/VRManager.html":{}}}],["500",{"_index":298,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["5000",{"_index":479,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["50000",{"_index":740,"title":{},"body":{"classes/ColorOptions.html":{}}}],["50c2584",{"_index":3215,"title":{},"body":{"changelog.html":{}}}],["50fc5f7",{"_index":3088,"title":{},"body":{"changelog.html":{}}}],["5139c6e",{"_index":3329,"title":{},"body":{"changelog.html":{}}}],["5264.228603228927",{"_index":3565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5283e9a",{"_index":3388,"title":{},"body":{"changelog.html":{}}}],["5334996",{"_index":3084,"title":{},"body":{"changelog.html":{}}}],["5389282",{"_index":3246,"title":{},"body":{"changelog.html":{}}}],["54/54",{"_index":3466,"title":{},"body":{"coverage.html":{}}}],["545c956",{"_index":2985,"title":{},"body":{"changelog.html":{}}}],["5518a3e",{"_index":2936,"title":{},"body":{"changelog.html":{}}}],["5534.140362338047",{"_index":3577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["55cad7c",{"_index":3014,"title":{},"body":{"changelog.html":{}}}],["5628.5248735111745",{"_index":3582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["56c6eff",{"_index":3142,"title":{},"body":{"changelog.html":{}}}],["56f94f0",{"_index":3225,"title":{},"body":{"changelog.html":{}}}],["56ff275",{"_index":3260,"title":{},"body":{"changelog.html":{}}}],["5743adc",{"_index":3256,"title":{},"body":{"changelog.html":{}}}],["57e438f",{"_index":3223,"title":{},"body":{"changelog.html":{}}}],["5894cac",{"_index":3094,"title":{},"body":{"changelog.html":{}}}],["59/59",{"_index":3417,"title":{},"body":{"coverage.html":{}}}],["5928.901341784575",{"_index":3588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["595d9e5",{"_index":3165,"title":{},"body":{"changelog.html":{}}}],["5a562ab",{"_index":3221,"title":{},"body":{"changelog.html":{}}}],["5a8fe9f",{"_index":3179,"title":{},"body":{"changelog.html":{}}}],["5bdc562",{"_index":3185,"title":{},"body":{"changelog.html":{}}}],["5ea04f1",{"_index":3286,"title":{},"body":{"changelog.html":{}}}],["5f0f942",{"_index":3372,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":352,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["6/6",{"_index":3419,"title":{},"body":{"coverage.html":{}}}],["6000",{"_index":3592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60269f7",{"_index":3317,"title":{},"body":{"changelog.html":{}}}],["6062.586283740076",{"_index":3583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6085f50",{"_index":3139,"title":{},"body":{"changelog.html":{}}}],["608f529",{"_index":3019,"title":{},"body":{"changelog.html":{}}}],["612205c",{"_index":3406,"title":{},"body":{"changelog.html":{}}}],["62ae417",{"_index":3073,"title":{},"body":{"changelog.html":{}}}],["62bf178",{"_index":2945,"title":{},"body":{"changelog.html":{}}}],["646.5795158318147",{"_index":3581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6486982",{"_index":3248,"title":{},"body":{"changelog.html":{}}}],["65e657b",{"_index":2948,"title":{},"body":{"changelog.html":{}}}],["66388.95051168812",{"_index":3564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["66cbbc0",{"_index":3204,"title":{},"body":{"changelog.html":{}}}],["677.7571205763458",{"_index":3568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["689da29",{"_index":3112,"title":{},"body":{"changelog.html":{}}}],["68cd7ad",{"_index":3249,"title":{},"body":{"changelog.html":{}}}],["68f3d45",{"_index":3154,"title":{},"body":{"changelog.html":{}}}],["6943f79",{"_index":3337,"title":{},"body":{"changelog.html":{}}}],["69544e6",{"_index":2922,"title":{},"body":{"changelog.html":{}}}],["69d3f75",{"_index":3369,"title":{},"body":{"changelog.html":{}}}],["6a7e82f",{"_index":3001,"title":{},"body":{"changelog.html":{}}}],["6a834e8",{"_index":3207,"title":{},"body":{"changelog.html":{}}}],["6ace2f6",{"_index":2941,"title":{},"body":{"changelog.html":{}}}],["6c92e33",{"_index":2923,"title":{},"body":{"changelog.html":{}}}],["6cd5d53",{"_index":3150,"title":{},"body":{"changelog.html":{}}}],["6dbd797",{"_index":3121,"title":{},"body":{"changelog.html":{}}}],["6e919e1",{"_index":3145,"title":{},"body":{"changelog.html":{}}}],["6ef17d0",{"_index":3226,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":2935,"title":{},"body":{"changelog.html":{}}}],["7.24.3",{"_index":3481,"title":{},"body":{"dependencies.html":{}}}],["7.6.0",{"_index":3486,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":3426,"title":{},"body":{"coverage.html":{}}}],["717304e",{"_index":3071,"title":{},"body":{"changelog.html":{}}}],["73b7c27",{"_index":3383,"title":{},"body":{"changelog.html":{}}}],["7528ee0",{"_index":3208,"title":{},"body":{"changelog.html":{}}}],["75f829a",{"_index":3016,"title":{},"body":{"changelog.html":{}}}],["7632a18",{"_index":3232,"title":{},"body":{"changelog.html":{}}}],["789da8b",{"_index":3336,"title":{},"body":{"changelog.html":{}}}],["790.5876682946184",{"_index":3584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["79e6d7c",{"_index":3316,"title":{},"body":{"changelog.html":{}}}],["7a42b65",{"_index":2981,"title":{},"body":{"changelog.html":{}}}],["7b839e3",{"_index":3076,"title":{},"body":{"changelog.html":{}}}],["7bcd7ba",{"_index":3275,"title":{},"body":{"changelog.html":{}}}],["7d1ca22",{"_index":3409,"title":{},"body":{"changelog.html":{}}}],["7d2eb64",{"_index":3169,"title":{},"body":{"changelog.html":{}}}],["7d606b2",{"_index":3338,"title":{},"body":{"changelog.html":{}}}],["7d90d72",{"_index":3218,"title":{},"body":{"changelog.html":{}}}],["7e0870b",{"_index":2946,"title":{},"body":{"changelog.html":{}}}],["7e36462",{"_index":2957,"title":{},"body":{"changelog.html":{}}}],["7e9c733",{"_index":3044,"title":{},"body":{"changelog.html":{}}}],["7f35fdb",{"_index":3038,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":449,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["8/8",{"_index":3442,"title":{},"body":{"coverage.html":{}}}],["854e543",{"_index":3233,"title":{},"body":{"changelog.html":{}}}],["8559830",{"_index":3175,"title":{},"body":{"changelog.html":{}}}],["85d4a14",{"_index":3228,"title":{},"body":{"changelog.html":{}}}],["867d28a",{"_index":3063,"title":{},"body":{"changelog.html":{}}}],["872f708",{"_index":3167,"title":{},"body":{"changelog.html":{}}}],["8a0c0b1",{"_index":3141,"title":{},"body":{"changelog.html":{}}}],["8b994a7",{"_index":3124,"title":{},"body":{"changelog.html":{}}}],["8ba94e7",{"_index":3330,"title":{},"body":{"changelog.html":{}}}],["8cbcaa5",{"_index":3267,"title":{},"body":{"changelog.html":{}}}],["8d7b160",{"_index":3307,"title":{},"body":{"changelog.html":{}}}],["8e2eff4",{"_index":3262,"title":{},"body":{"changelog.html":{}}}],["8e7396f",{"_index":3101,"title":{},"body":{"changelog.html":{}}}],["8f3e8e1",{"_index":3348,"title":{},"body":{"changelog.html":{}}}],["9/9",{"_index":3432,"title":{},"body":{"coverage.html":{}}}],["90aea3c",{"_index":3149,"title":{},"body":{"changelog.html":{}}}],["9222e04",{"_index":3166,"title":{},"body":{"changelog.html":{}}}],["9276ef9",{"_index":2954,"title":{},"body":{"changelog.html":{}}}],["9474565",{"_index":3373,"title":{},"body":{"changelog.html":{}}}],["947f6bf",{"_index":3366,"title":{},"body":{"changelog.html":{}}}],["9540af5",{"_index":3278,"title":{},"body":{"changelog.html":{}}}],["96/96",{"_index":3464,"title":{},"body":{"coverage.html":{}}}],["98c7055",{"_index":3030,"title":{},"body":{"changelog.html":{}}}],["9908cc9",{"_index":3158,"title":{},"body":{"changelog.html":{}}}],["9a6c243",{"_index":3061,"title":{},"body":{"changelog.html":{}}}],["9a79692",{"_index":3173,"title":{},"body":{"changelog.html":{}}}],["9a88331",{"_index":3057,"title":{},"body":{"changelog.html":{}}}],["9bc48e0",{"_index":2963,"title":{},"body":{"changelog.html":{}}}],["9d109e5",{"_index":2986,"title":{},"body":{"changelog.html":{}}}],["9e3dc20",{"_index":3408,"title":{},"body":{"changelog.html":{}}}],["9eb21f5",{"_index":3393,"title":{},"body":{"changelog.html":{}}}],["9efd9ca",{"_index":3398,"title":{},"body":{"changelog.html":{}}}],["9f4cf7c",{"_index":3046,"title":{},"body":{"changelog.html":{}}}],["9ffb5e2",{"_index":2891,"title":{},"body":{"changelog.html":{}}}],["_attributes",{"_index":2185,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["a411631",{"_index":3152,"title":{},"body":{"changelog.html":{}}}],["a474af2",{"_index":3285,"title":{},"body":{"changelog.html":{}}}],["a4e8aaa",{"_index":2976,"title":{},"body":{"changelog.html":{}}}],["a5481e1",{"_index":3106,"title":{},"body":{"changelog.html":{}}}],["a54d302",{"_index":2937,"title":{},"body":{"changelog.html":{}}}],["a5eaa34",{"_index":3067,"title":{},"body":{"changelog.html":{}}}],["a6a1c19",{"_index":3342,"title":{},"body":{"changelog.html":{}}}],["a821e42",{"_index":3075,"title":{},"body":{"changelog.html":{}}}],["a8336ae",{"_index":2966,"title":{},"body":{"changelog.html":{}}}],["a8f8353",{"_index":3269,"title":{},"body":{"changelog.html":{}}}],["aaed8f5",{"_index":2974,"title":{},"body":{"changelog.html":{}}}],["ab8feb4",{"_index":3351,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":2778,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["above",{"_index":2459,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["ac0c4f1",{"_index":3273,"title":{},"body":{"changelog.html":{}}}],["acc",{"_index":1417,"title":{},"body":{"classes/LoadingManager.html":{}}}],["access",{"_index":2761,"title":{},"body":{"interfaces/Window.html":{}}}],["active",{"_index":93,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["activecamera",{"_index":257,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/StateManager.html":{}}}],["activeobject",{"_index":1929,"title":{},"body":{"classes/SelectionManager.html":{}}}],["activevariable",{"_index":186,"title":{"classes/ActiveVariable.html":{}},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["activevariable(0",{"_index":2114,"title":{},"body":{"classes/StateManager.html":{}}}],["activevariable(false",{"_index":2109,"title":{},"body":{"classes/StateManager.html":{}}}],["actual",{"_index":349,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["add",{"_index":707,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["add('could",{"_index":2422,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["add(data",{"_index":1353,"title":{},"body":{"classes/InfoLogger.html":{}}}],["add(k1.clone().multiplyscalar(h2",{"_index":1280,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k1.clone().multiplyscalar(half_h",{"_index":1283,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2",{"_index":1313,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(2",{"_index":1317,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(half_h",{"_index":1287,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3",{"_index":1314,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(2",{"_index":1318,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h",{"_index":1293,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h2",{"_index":1290,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k4",{"_index":1319,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(h",{"_index":1289,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(half_h",{"_index":1279,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["addchild",{"_index":1440,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addchild(name",{"_index":1467,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcollection",{"_index":1592,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addcollection(eventdatatype",{"_index":1602,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addconfig",{"_index":1441,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addconfig('button",{"_index":2133,"title":{},"body":{"classes/StateManager.html":{}}}],["addconfig(type",{"_index":1469,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["added",{"_index":1391,"title":{},"body":{"classes/LoadingManager.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["addeventdatafolder",{"_index":1593,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addeventdatatypefolder",{"_index":1594,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addeventdatatypefolder(typename",{"_index":1611,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addeventlistener('click",{"_index":2014,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('mousemove",{"_index":2012,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('touchstart",{"_index":2016,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addface3",{"_index":564,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_1",{"_index":577,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_3",{"_index":580,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_4",{"_index":585,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_1",{"_index":570,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_2",{"_index":583,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_3",{"_index":573,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addgeometry",{"_index":1595,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addgeometry(object",{"_index":1614,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addgeometryfolder",{"_index":1596,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["adding",{"_index":125,"title":{},"body":{"classes/ARManager.html":{},"interfaces/EventDataLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["addlabel",{"_index":1597,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addlabel(labelid",{"_index":1621,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addlabelsfolder",{"_index":1598,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addlabelsfolder(configfunctions",{"_index":1626,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addlabeltoeventobject",{"_index":1113,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["addlabeltoeventobject(label",{"_index":1120,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["addlabeltoobject",{"_index":2802,"title":{},"body":{"interfaces/Window.html":{}}}],["addloadableitem",{"_index":1372,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadableitem(id",{"_index":1384,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener",{"_index":1373,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener(callback",{"_index":1386,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck",{"_index":1374,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck(callback",{"_index":1389,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addoutlinepassforselection",{"_index":1041,"title":{},"body":{"classes/EffectsManager.html":{}}}],["addprogresslistener",{"_index":1375,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addprogresslistener(callback",{"_index":1392,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addrenderer",{"_index":1775,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":1798,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":2653,"title":{},"body":{"interfaces/Window.html":{}}}],["addtrack",{"_index":2319,"title":{},"body":{"classes/TracksMesh.html":{}}}],["addtrack(points",{"_index":2199,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["ae76d4a",{"_index":3091,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":377,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["against",{"_index":643,"title":{},"body":{"classes/ColorManager.html":{}}}],["aliases",{"_index":3540,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allcolorbyoptions",{"_index":684,"title":{},"body":{"classes/ColorOptions.html":{}}}],["alleventdata",{"_index":446,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.getobjectbyname('track",{"_index":505,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.traverse((eventobject",{"_index":469,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.visible",{"_index":512,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventsobject",{"_index":2436,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["allfacepositions",{"_index":563,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allfacepositions.concat",{"_index":566,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allgeometriesuiparameters",{"_index":2695,"title":{},"body":{"interfaces/Window.html":{}}}],["allow",{"_index":864,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["allowcustomvalue",{"_index":832,"title":{},"body":{"classes/ColorOptions.html":{}}}],["allowed",{"_index":995,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":1178,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["allows",{"_index":1645,"title":{},"body":{"classes/PresetView.html":{}}}],["allowselection(selectedobject",{"_index":2776,"title":{},"body":{"interfaces/Window.html":{}}}],["allowurloptions",{"_index":854,"title":{},"body":{"interfaces/Configuration.html":{}}}],["alltweens",{"_index":329,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(animationspheretween",{"_index":428,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(eventobjecttween",{"_index":357,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(scaletween",{"_index":381,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(tween",{"_index":459,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens[0].onstart",{"_index":429,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens[alltweens.length",{"_index":461,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["along",{"_index":289,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"index.html":{}}}],["alongaxisposition",{"_index":292,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alpha",{"_index":1837,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":1922,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["always",{"_index":3309,"title":{},"body":{"changelog.html":{}}}],["ambientlight",{"_index":1991,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":1999,"title":{},"body":{"classes/SelectionManager.html":{}}}],["angle",{"_index":301,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{},"changelog.html":{}}}],["angles",{"_index":909,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["anglesaresane",{"_index":899,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["anglesaresane(theta",{"_index":905,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["angular",{"_index":2908,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["animate",{"_index":279,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animateclippingwithcollision",{"_index":518,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animateevent",{"_index":319,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animateeventafterinterval",{"_index":223,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["animateeventwithclipping",{"_index":444,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animateeventwithcollision(tweenduration",{"_index":516,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animatepreset(animationpreset",{"_index":2798,"title":{},"body":{"interfaces/Window.html":{}}}],["animatethroughevent",{"_index":285,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animatewithcollision",{"_index":503,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animating",{"_index":264,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animation",{"_index":221,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["animationclipplane",{"_index":456,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationclipplane.constant",{"_index":457,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationclipplanes",{"_index":450,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationfunction",{"_index":502,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationfunction(tweenduration",{"_index":515,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationpreset",{"_index":218,"title":{"interfaces/AnimationPreset.html":{}},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["animations",{"_index":315,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animationsmanager",{"_index":254,"title":{},"body":{"interfaces/AnimationPreset.html":{},"coverage.html":{}}}],["animationsphere",{"_index":325,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween",{"_index":401,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween.chain(animationspheretweenclone",{"_index":427,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween.onupdate(onanimationsphereupdate",{"_index":422,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone",{"_index":424,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone.oncomplete",{"_index":433,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone.onupdate(onanimationsphereupdate",{"_index":426,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["another",{"_index":3402,"title":{},"body":{"changelog.html":{}}}],["antialias",{"_index":1061,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["antialiasing",{"_index":1037,"title":{},"body":{"classes/EffectsManager.html":{},"changelog.html":{}}}],["antialiasrender",{"_index":1042,"title":{},"body":{"classes/EffectsManager.html":{}}}],["antialiasrender(scene",{"_index":1068,"title":{},"body":{"classes/EffectsManager.html":{}}}],["any).geometry",{"_index":409,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.material.color",{"_index":509,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.material?.color",{"_index":508,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.xr",{"_index":2825,"title":{},"body":{"classes/XRManager.html":{}}}],["apache",{"_index":3533,"title":{},"body":{"properties.html":{}}}],["api",{"_index":3499,"title":{},"body":{"index.html":{},"properties.html":{}}}],["app",{"_index":2919,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":1900,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["appled",{"_index":998,"title":{},"body":{"classes/Cut.html":{}}}],["application",{"_index":3503,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":3608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applied",{"_index":468,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["applies",{"_index":928,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["apply",{"_index":716,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["applychargecoloroptions",{"_index":690,"title":{},"body":{"classes/ColorOptions.html":{}}}],["applyconfigstate",{"_index":1442,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyconfigstate(config",{"_index":1473,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyembedoption",{"_index":2335,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions",{"_index":2336,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions(defaulteventpath",{"_index":2351,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyhidewidgetsoptions",{"_index":2337,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applying",{"_index":3346,"title":{},"body":{"changelog.html":{}}}],["applymomcoloroptions",{"_index":691,"title":{},"body":{"classes/ColorOptions.html":{}}}],["applyoptions",{"_index":2338,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyvertexcoloroptions",{"_index":692,"title":{},"body":{"classes/ColorOptions.html":{}}}],["ar",{"_index":10,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["archive",{"_index":3277,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["archive.file(filepath).async('string",{"_index":3642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["archive.files",{"_index":3641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["archive.loadasync(file",{"_index":3639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argument",{"_index":2901,"title":{},"body":{"changelog.html":{}}}],["armanager",{"_index":1,"title":{"classes/ARManager.html":{}},"body":{"classes/ARManager.html":{},"changelog.html":{},"coverage.html":{}}}],["armanager.enabledomoverlay",{"_index":161,"title":{},"body":{"classes/ARManager.html":{}}}],["around",{"_index":2506,"title":{},"body":{"classes/VRManager.html":{}}}],["array",{"_index":521,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["array.from",{"_index":389,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["arraybuffer",{"_index":2693,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["arraycamera",{"_index":2820,"title":{},"body":{"classes/XRManager.html":{}}}],["arraycamera([camera.clone",{"_index":2846,"title":{},"body":{"classes/XRManager.html":{}}}],["arrays",{"_index":2047,"title":{},"body":{"classes/SelectionManager.html":{}}}],["aspect",{"_index":2266,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["aspect.x",{"_index":2297,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["aspects",{"_index":2593,"title":{},"body":{"interfaces/Window.html":{}}}],["assets/preset",{"_index":1672,"title":{},"body":{"classes/PresetView.html":{}}}],["assign",{"_index":3320,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":648,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["async",{"_index":35,"title":{},"body":{"classes/ARManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["atlas",{"_index":817,"title":{},"body":{"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["atlasquaternion",{"_index":900,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["attach",{"_index":1629,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["attempt",{"_index":3110,"title":{},"body":{"changelog.html":{}}}],["attribute",{"_index":977,"title":{},"body":{"classes/Cut.html":{},"classes/ScriptLoader.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{}}}],["attributename",{"_index":2040,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributes",{"_index":1995,"title":{},"body":{"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":2041,"title":{},"body":{"classes/SelectionManager.html":{}}}],["author",{"_index":3536,"title":{},"body":{"properties.html":{}}}],["available",{"_index":732,"title":{},"body":{"classes/ColorOptions.html":{},"classes/RendererManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["available/created",{"_index":1797,"title":{},"body":{"classes/RendererManager.html":{}}}],["averageprogress",{"_index":1421,"title":{},"body":{"classes/LoadingManager.html":{}}}],["await",{"_index":174,"title":{},"body":{"classes/ARManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["axes",{"_index":476,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["axeshelper",{"_index":1992,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":2001,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axis",{"_index":291,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["azimuthal",{"_index":914,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["b",{"_index":1836,"title":{},"body":{"classes/RendererManager.html":{}}}],["b10bb7a",{"_index":3217,"title":{},"body":{"changelog.html":{}}}],["b46c49f",{"_index":3395,"title":{},"body":{"changelog.html":{}}}],["b52282f",{"_index":3243,"title":{},"body":{"changelog.html":{}}}],["b7a324a",{"_index":3236,"title":{},"body":{"changelog.html":{}}}],["b7e8da0",{"_index":3321,"title":{},"body":{"changelog.html":{}}}],["b8e88b8",{"_index":3210,"title":{},"body":{"changelog.html":{}}}],["b_first",{"_index":1266,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_last",{"_index":1261,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_middle",{"_index":1260,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["babel/core",{"_index":3480,"title":{},"body":{"dependencies.html":{}}}],["back",{"_index":576,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["back_1",{"_index":582,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_2",{"_index":578,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_3",{"_index":579,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_4",{"_index":581,"title":{},"body":{"classes/CMSObjects.html":{}}}],["background",{"_index":3064,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":751,"title":{},"body":{"classes/ColorOptions.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"properties.html":{}}}],["bb41683",{"_index":3082,"title":{},"body":{"changelog.html":{}}}],["bbcdf0c",{"_index":3240,"title":{},"body":{"changelog.html":{}}}],["bbea6b0",{"_index":3193,"title":{},"body":{"changelog.html":{}}}],["become",{"_index":141,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["before",{"_index":1961,"title":{},"body":{"classes/SelectionManager.html":{}}}],["being",{"_index":1358,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["better",{"_index":3102,"title":{},"body":{"changelog.html":{}}}],["bf98a24",{"_index":3026,"title":{},"body":{"changelog.html":{}}}],["big",{"_index":3389,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":3211,"title":{},"body":{"changelog.html":{}}}],["blob",{"_index":3628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blob([data",{"_index":3629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["block",{"_index":2440,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["bloom",{"_index":1036,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["boolean",{"_index":56,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["both",{"_index":2397,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":584,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["bound",{"_index":1003,"title":{},"body":{"classes/Cut.html":{}}}],["bounded",{"_index":2516,"title":{},"body":{"classes/VRManager.html":{}}}],["bounds",{"_index":1332,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["box",{"_index":602,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer",{"_index":588,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.attributes.position",{"_index":589,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.computevertexnormals",{"_index":591,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxedges",{"_index":604,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject",{"_index":592,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":599,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":597,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":612,"title":{},"body":{"classes/CMSObjects.html":{}}}],["browser",{"_index":3244,"title":{},"body":{"changelog.html":{}}}],["browsers",{"_index":1845,"title":{},"body":{"classes/RendererManager.html":{}}}],["bufferattribute",{"_index":246,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["bufferattribute(new",{"_index":2216,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["bufferattribute).copyarray",{"_index":2226,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["buffergeometry",{"_index":239,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["buffergeometry().setfrompoints",{"_index":2544,"title":{},"body":{"classes/VRManager.html":{}}}],["bug",{"_index":2873,"title":{},"body":{"changelog.html":{}}}],["bugged",{"_index":3397,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":2051,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["build(obj",{"_index":2724,"title":{},"body":{"interfaces/Window.html":{}}}],["build(object",{"_index":2712,"title":{},"body":{"interfaces/Window.html":{}}}],["build:bundlethis",{"_index":3518,"title":{},"body":{"index.html":{}}}],["buildeventdata",{"_index":1114,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["buildeventdata(eventdata",{"_index":1125,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":2632,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters",{"_index":2767,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters(parameters",{"_index":2727,"title":{},"body":{"interfaces/Window.html":{}}}],["building",{"_index":3522,"title":{},"body":{"index.html":{}}}],["builds",{"_index":2631,"title":{},"body":{"interfaces/Window.html":{}}}],["bump",{"_index":2866,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":3000,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["bundled",{"_index":3516,"title":{},"body":{"index.html":{}}}],["button",{"_index":2497,"title":{},"body":{"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["buttons",{"_index":2132,"title":{},"body":{"classes/StateManager.html":{}}}],["c0af497",{"_index":3015,"title":{},"body":{"changelog.html":{}}}],["c1",{"_index":2554,"title":{},"body":{"classes/VRManager.html":{}}}],["c36a222",{"_index":3349,"title":{},"body":{"changelog.html":{}}}],["c39ecd3",{"_index":3361,"title":{},"body":{"changelog.html":{}}}],["c446567",{"_index":3170,"title":{},"body":{"changelog.html":{}}}],["c60b3c1",{"_index":3006,"title":{},"body":{"changelog.html":{}}}],["c7a35db",{"_index":3390,"title":{},"body":{"changelog.html":{}}}],["c897ab3",{"_index":3066,"title":{},"body":{"changelog.html":{}}}],["c91aa0e",{"_index":2973,"title":{},"body":{"changelog.html":{}}}],["c92d65f",{"_index":3126,"title":{},"body":{"changelog.html":{}}}],["c9781e5",{"_index":3199,"title":{},"body":{"changelog.html":{}}}],["c991e54",{"_index":3315,"title":{},"body":{"changelog.html":{}}}],["c9d4880",{"_index":3299,"title":{},"body":{"changelog.html":{}}}],["ca3cc2f",{"_index":3235,"title":{},"body":{"changelog.html":{}}}],["calculated",{"_index":818,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["calculation",{"_index":3120,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":97,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["callback",{"_index":96,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/typealiases.html":{}}}],["callback(averageprogress",{"_index":1423,"title":{},"body":{"classes/LoadingManager.html":{}}}],["callback(eventdata",{"_index":2641,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":2630,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(updatedvalue",{"_index":215,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["callbackfunction",{"_index":202,"title":{},"body":{"classes/ActiveVariable.html":{},"miscellaneous/typealiases.html":{}}}],["callbacks",{"_index":194,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["called",{"_index":1625,"title":{},"body":{"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["calling",{"_index":1475,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["calls",{"_index":2977,"title":{},"body":{"changelog.html":{}}}],["calo",{"_index":2892,"title":{},"body":{"changelog.html":{}}}],["calocluster",{"_index":3202,"title":{},"body":{"changelog.html":{}}}],["caloclusters",{"_index":3219,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["camera",{"_index":45,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["camera.near",{"_index":158,"title":{},"body":{"classes/ARManager.html":{}}}],["cameragroup",{"_index":25,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["cameranear",{"_index":72,"title":{},"body":{"classes/ARManager.html":{}}}],["camerapos",{"_index":1647,"title":{},"body":{"classes/PresetView.html":{}}}],["cameraposition",{"_index":2139,"title":{},"body":{"classes/StateManager.html":{},"classes/XRManager.html":{}}}],["cameras",{"_index":2730,"title":{},"body":{"interfaces/Window.html":{}}}],["cameratarget",{"_index":1648,"title":{},"body":{"classes/PresetView.html":{}}}],["canvas",{"_index":1796,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["canvaswrapper",{"_index":1853,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.appendchild(this.getmainrenderer().domelement",{"_index":1864,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetheight",{"_index":1859,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetwidth",{"_index":1856,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":1135,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["cartesian",{"_index":926,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["case",{"_index":1659,"title":{},"body":{"classes/PresetView.html":{}}}],["catch",{"_index":2439,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["catch((error",{"_index":2420,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/XRManager.html":{}}}],["cavern",{"_index":3563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cb2ec40",{"_index":3313,"title":{},"body":{"changelog.html":{}}}],["cb68283",{"_index":3151,"title":{},"body":{"changelog.html":{}}}],["cc04d5a",{"_index":3159,"title":{},"body":{"changelog.html":{}}}],["cdn",{"_index":3287,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["cell",{"_index":2893,"title":{},"body":{"changelog.html":{}}}],["cell/cluster",{"_index":2896,"title":{},"body":{"changelog.html":{}}}],["cfb1b6a",{"_index":3396,"title":{},"body":{"changelog.html":{}}}],["cg",{"_index":2556,"title":{},"body":{"classes/VRManager.html":{}}}],["chaining",{"_index":3314,"title":{},"body":{"changelog.html":{}}}],["chamber",{"_index":554,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":192,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changed",{"_index":191,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["changelog",{"_index":2853,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":625,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changing",{"_index":337,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["charge",{"_index":712,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"miscellaneous/enumerations.html":{}}}],["chargecolors",{"_index":685,"title":{},"body":{"classes/ColorOptions.html":{}}}],["chargevalue",{"_index":769,"title":{},"body":{"classes/ColorOptions.html":{}}}],["check",{"_index":341,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checkbox",{"_index":1528,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["checked",{"_index":1802,"title":{},"body":{"classes/RendererManager.html":{}}}],["checking",{"_index":1301,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["checks",{"_index":908,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["chi2",{"_index":1680,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["child",{"_index":660,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["child.findintree(name",{"_index":1579,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.name",{"_index":1586,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.nodelevel",{"_index":1506,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.parent",{"_index":1505,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(child.togglestate",{"_index":1525,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(value",{"_index":1524,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.togglestate",{"_index":1523,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.traverse((object",{"_index":662,"title":{},"body":{"classes/ColorManager.html":{}}}],["childindex",{"_index":1509,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["children",{"_index":1431,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["childrenactive",{"_index":1432,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childrentogglestate",{"_index":1433,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate",{"_index":1569,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.name",{"_index":1574,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.nodelevel",{"_index":1576,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["class",{"_index":0,"title":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"index.html":{},"overview.html":{}}}],["clean",{"_index":3069,"title":{},"body":{"changelog.html":{}}}],["cleanup",{"_index":3205,"title":{},"body":{"changelog.html":{}}}],["clear",{"_index":1599,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["clearing",{"_index":2636,"title":{},"body":{"interfaces/Window.html":{}}}],["clearinterval(intervalid",{"_index":2562,"title":{},"body":{"classes/VRManager.html":{}}}],["click",{"_index":1956,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":2056,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":2780,"title":{},"body":{"interfaces/Window.html":{}}}],["clipping",{"_index":438,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["clippingconstant",{"_index":440,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["clippingenabled",{"_index":2094,"title":{},"body":{"classes/StateManager.html":{}}}],["clippingopeningangle",{"_index":1649,"title":{},"body":{"classes/PresetView.html":{}}}],["clippingsetting",{"_index":1652,"title":{},"body":{"classes/PresetView.html":{},"miscellaneous/enumerations.html":{}}}],["clippingsetting.notforced",{"_index":1666,"title":{},"body":{"classes/PresetView.html":{}}}],["clippingstartangle",{"_index":1650,"title":{},"body":{"classes/PresetView.html":{}}}],["clone",{"_index":1278,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cloned",{"_index":127,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["close",{"_index":3184,"title":{},"body":{"changelog.html":{}}}],["closes",{"_index":3003,"title":{},"body":{"changelog.html":{}}}],["closest",{"_index":2073,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":3117,"title":{},"body":{"changelog.html":{}}}],["clusters",{"_index":3196,"title":{},"body":{"changelog.html":{}}}],["cms",{"_index":546,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["cmsloader",{"_index":3335,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["cmsobjects",{"_index":541,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"changelog.html":{},"coverage.html":{}}}],["code",{"_index":3053,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["col",{"_index":2200,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["collection",{"_index":627,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["collection's",{"_index":3174,"title":{},"body":{"changelog.html":{}}}],["collection.name",{"_index":1229,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectioncolor",{"_index":616,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/PhoenixUI.html":{}}}],["collectioncolor(collectionname",{"_index":623,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectioncolor?.gethexstring",{"_index":786,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectioncolorrandom",{"_index":617,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectioncolorrandom(collectionname",{"_index":631,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectionfolder",{"_index":701,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionfolder.addchild('color",{"_index":783,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionfolder.name",{"_index":781,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionname",{"_index":628,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["collections",{"_index":1152,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/RKHelper.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collideparticles",{"_index":478,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["colliding",{"_index":504,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["collision",{"_index":229,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collisionduration",{"_index":224,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["collison",{"_index":501,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["color",{"_index":167,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["color(0x2194ce",{"_index":3595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xff0000",{"_index":3594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffd166",{"_index":3596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xfff69a",{"_index":3599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffffff",{"_index":480,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["color(color",{"_index":2201,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["color)?.set(color",{"_index":664,"title":{},"body":{"classes/ColorManager.html":{}}}],["color)?.set(math.random",{"_index":665,"title":{},"body":{"classes/ColorManager.html":{}}}],["colorbymomentum",{"_index":693,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbymomentum(minormax",{"_index":749,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoption",{"_index":709,"title":{},"body":{"classes/ColorOptions.html":{},"miscellaneous/typealiases.html":{}}}],["colorbyoption.initialize",{"_index":800,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoption.name",{"_index":806,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionkeys",{"_index":704,"title":{},"body":{"classes/ColorOptions.html":{},"miscellaneous/enumerations.html":{}}}],["colorbyoptionkeys.charge",{"_index":711,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionkeys.mom",{"_index":718,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionkeys.vertex",{"_index":723,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptions",{"_index":686,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude",{"_index":703,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude.includes(colorbyoption.key",{"_index":797,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude?.length",{"_index":794,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colored",{"_index":771,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorfortracksvertex",{"_index":673,"title":{},"body":{"classes/ColorManager.html":{}}}],["coloring",{"_index":615,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["colormanager",{"_index":613,"title":{"classes/ColorManager.html":{}},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"coverage.html":{}}}],["colorobjectsbyproperty",{"_index":618,"title":{},"body":{"classes/ColorManager.html":{}}}],["colorobjectsbyproperty(color",{"_index":634,"title":{},"body":{"classes/ColorManager.html":{}}}],["coloroptions",{"_index":680,"title":{"classes/ColorOptions.html":{}},"body":{"classes/ColorOptions.html":{},"coverage.html":{}}}],["coloroptionsfolder",{"_index":687,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorrepresentation",{"_index":2178,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["colors",{"_index":729,"title":{},"body":{"classes/ColorOptions.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["colortracksbyvertex",{"_index":619,"title":{},"body":{"classes/ColorManager.html":{}}}],["colortracksbyvertex(collectionname",{"_index":645,"title":{},"body":{"classes/ColorManager.html":{}}}],["colour",{"_index":2765,"title":{},"body":{"interfaces/Window.html":{}}}],["combine",{"_index":3086,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":2859,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":2858,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":1590,"title":{},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["complete",{"_index":2737,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["completely",{"_index":3344,"title":{},"body":{"changelog.html":{}}}],["completes",{"_index":432,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["component",{"_index":2949,"title":{},"body":{"changelog.html":{}}}],["components",{"_index":3400,"title":{},"body":{"changelog.html":{}}}],["composer",{"_index":1038,"title":{},"body":{"classes/EffectsManager.html":{}}}],["compound",{"_index":3074,"title":{},"body":{"changelog.html":{}}}],["computed",{"_index":1246,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["coner",{"_index":3048,"title":{},"body":{"changelog.html":{}}}],["config",{"_index":1472,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["config.group",{"_index":849,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{}}}],["config.hidden",{"_index":850,"title":{},"body":{"classes/ColorOptions.html":{}}}],["config.onchange",{"_index":1538,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['color",{"_index":1534,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['ischecked",{"_index":1530,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['value",{"_index":1536,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.setenablemax?.(config?.['enablemax",{"_index":1542,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.setenablemin?.(config?.['enablemin",{"_index":1541,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.type",{"_index":1527,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['color",{"_index":1531,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['highvalue",{"_index":1540,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['ischecked",{"_index":1529,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['value",{"_index":1535,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configactive",{"_index":1434,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configbutton",{"_index":3542,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configcheckbox",{"_index":3545,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configcolor",{"_index":3546,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configfile",{"_index":3616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configfunctions",{"_index":1628,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["configlabel",{"_index":3547,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configrangeslider",{"_index":3548,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configs",{"_index":767,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["configselect",{"_index":3549,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configslength",{"_index":1517,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configslider",{"_index":3550,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configstate",{"_index":1557,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['label",{"_index":1564,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['type",{"_index":1562,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate[prop",{"_index":1567,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configurable",{"_index":920,"title":{},"body":{"classes/CoordinateHelper.html":{},"interfaces/PhoenixUI.html":{}}}],["configuration",{"_index":851,"title":{"interfaces/Configuration.html":{}},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["configuration.allowurloptions",{"_index":2611,"title":{},"body":{"interfaces/Window.html":{}}}],["configurations",{"_index":737,"title":{},"body":{"classes/ColorOptions.html":{}}}],["configure",{"_index":132,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["console",{"_index":2613,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error",{"_index":1513,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.error('could",{"_index":2423,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.error('error",{"_index":1920,"title":{},"body":{"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{}}}],["console.error(`${xrtype.touppercase",{"_index":2832,"title":{},"body":{"classes/XRManager.html":{}}}],["console.log",{"_index":2395,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["console.log('let",{"_index":3625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('loading",{"_index":2402,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.log('opening",{"_index":2414,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.log('setting",{"_index":2400,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.log('warning",{"_index":2398,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.warn('exception",{"_index":3602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":270,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":441,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["constructing",{"_index":2198,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["constructor(camera",{"_index":1046,"title":{},"body":{"classes/EffectsManager.html":{}}}],["constructor(colormanager",{"_index":700,"title":{},"body":{"classes/ColorOptions.html":{}}}],["constructor(configuration",{"_index":2594,"title":{},"body":{"interfaces/Window.html":{}}}],["constructor(eventdisplay",{"_index":2344,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["constructor(field",{"_index":991,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(name",{"_index":1450,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["constructor(params",{"_index":2174,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["constructor(private",{"_index":650,"title":{},"body":{"classes/ColorManager.html":{},"classes/XRManager.html":{}}}],["constructor(public",{"_index":212,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["constructor(scene",{"_index":43,"title":{},"body":{"classes/ARManager.html":{}}}],["constructor(scenemanager",{"_index":620,"title":{},"body":{"classes/ColorManager.html":{}}}],["constructor(sessiontype",{"_index":2815,"title":{},"body":{"classes/XRManager.html":{}}}],["constructor(value",{"_index":197,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["containing",{"_index":88,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["containingevent",{"_index":2741,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":1803,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":1164,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{}}}],["containsobject",{"_index":1776,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":1800,"title":{},"body":{"classes/RendererManager.html":{}}}],["content",{"_index":2671,"title":{},"body":{"interfaces/Window.html":{}}}],["contents",{"_index":3644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contenttype",{"_index":3607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continue",{"_index":1740,"title":{},"body":{"classes/RKHelper.html":{}}}],["contributors",{"_index":3537,"title":{},"body":{"properties.html":{}}}],["controller",{"_index":2492,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["controller1",{"_index":2484,"title":{},"body":{"classes/VRManager.html":{}}}],["controller2",{"_index":2485,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip1",{"_index":2486,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip2",{"_index":2487,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory",{"_index":2533,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip1",{"_index":2537,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip2",{"_index":2542,"title":{},"body":{"classes/VRManager.html":{}}}],["controllers",{"_index":2526,"title":{},"body":{"classes/VRManager.html":{}}}],["controls",{"_index":1138,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["controlsmanager",{"_index":3458,"title":{},"body":{"coverage.html":{}}}],["conventional",{"_index":2857,"title":{},"body":{"changelog.html":{}}}],["conversions",{"_index":898,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["convert",{"_index":937,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["coordinate",{"_index":897,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["coordinatehelper",{"_index":893,"title":{"classes/CoordinateHelper.html":{}},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{},"coverage.html":{}}}],["coords",{"_index":918,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["copy",{"_index":1697,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["copy(new",{"_index":2845,"title":{},"body":{"classes/XRManager.html":{}}}],["correct",{"_index":3352,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":2925,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":344,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["counter",{"_index":2181,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["coverage",{"_index":3414,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":423,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["cpu",{"_index":3284,"title":{},"body":{"changelog.html":{}}}],["create",{"_index":49,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":139,"title":{},"body":{"classes/ARManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["creating",{"_index":2176,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["cross(b_last",{"_index":1294,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cross(b_middle",{"_index":1284,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["curently",{"_index":1193,"title":{},"body":{"classes/ExportManager.html":{}}}],["curp",{"_index":2281,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["current",{"_index":121,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["currently",{"_index":92,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/ExportManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["currentxrsession",{"_index":27,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["custom",{"_index":642,"title":{},"body":{"classes/ColorManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["customcheck",{"_index":636,"title":{},"body":{"classes/ColorManager.html":{}}}],["customcheck(object.userdata",{"_index":654,"title":{},"body":{"classes/ColorManager.html":{}}}],["customize",{"_index":2592,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":973,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{},"coverage.html":{}}}],["cutpassed",{"_index":987,"title":{},"body":{"classes/Cut.html":{}}}],["cutpassed(value",{"_index":1013,"title":{},"body":{"classes/Cut.html":{}}}],["cuts",{"_index":1603,"title":{},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["cycle",{"_index":2951,"title":{},"body":{"changelog.html":{}}}],["d0",{"_index":1760,"title":{},"body":{"classes/RKHelper.html":{}}}],["d207bad",{"_index":3280,"title":{},"body":{"changelog.html":{}}}],["d2874b8",{"_index":3266,"title":{},"body":{"changelog.html":{}}}],["d2c02d5",{"_index":2969,"title":{},"body":{"changelog.html":{}}}],["d2e0547",{"_index":3148,"title":{},"body":{"changelog.html":{}}}],["d3920c4",{"_index":3375,"title":{},"body":{"changelog.html":{}}}],["d4866ea",{"_index":2975,"title":{},"body":{"changelog.html":{}}}],["d4b62c2",{"_index":3051,"title":{},"body":{"changelog.html":{}}}],["d677089",{"_index":3300,"title":{},"body":{"changelog.html":{}}}],["d90e3a6",{"_index":3301,"title":{},"body":{"changelog.html":{}}}],["da3ead5",{"_index":3357,"title":{},"body":{"changelog.html":{}}}],["dark",{"_index":879,"title":{},"body":{"interfaces/Configuration.html":{}}}],["dat.gui",{"_index":873,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"dependencies.html":{}}}],["data",{"_index":256,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"interfaces/PhoenixUI.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.json",{"_index":3510,"title":{},"body":{"index.html":{}}}],["datguimenuui",{"_index":3471,"title":{},"body":{"coverage.html":{}}}],["db261a6",{"_index":3311,"title":{},"body":{"changelog.html":{}}}],["db3ca8b",{"_index":3187,"title":{},"body":{"changelog.html":{}}}],["dc05ed9",{"_index":3312,"title":{},"body":{"changelog.html":{}}}],["dc140dd",{"_index":3333,"title":{},"body":{"changelog.html":{}}}],["dc5d489",{"_index":3324,"title":{},"body":{"changelog.html":{}}}],["dc7d74a",{"_index":3054,"title":{},"body":{"changelog.html":{}}}],["dcb4c88",{"_index":2903,"title":{},"body":{"changelog.html":{}}}],["dcf6cec",{"_index":3355,"title":{},"body":{"changelog.html":{}}}],["debug",{"_index":3103,"title":{},"body":{"changelog.html":{}}}],["debugging",{"_index":3113,"title":{},"body":{"changelog.html":{}}}],["declare",{"_index":2584,"title":{},"body":{"interfaces/Window.html":{}}}],["default",{"_index":57,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["defaultanimationpresets",{"_index":3474,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultapplymaxvalue",{"_index":978,"title":{},"body":{"classes/Cut.html":{}}}],["defaultapplyminvalue",{"_index":979,"title":{},"body":{"classes/Cut.html":{}}}],["defaulteventfile",{"_index":855,"title":{},"body":{"interfaces/Configuration.html":{}}}],["defaulteventpath",{"_index":2355,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaulteventtype",{"_index":2352,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaultmaxvalue",{"_index":980,"title":{},"body":{"classes/Cut.html":{}}}],["defaultminvalue",{"_index":981,"title":{},"body":{"classes/Cut.html":{}}}],["defaultrenderpass",{"_index":1039,"title":{},"body":{"classes/EffectsManager.html":{}}}],["defaults",{"_index":1895,"title":{},"body":{"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{}}}],["defaultview",{"_index":856,"title":{},"body":{"interfaces/Configuration.html":{},"changelog.html":{}}}],["define",{"_index":1235,"title":{},"body":{"classes/Field.html":{},"classes/PresetView.html":{},"index.html":{}}}],["defined",{"_index":47,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["defining",{"_index":2760,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":939,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["delete",{"_index":1514,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["dependencies",{"_index":3479,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":2998,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":3411,"title":{},"body":{"changelog.html":{}}}],["depthpackingstrategies",{"_index":890,"title":{},"body":{"interfaces/Configuration.html":{}}}],["depthtest",{"_index":1610,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["descendants",{"_index":1493,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["describe",{"_index":1655,"title":{},"body":{"classes/PresetView.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"properties.html":{}}}],["desired",{"_index":1150,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":290,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"index.html":{}}}],["determine",{"_index":3049,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":3022,"title":{},"body":{"changelog.html":{}}}],["df425ee",{"_index":3134,"title":{},"body":{"changelog.html":{}}}],["df9ce07",{"_index":3115,"title":{},"body":{"changelog.html":{}}}],["dfbc6a2",{"_index":3009,"title":{},"body":{"changelog.html":{}}}],["dfe8e8d",{"_index":3099,"title":{},"body":{"changelog.html":{}}}],["dflt_colors",{"_index":2713,"title":{},"body":{"interfaces/Window.html":{}}}],["dialog",{"_index":3213,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":1111,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["differently",{"_index":3093,"title":{},"body":{"changelog.html":{}}}],["dimensional",{"_index":523,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["dir",{"_index":1333,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["dir.x",{"_index":2293,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["dir.y",{"_index":2292,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["direction",{"_index":1326,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["directionallight",{"_index":1990,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":2000,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directly",{"_index":3517,"title":{},"body":{"index.html":{}}}],["directory",{"_index":3521,"title":{},"body":{"index.html":{}}}],["disable",{"_index":1966,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["disabled",{"_index":1052,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disablehighlighting",{"_index":1937,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["disableselecting",{"_index":1938,"title":{},"body":{"classes/SelectionManager.html":{}}}],["disappearing",{"_index":2994,"title":{},"body":{"changelog.html":{}}}],["discard",{"_index":2304,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["display",{"_index":853,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["display#readme",{"_index":3531,"title":{},"body":{"properties.html":{}}}],["display's",{"_index":258,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["display.ts",{"_index":2571,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["displayed",{"_index":1155,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displaying",{"_index":3027,"title":{},"body":{"changelog.html":{}}}],["displayusage",{"_index":3506,"title":{},"body":{"index.html":{}}}],["dist/bundle",{"_index":3520,"title":{},"body":{"index.html":{}}}],["distance",{"_index":442,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{}}}],["distancefromorigin",{"_index":475,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["divide",{"_index":3160,"title":{},"body":{"changelog.html":{}}}],["dividescalar(previousscale",{"_index":379,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["docs",{"_index":2970,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":2010,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["document.body",{"_index":165,"title":{},"body":{"classes/ARManager.html":{},"classes/RendererManager.html":{}}}],["document.body.style.removeproperty('background",{"_index":176,"title":{},"body":{"classes/ARManager.html":{}}}],["document.body.style.setproperty('background",{"_index":166,"title":{},"body":{"classes/ARManager.html":{}}}],["document.createelement('a",{"_index":3631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('input",{"_index":3611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('script",{"_index":1911,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.getelementbyid(elementid",{"_index":1854,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.getelementsbytagname('head')[0",{"_index":1899,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.queryselectorall",{"_index":1907,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["documentation",{"_index":3200,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["documented",{"_index":2856,"title":{},"body":{"changelog.html":{}}}],["doesn't",{"_index":2460,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["dof",{"_index":1682,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["dom",{"_index":63,"title":{},"body":{"classes/ARManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["domoverlay",{"_index":163,"title":{},"body":{"classes/ARManager.html":{}}}],["don't",{"_index":1698,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["dosplay",{"_index":3177,"title":{},"body":{"changelog.html":{}}}],["doubleside",{"_index":558,"title":{},"body":{"classes/CMSObjects.html":{}}}],["doublesided",{"_index":2658,"title":{},"body":{"interfaces/Window.html":{}}}],["download",{"_index":3638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dparams",{"_index":1712,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["dparams[0",{"_index":1761,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[1",{"_index":1763,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[2",{"_index":1764,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[3",{"_index":1765,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[4",{"_index":819,"title":{},"body":{"classes/ColorOptions.html":{},"classes/RKHelper.html":{}}}],["draw",{"_index":1140,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["drawing",{"_index":3186,"title":{},"body":{"changelog.html":{}}}],["drawrange",{"_index":343,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["driven",{"_index":3500,"title":{},"body":{"index.html":{}}}],["drop",{"_index":3282,"title":{},"body":{"changelog.html":{}}}],["duration",{"_index":230,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["dynamically",{"_index":1886,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["e",{"_index":3615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.target?.files[0",{"_index":3617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e07725a",{"_index":3147,"title":{},"body":{"changelog.html":{}}}],["e10a68d",{"_index":3303,"title":{},"body":{"changelog.html":{}}}],["e152933",{"_index":2928,"title":{},"body":{"changelog.html":{}}}],["e297c98",{"_index":3353,"title":{},"body":{"changelog.html":{}}}],["e2e",{"_index":2920,"title":{},"body":{"changelog.html":{}}}],["e6f69a0",{"_index":3298,"title":{},"body":{"changelog.html":{}}}],["e96136b",{"_index":3295,"title":{},"body":{"changelog.html":{}}}],["e9f1bc9",{"_index":3327,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":233,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["easily",{"_index":1642,"title":{},"body":{"classes/PresetView.html":{}}}],["easing",{"_index":232,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["easing.cubic.out",{"_index":288,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["easing.linear.none",{"_index":269,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["edcd567",{"_index":3189,"title":{},"body":{"changelog.html":{}}}],["edges",{"_index":603,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":556,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(boxbuffer",{"_index":605,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edit",{"_index":386,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["edm4hepjsonloader",{"_index":3440,"title":{},"body":{"coverage.html":{}}}],["edward's",{"_index":3341,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":1056,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer",{"_index":1054,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer(renderer",{"_index":1084,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effects",{"_index":1032,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["effectsmanager",{"_index":1030,"title":{"classes/EffectsManager.html":{}},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["effectsrender",{"_index":1043,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectsrender(scene",{"_index":1070,"title":{},"body":{"classes/EffectsManager.html":{}}}],["electrons",{"_index":3029,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":872,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["elementid",{"_index":857,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{},"index.html":{}}}],["elements",{"_index":1066,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["embed",{"_index":2349,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":2365,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["enable",{"_index":62,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":1051,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["enabledatguimenu",{"_index":858,"title":{},"body":{"interfaces/Configuration.html":{}}}],["enabledomoverlay",{"_index":19,"title":{},"body":{"classes/ARManager.html":{}}}],["enableeventdisplayconsole",{"_index":2759,"title":{},"body":{"interfaces/Window.html":{}}}],["enablehighlighting",{"_index":1939,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enablekeyboardcontrols",{"_index":2794,"title":{},"body":{"interfaces/Window.html":{}}}],["enablemaxcut",{"_index":988,"title":{},"body":{"classes/Cut.html":{}}}],["enablemaxcut(check",{"_index":1016,"title":{},"body":{"classes/Cut.html":{}}}],["enablemincut",{"_index":989,"title":{},"body":{"classes/Cut.html":{}}}],["enablemincut(check",{"_index":1019,"title":{},"body":{"classes/Cut.html":{}}}],["enables",{"_index":2758,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":1940,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":2782,"title":{},"body":{"interfaces/Window.html":{}}}],["enabling",{"_index":1962,"title":{},"body":{"classes/SelectionManager.html":{}}}],["end",{"_index":120,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["end.chain(startclone",{"_index":310,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["ended",{"_index":316,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["ends",{"_index":98,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["endxr(xrsessiontype",{"_index":2619,"title":{},"body":{"interfaces/Window.html":{}}}],["endxrsession",{"_index":38,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["energy",{"_index":1683,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["entries",{"_index":1349,"title":{},"body":{"classes/InfoLogger.html":{}}}],["entry",{"_index":1355,"title":{},"body":{"classes/InfoLogger.html":{}}}],["enum",{"_index":778,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PresetView.html":{},"classes/XRManager.html":{}}}],["enumerable",{"_index":2313,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["enumerations",{"_index":3494,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":772,"title":{},"body":{"classes/ColorOptions.html":{}}}],["equatorial",{"_index":913,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["error",{"_index":1302,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["error_estimate",{"_index":1304,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["errors",{"_index":2441,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["estimate",{"_index":1303,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["et",{"_index":1684,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["eta",{"_index":924,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["eta/phi",{"_index":927,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta=0",{"_index":959,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian",{"_index":901,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian(radius",{"_index":923,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta",{"_index":902,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta(eta",{"_index":935,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta~infinite",{"_index":965,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etc",{"_index":1605,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["event",{"_index":228,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["event's",{"_index":2113,"title":{},"body":{"classes/StateManager.html":{}}}],["event.clientx",{"_index":2063,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":2066,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":2058,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_type_colors",{"_index":560,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["event_data_type_colors.muonchambers",{"_index":594,"title":{},"body":{"classes/CMSObjects.html":{}}}],["eventdata",{"_index":323,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventdata.children",{"_index":1225,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.traverse((eventobject",{"_index":332,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventdataconfig",{"_index":1220,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":1227,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":1230,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataloader",{"_index":859,"title":{"interfaces/EventDataLoader.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"coverage.html":{},"index.html":{}}}],["eventdatatype",{"_index":1606,"title":{},"body":{"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["eventdisplay",{"_index":1812,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay.init(configuration",{"_index":3508,"title":{},"body":{"index.html":{}}}],["eventdisplay.loadobjgeometry",{"_index":3512,"title":{},"body":{"index.html":{}}}],["eventdisplay.parsephoenixevents(res",{"_index":3511,"title":{},"body":{"index.html":{}}}],["eventfile",{"_index":891,"title":{},"body":{"interfaces/Configuration.html":{}}}],["eventkey",{"_index":2644,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":2622,"title":{},"body":{"interfaces/Window.html":{}}}],["eventmetadata",{"_index":2095,"title":{},"body":{"classes/StateManager.html":{}}}],["eventnumber",{"_index":2112,"title":{},"body":{"classes/StateManager.html":{}}}],["eventobject",{"_index":328,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry",{"_index":333,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.attributes['position'].array",{"_index":390,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.boundingsphere.center",{"_index":385,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.computeboundingsphere",{"_index":392,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.deleteattribute('position",{"_index":391,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.drawrange",{"_index":361,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.drawrange.count",{"_index":359,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.setdrawrange(0",{"_index":360,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry?.attributes?.position?.count",{"_index":347,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material",{"_index":454,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material.clippingplanes",{"_index":455,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material.progress",{"_index":353,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.name",{"_index":338,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.position",{"_index":378,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.position.equals",{"_index":383,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.setscalar(updatedscale.x",{"_index":373,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.x",{"_index":366,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.y",{"_index":367,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.z",{"_index":368,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.visible",{"_index":399,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobjecttween",{"_index":354,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobjecttween.oncomplete",{"_index":356,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["events",{"_index":1162,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["eventsdata",{"_index":1163,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["eventtype",{"_index":892,"title":{},"body":{"interfaces/Configuration.html":{}}}],["example",{"_index":1619,"title":{},"body":{"interfaces/PhoenixUI.html":{},"index.html":{}}}],["examples",{"_index":3523,"title":{},"body":{"index.html":{}}}],["except",{"_index":3058,"title":{},"body":{"changelog.html":{}}}],["exception",{"_index":3601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existing",{"_index":2637,"title":{},"body":{"interfaces/Window.html":{}}}],["exists",{"_index":345,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/PhoenixUI.html":{},"classes/ScriptLoader.html":{}}}],["experiment",{"_index":922,"title":{},"body":{"classes/CoordinateHelper.html":{},"interfaces/EventDataLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{},"properties.html":{}}}],["experimental",{"_index":933,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["experimentinfo",{"_index":2468,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["experiments",{"_index":3350,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":151,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["exported",{"_index":1181,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":1201,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":1214,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":1203,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":1167,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":2689,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":1169,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":1174,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":1176,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["exportscenetoobj",{"_index":1170,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":1183,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":2676,"title":{},"body":{"interfaces/Window.html":{}}}],["extend",{"_index":3090,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":14,"title":{},"body":{"classes/ARManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{}}}],["extension",{"_index":3183,"title":{},"body":{"changelog.html":{}}}],["external",{"_index":1887,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["externalize",{"_index":2997,"title":{},"body":{"changelog.html":{}}}],["extraanimationsphereduration",{"_index":320,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["extract",{"_index":2428,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["extrapolate",{"_index":1732,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolated",{"_index":1735,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions",{"_index":1727,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions(track",{"_index":1730,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolating",{"_index":334,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["extrapolation",{"_index":1739,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["extrapolationlimit",{"_index":1728,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["extrapolationlimit(pos",{"_index":1736,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolator",{"_index":1738,"title":{},"body":{"classes/RKHelper.html":{}}}],["f1d2cef",{"_index":3153,"title":{},"body":{"changelog.html":{}}}],["f2376cc",{"_index":2979,"title":{},"body":{"changelog.html":{}}}],["f279898",{"_index":3209,"title":{},"body":{"changelog.html":{}}}],["f2ed0a3",{"_index":2987,"title":{},"body":{"changelog.html":{}}}],["f40beac",{"_index":2910,"title":{},"body":{"changelog.html":{}}}],["f41920b",{"_index":3132,"title":{},"body":{"changelog.html":{}}}],["f4c2e31",{"_index":3318,"title":{},"body":{"changelog.html":{}}}],["f7cd6b4",{"_index":3238,"title":{},"body":{"changelog.html":{}}}],["f87c587",{"_index":3386,"title":{},"body":{"changelog.html":{}}}],["f8a0080",{"_index":3198,"title":{},"body":{"changelog.html":{}}}],["f94c0e4",{"_index":3322,"title":{},"body":{"changelog.html":{}}}],["f97e615",{"_index":2905,"title":{},"body":{"changelog.html":{}}}],["faces",{"_index":565,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.map((face",{"_index":567,"title":{},"body":{"classes/CMSObjects.html":{}}}],["facing",{"_index":2565,"title":{},"body":{"classes/VRManager.html":{}}}],["factor",{"_index":2732,"title":{},"body":{"interfaces/Window.html":{}}}],["failed",{"_index":3380,"title":{},"body":{"changelog.html":{}}}],["fallback",{"_index":2356,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["false",{"_index":107,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["fbd584e",{"_index":3290,"title":{},"body":{"changelog.html":{}}}],["fc4ae96",{"_index":2877,"title":{},"body":{"changelog.html":{}}}],["fdd492a",{"_index":3107,"title":{},"body":{"changelog.html":{}}}],["fe0b2e6",{"_index":3306,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":105,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["fetch",{"_index":2391,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch('path/to/event",{"_index":3509,"title":{},"body":{"index.html":{}}}],["fetch(fileurl)).arraybuffer",{"_index":2435,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(fileurl)).json",{"_index":2432,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(fileurl)).text",{"_index":2426,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(this.urloptions.get('config",{"_index":2406,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["ff0000",{"_index":727,"title":{},"body":{"classes/ColorOptions.html":{}}}],["ff10477",{"_index":3365,"title":{},"body":{"changelog.html":{}}}],["ff666e2",{"_index":3220,"title":{},"body":{"changelog.html":{}}}],["ff77aaa",{"_index":2926,"title":{},"body":{"changelog.html":{}}}],["ffffff",{"_index":2750,"title":{},"body":{"interfaces/Window.html":{}}}],["fh",{"_index":1309,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fh2",{"_index":1310,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field",{"_index":982,"title":{"classes/Field.html":{}},"body":{"classes/Cut.html":{},"classes/Field.html":{},"coverage.html":{}}}],["field.get(pos1",{"_index":1281,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(pos2",{"_index":1291,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(state.pos",{"_index":1267,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file.readobject(objectname",{"_index":2723,"title":{},"body":{"interfaces/Window.html":{}}}],["filebuffer",{"_index":2434,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filedata",{"_index":2425,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":2438,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["filename.endswith('.json",{"_index":2449,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filename.endswith('.xml",{"_index":2454,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filename.startswith('jivexml",{"_index":2455,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filepath",{"_index":3640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filereader",{"_index":3619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":2370,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["fileswithdata",{"_index":2437,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["fileswithdata[filepath",{"_index":3643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fileurl",{"_index":2363,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filter",{"_index":993,"title":{},"body":{"classes/Cut.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["filter((filename",{"_index":2448,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filter((val",{"_index":2050,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":994,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":976,"title":{},"body":{"classes/Cut.html":{}}}],["finally",{"_index":2411,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["finalposition",{"_index":2275,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["finalposition.w",{"_index":2283,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["finalposition.xy",{"_index":2282,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["find",{"_index":1478,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{}}}],["finding",{"_index":1978,"title":{},"body":{"classes/SelectionManager.html":{}}}],["findintree",{"_index":1443,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintree(name",{"_index":1476,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate",{"_index":1444,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate(name",{"_index":1481,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["finished",{"_index":1398,"title":{},"body":{"classes/LoadingManager.html":{}}}],["first",{"_index":318,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["firsttween",{"_index":529,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["firsttween.start",{"_index":540,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["fix",{"_index":2909,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":1792,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["fixedoverlay",{"_index":1771,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":2784,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["fixing",{"_index":3334,"title":{},"body":{"changelog.html":{}}}],["fixoverlayview(fixed",{"_index":2785,"title":{},"body":{"interfaces/Window.html":{}}}],["flat",{"_index":2260,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["float",{"_index":2256,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array([].concat(...reachedhits",{"_index":418,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["float32array(allfacepositions",{"_index":590,"title":{},"body":{"classes/CMSObjects.html":{}}}],["float32array(this.colors",{"_index":2222,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.counter",{"_index":2223,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.next",{"_index":2219,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.positions",{"_index":2217,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.previous",{"_index":2218,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.side",{"_index":2220,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["floor",{"_index":2515,"title":{},"body":{"classes/VRManager.html":{}}}],["folder",{"_index":706,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["folders",{"_index":1632,"title":{},"body":{"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["force",{"_index":877,"title":{},"body":{"interfaces/Configuration.html":{}}}],["forcecolourtheme",{"_index":860,"title":{},"body":{"interfaces/Configuration.html":{}}}],["foreach((filename",{"_index":2450,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["foreach((groupname",{"_index":182,"title":{},"body":{"classes/ARManager.html":{}}}],["form",{"_index":3216,"title":{},"body":{"changelog.html":{}}}],["format",{"_index":1177,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["formatted",{"_index":3394,"title":{},"body":{"changelog.html":{}}}],["forming",{"_index":235,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["found",{"_index":1480,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["fragment",{"_index":2301,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["fragmentshader",{"_index":2310,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["front",{"_index":569,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_1",{"_index":575,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_2",{"_index":571,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_3",{"_index":572,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_4",{"_index":574,"title":{},"body":{"classes/CMSObjects.html":{}}}],["full",{"_index":2932,"title":{},"body":{"changelog.html":{}}}],["function",{"_index":94,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":1139,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":259,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/PhoenixUI.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["general",{"_index":3096,"title":{},"body":{"changelog.html":{}}}],["generalize",{"_index":3164,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":1211,"title":{},"body":{"classes/ExportManager.html":{},"index.html":{}}}],["generation",{"_index":313,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["generic",{"_index":2980,"title":{},"body":{"changelog.html":{}}}],["geom",{"_index":2747,"title":{},"body":{"interfaces/Window.html":{}}}],["geometrical",{"_index":3194,"title":{},"body":{"changelog.html":{}}}],["geometries",{"_index":1144,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["geometries.children.foreach((object",{"_index":1231,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":2779,"title":{},"body":{"interfaces/Window.html":{}}}],["geometriesconfig",{"_index":1222,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":1232,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":342,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["geometry.computeboundingsphere",{"_index":419,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometry.setattribute",{"_index":417,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometry/event",{"_index":2775,"title":{},"body":{"interfaces/Window.html":{}}}],["geometryposcount",{"_index":346,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometryuiparameters",{"_index":3551,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["get(field",{"_index":1236,"title":{},"body":{"classes/Field.html":{}}}],["getactiveobjectid",{"_index":1941,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcamera",{"_index":2844,"title":{},"body":{"classes/XRManager.html":{}}}],["getcameragroup",{"_index":39,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["getcameragroup(camera",{"_index":122,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["getcameratween",{"_index":266,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["getcollection",{"_index":1115,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["getcollection(collectionname",{"_index":1147,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":1116,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["getcompound",{"_index":3097,"title":{},"body":{"changelog.html":{}}}],["getelementbyid('embedmenu",{"_index":2474,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["getelementbyid('three",{"_index":2011,"title":{},"body":{"classes/SelectionManager.html":{}}}],["getelementbyid(singleid",{"_index":2480,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["geteventdatatypefolder",{"_index":1600,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["geteventdatatypefolder(typename",{"_index":1633,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["geteventmetadata",{"_index":1117,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":1118,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["geteventslist(eventsdata",{"_index":1159,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["getfromlocalstorage",{"_index":3422,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethitspositions(positions",{"_index":524,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geticonurl",{"_index":1651,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologger",{"_index":2421,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["getinfologgerlist",{"_index":1345,"title":{},"body":{"classes/InfoLogger.html":{}}}],["getinstance",{"_index":2098,"title":{},"body":{"classes/StateManager.html":{}}}],["getlabelsobject",{"_index":1119,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["getlabeltitle",{"_index":2582,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getlabeltitle(eventdatatype",{"_index":2814,"title":{},"body":{"interfaces/Window.html":{}}}],["getloadingmanager",{"_index":2649,"title":{},"body":{"interfaces/Window.html":{}}}],["getlocalclipping",{"_index":1777,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmainrenderer",{"_index":1778,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmomentum",{"_index":694,"title":{},"body":{"classes/ColorOptions.html":{}}}],["getmomentum(objectparams",{"_index":759,"title":{},"body":{"classes/ColorOptions.html":{}}}],["getmuon",{"_index":3098,"title":{},"body":{"changelog.html":{}}}],["getmuonchamber",{"_index":549,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":550,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getnodestate",{"_index":1445,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["getobjectbyname(collectionname",{"_index":659,"title":{},"body":{"classes/ColorManager.html":{}}}],["getobjectbyname(scenemanager.event_data_id",{"_index":658,"title":{},"body":{"classes/ColorManager.html":{}}}],["getopeningclippingangle",{"_index":2099,"title":{},"body":{"classes/StateManager.html":{}}}],["getoverlayrenderer",{"_index":1779,"title":{},"body":{"classes/RendererManager.html":{}}}],["getprettyparams",{"_index":1677,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettyparams(params",{"_index":1686,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol",{"_index":1678,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol(param",{"_index":1690,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getrenderers",{"_index":1780,"title":{},"body":{"classes/RendererManager.html":{}}}],["getscene",{"_index":657,"title":{},"body":{"classes/ColorManager.html":{}}}],["getstartclippingangle",{"_index":2100,"title":{},"body":{"classes/StateManager.html":{}}}],["getstatemanager",{"_index":2650,"title":{},"body":{"interfaces/Window.html":{}}}],["getthreemanager",{"_index":2648,"title":{},"body":{"interfaces/Window.html":{}}}],["getting",{"_index":2852,"title":{"changelog.html":{},"index.html":{}},"body":{"changelog.html":{}}}],["gettrackswithrungekutta",{"_index":1729,"title":{},"body":{"classes/RKHelper.html":{}}}],["gettrackswithrungekutta(trackscollectionsevent",{"_index":1743,"title":{},"body":{"classes/RKHelper.html":{}}}],["getuimanager",{"_index":2160,"title":{},"body":{"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["geturloptions",{"_index":2339,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["geturloptionsmanager",{"_index":2652,"title":{},"body":{"interfaces/Window.html":{}}}],["getxrcamera",{"_index":40,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["git",{"_index":2874,"title":{},"body":{"changelog.html":{}}}],["git://github.com/hsf/phoenix.git",{"_index":3535,"title":{},"body":{"properties.html":{}}}],["given",{"_index":143,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Field.html":{},"classes/PresetView.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["giving",{"_index":1976,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["gl_fragcolor",{"_index":2305,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["gl_position",{"_index":2299,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["global",{"_index":2585,"title":{},"body":{"interfaces/Window.html":{}}}],["globalthis",{"_index":3297,"title":{},"body":{"changelog.html":{}}}],["gltf",{"_index":1212,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["gltfexporter",{"_index":1196,"title":{},"body":{"classes/ExportManager.html":{}}}],["go",{"_index":1701,"title":{},"body":{"classes/PrettySymbols.html":{},"interfaces/Window.html":{}}}],["graphic",{"_index":1136,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["graphicslibrary",{"_index":1126,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":2733,"title":{},"body":{"interfaces/Window.html":{}}}],["grid",{"_index":3234,"title":{},"body":{"changelog.html":{}}}],["group",{"_index":85,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["groupnotselected",{"_index":848,"title":{},"body":{"classes/ColorOptions.html":{}}}],["gui",{"_index":2471,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["guidelines",{"_index":2860,"title":{},"body":{"changelog.html":{}}}],["h",{"_index":1272,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h).cross(b_last",{"_index":1292,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h2",{"_index":1258,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h",{"_index":1259,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h).cross(b_middle",{"_index":1282,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["hand",{"_index":2517,"title":{},"body":{"classes/VRManager.html":{}}}],["handle",{"_index":2362,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["handlejivexmlevent",{"_index":2340,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlejivexmlevent(fileurl",{"_index":2361,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlejsonevent",{"_index":2341,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlejsonevent(fileurl",{"_index":2366,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlezipfileevents",{"_index":2342,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlezipfileevents(fileurl",{"_index":2367,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handling",{"_index":2940,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":3391,"title":{},"body":{"changelog.html":{}}}],["hasposition",{"_index":382,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["helper",{"_index":896,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["helper.ts",{"_index":895,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["helper.ts:13",{"_index":907,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:14",{"_index":1737,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:24",{"_index":1744,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:25",{"_index":936,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:35",{"_index":946,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:44",{"_index":1731,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:46",{"_index":944,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:65",{"_index":925,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:81",{"_index":915,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helpers/active",{"_index":1994,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["helpers/constants",{"_index":561,"title":{},"body":{"classes/CMSObjects.html":{}}}],["helpers/file",{"_index":1199,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["helpers/info",{"_index":1166,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["helpers/labels",{"_index":2583,"title":{},"body":{"interfaces/Window.html":{}}}],["helpers/pretty",{"_index":774,"title":{},"body":{"classes/ColorOptions.html":{},"classes/SelectionManager.html":{}}}],["helpers/zip",{"_index":2381,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["here",{"_index":940,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["hex",{"_index":629,"title":{},"body":{"classes/ColorManager.html":{}}}],["hide",{"_index":510,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["hideidswithurloption",{"_index":2343,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hideidswithurloption(urloptionwithids",{"_index":2371,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hidewidgets",{"_index":2350,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["hidewidgetsoptions",{"_index":2464,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hiding",{"_index":3325,"title":{},"body":{"changelog.html":{}}}],["hierarchy",{"_index":2656,"title":{},"body":{"interfaces/Window.html":{}}}],["high",{"_index":1839,"title":{},"body":{"classes/RendererManager.html":{}}}],["highlight",{"_index":1975,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":1064,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlightobject",{"_index":1942,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":1973,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highly",{"_index":3162,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["highvalue",{"_index":1539,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["hit",{"_index":388,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["hitlines",{"_index":3230,"title":{},"body":{"changelog.html":{}}}],["hits",{"_index":387,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["hitspositions",{"_index":410,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["hitspositions.filter((hitposition",{"_index":413,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["home",{"_index":3360,"title":{},"body":{"changelog.html":{}}}],["homepage",{"_index":3529,"title":{},"body":{"properties.html":{}}}],["hovered",{"_index":1065,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["hovering",{"_index":1951,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":2772,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["html2canvas",{"_index":3484,"title":{},"body":{"dependencies.html":{}}}],["htmlcanvaselement",{"_index":1825,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":1893,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["http://github.com/hsf/phoenix/tree/main/packages/phoenix",{"_index":3530,"title":{},"body":{"properties.html":{}}}],["httprequest",{"_index":2572,"title":{},"body":{"interfaces/Window.html":{}}}],["httprequest(url",{"_index":2710,"title":{},"body":{"interfaces/Window.html":{}}}],["https://en.wikipedia.org/wiki/pseudorapidity",{"_index":941,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["https://github.com/hsf/phoenix/graphs/contributors",{"_index":3538,"title":{},"body":{"properties.html":{}}}],["https://github.com/root",{"_index":2719,"title":{},"body":{"interfaces/Window.html":{}}}],["icon",{"_index":1435,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"changelog.html":{}}}],["id",{"_index":870,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":3415,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1898,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["ids",{"_index":2373,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["idstohide",{"_index":2477,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["idstohide.foreach((singleid",{"_index":2479,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["ig",{"_index":3276,"title":{},"body":{"changelog.html":{}}}],["ignore",{"_index":1532,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ignored",{"_index":1950,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":1930,"title":{},"body":{"classes/SelectionManager.html":{}}}],["immersive",{"_index":81,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["implement",{"_index":1591,"title":{},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["implementations",{"_index":2971,"title":{},"body":{"changelog.html":{}}}],["implementing",{"_index":1110,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["implicitly",{"_index":3407,"title":{},"body":{"changelog.html":{}}}],["import",{"_index":134,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{}}}],["importmanager",{"_index":3462,"title":{},"body":{"coverage.html":{}}}],["imports",{"_index":3010,"title":{},"body":{"changelog.html":{}}}],["improve",{"_index":2911,"title":{},"body":{"changelog.html":{}}}],["improvement",{"_index":3155,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":3125,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":3283,"title":{},"body":{"changelog.html":{}}}],["inbounds",{"_index":1330,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["include",{"_index":708,"title":{},"body":{"classes/ColorOptions.html":{},"index.html":{}}}],["included",{"_index":793,"title":{},"body":{"classes/ColorOptions.html":{},"index.html":{}}}],["including",{"_index":1192,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["increase",{"_index":3045,"title":{},"body":{"changelog.html":{}}}],["increases",{"_index":1395,"title":{},"body":{"classes/LoadingManager.html":{}}}],["increment",{"_index":996,"title":{},"body":{"classes/Cut.html":{}}}],["independent",{"_index":3501,"title":{},"body":{"index.html":{},"properties.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexincollection",{"_index":1121,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["indices",{"_index":2183,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["indices_array",{"_index":2184,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["infinity",{"_index":350,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["infologger",{"_index":1130,"title":{"classes/InfoLogger.html":{}},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infologgerlist",{"_index":1343,"title":{},"body":{"classes/InfoLogger.html":{}}}],["information",{"_index":1351,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["inherited",{"_index":86,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["init",{"_index":1781,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["init(camera",{"_index":1979,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":2601,"title":{},"body":{"interfaces/Window.html":{}}}],["init(elementid",{"_index":1809,"title":{},"body":{"classes/RendererManager.html":{}}}],["initchargecoloroptions",{"_index":695,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initcolorbyoptions",{"_index":696,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initial",{"_index":201,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["initialize",{"_index":714,"title":{},"body":{"classes/ColorOptions.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["initialized",{"_index":1953,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":2774,"title":{},"body":{"interfaces/Window.html":{}}}],["initializing",{"_index":1791,"title":{},"body":{"classes/RendererManager.html":{}}}],["initially",{"_index":2661,"title":{},"body":{"interfaces/Window.html":{}}}],["initiallyvisible",{"_index":2660,"title":{},"body":{"interfaces/Window.html":{}}}],["initmomcoloroptions",{"_index":697,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initrenderer",{"_index":1782,"title":{},"body":{"classes/RendererManager.html":{}}}],["initrenderer(elementid",{"_index":1813,"title":{},"body":{"classes/RendererManager.html":{}}}],["initxr(xrsessiontype",{"_index":2617,"title":{},"body":{"interfaces/Window.html":{}}}],["input",{"_index":1210,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["inputfile",{"_index":3610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.accept",{"_index":3613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.click",{"_index":3624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.onchange",{"_index":3614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.remove",{"_index":3622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.type",{"_index":3612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inside",{"_index":626,"title":{},"body":{"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["install",{"_index":3504,"title":{},"body":{"index.html":{}}}],["instance",{"_index":733,"title":{},"body":{"classes/ColorOptions.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["instanceof",{"_index":351,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["instantiate",{"_index":1200,"title":{},"body":{"classes/ExportManager.html":{}}}],["instead",{"_index":1516,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["int",{"_index":2255,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["int32array(this.track_id",{"_index":2221,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["integrator",{"_index":1257,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["interface",{"_index":217,"title":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["interfaces",{"_index":219,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["intersected",{"_index":1984,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":2026,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":2031,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata",{"_index":2037,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":2049,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":1943,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":1981,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":1983,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":2071,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":2074,"title":{},"body":{"classes/SelectionManager.html":{}}}],["interval",{"_index":2551,"title":{},"body":{"classes/VRManager.html":{}}}],["intervalid",{"_index":2552,"title":{},"body":{"classes/VRManager.html":{}}}],["intitialize",{"_index":2591,"title":{},"body":{"interfaces/Window.html":{}}}],["introduce",{"_index":3237,"title":{},"body":{"changelog.html":{}}}],["invisible",{"_index":394,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["io",{"_index":2924,"title":{},"body":{"changelog.html":{}}}],["isfixedoverlay",{"_index":1783,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":1931,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issues",{"_index":3052,"title":{},"body":{"changelog.html":{}}}],["istracksmaterial",{"_index":2173,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["it's",{"_index":1707,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["item",{"_index":1382,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"miscellaneous/variables.html":{}}}],["itemloaded",{"_index":1376,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemloaded(id",{"_index":1396,"title":{},"body":{"classes/LoadingManager.html":{}}}],["items",{"_index":436,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["itself",{"_index":1492,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["jasmine",{"_index":3331,"title":{},"body":{"changelog.html":{}}}],["jet",{"_index":364,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["jets",{"_index":2993,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["jive",{"_index":3039,"title":{},"body":{"changelog.html":{}}}],["jiveloader",{"_index":2453,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jiveloader.geteventdata",{"_index":2457,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jiveloader.process(fileswithdata[filename",{"_index":2456,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jivexml",{"_index":2354,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["jivexml_xxx_yyy.zip",{"_index":2462,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jivexmlloader",{"_index":2375,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["jixexml",{"_index":3206,"title":{},"body":{"changelog.html":{}}}],["join('\\n",{"_index":2300,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["js",{"_index":3489,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":1486,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["json.parse(fileswithdata[filename",{"_index":2452,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["json.parse(input",{"_index":2682,"title":{},"body":{"interfaces/Window.html":{}}}],["json.parse(json",{"_index":1553,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["json.stringify(jsonresult",{"_index":1217,"title":{},"body":{"classes/ExportManager.html":{}}}],["json.stringify(state",{"_index":2144,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata",{"_index":2146,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay",{"_index":2150,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['cameraposition",{"_index":2152,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['openingclippingangle",{"_index":2156,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['startclippingangle",{"_index":2154,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']['openingclippingangle",{"_index":2164,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']['startclippingangle",{"_index":2162,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['phoenixmenu",{"_index":2147,"title":{},"body":{"classes/StateManager.html":{}}}],["jsonobject",{"_index":1552,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['children",{"_index":1570,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['childrenactive",{"_index":1554,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['configs",{"_index":1558,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['togglestate",{"_index":1555,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonresult",{"_index":1215,"title":{},"body":{"classes/ExportManager.html":{}}}],["jspdf",{"_index":3492,"title":{},"body":{"dependencies.html":{}}}],["jsroot",{"_index":2573,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{},"dependencies.html":{}}}],["jsroot/geom",{"_index":2576,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot/io",{"_index":2578,"title":{},"body":{"interfaces/Window.html":{}}}],["jsrooteventloader",{"_index":2930,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["jsrootsettings",{"_index":2575,"title":{},"body":{"interfaces/Window.html":{}}}],["jsrootsettings.usestamp",{"_index":2721,"title":{},"body":{"interfaces/Window.html":{}}}],["jszip",{"_index":3487,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["k1",{"_index":1269,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k1.clone().sub(k2).sub(k3).add(k4",{"_index":1296,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k2",{"_index":1262,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k3",{"_index":1263,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4",{"_index":1264,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4).lpnorm",{"_index":1297,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["keep",{"_index":3241,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":710,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["keyboard",{"_index":2615,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["keys",{"_index":777,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"miscellaneous/enumerations.html":{}}}],["kutta",{"_index":1241,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["kutta.ts",{"_index":1234,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["kutta.ts:12",{"_index":1882,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:126",{"_index":1881,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:168",{"_index":2085,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:170",{"_index":2081,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:172",{"_index":2083,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:174",{"_index":2086,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:176",{"_index":2089,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:178",{"_index":2087,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:180",{"_index":2082,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:182",{"_index":2084,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:192",{"_index":1237,"title":{},"body":{"classes/Field.html":{}}}],["label",{"_index":785,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["labelfolderreference",{"_index":1636,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["labelid",{"_index":1624,"title":{},"body":{"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["labels",{"_index":1123,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["labelsobject",{"_index":2810,"title":{},"body":{"interfaces/Window.html":{}}}],["labelsobject[eventdatatype",{"_index":2812,"title":{},"body":{"interfaces/Window.html":{}}}],["labelsobject[eventdatatype][collection",{"_index":2813,"title":{},"body":{"interfaces/Window.html":{}}}],["labelsobject[eventdatatype][collection][index",{"_index":2809,"title":{},"body":{"interfaces/Window.html":{}}}],["last",{"_index":148,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["later",{"_index":1000,"title":{},"body":{"classes/Cut.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["latest",{"_index":3289,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":586,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["length",{"_index":1329,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["level",{"_index":1463,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["lhcb",{"_index":2947,"title":{},"body":{"changelog.html":{}}}],["lib/models/cut.model",{"_index":1639,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["lib/types/configuration",{"_index":2379,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["library",{"_index":1137,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{}}}],["license",{"_index":3532,"title":{},"body":{"properties.html":{}}}],["light",{"_index":880,"title":{},"body":{"interfaces/Configuration.html":{}}}],["limit",{"_index":3081,"title":{},"body":{"changelog.html":{}}}],["limits",{"_index":3195,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":2509,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["line(geometry",{"_index":2545,"title":{},"body":{"classes/VRManager.html":{}}}],["line.name",{"_index":2546,"title":{},"body":{"classes/VRManager.html":{}}}],["line.scale.z",{"_index":2547,"title":{},"body":{"classes/VRManager.html":{}}}],["linebasicmaterial",{"_index":557,"title":{},"body":{"classes/CMSObjects.html":{}}}],["lineboxobject",{"_index":606,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linehit",{"_index":340,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["linehits",{"_index":3250,"title":{},"body":{"changelog.html":{}}}],["lines",{"_index":601,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["linesegments",{"_index":559,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linewidth",{"_index":2265,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["link",{"_index":562,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["linkedtrackcollection",{"_index":669,"title":{},"body":{"classes/ColorManager.html":{}}}],["linkedtracks",{"_index":670,"title":{},"body":{"classes/ColorManager.html":{}}}],["linkedtracks.foreach((trackindex",{"_index":677,"title":{},"body":{"classes/ColorManager.html":{}}}],["linting",{"_index":2904,"title":{},"body":{"changelog.html":{}}}],["list",{"_index":1153,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["listen",{"_index":1394,"title":{},"body":{"classes/LoadingManager.html":{}}}],["listener",{"_index":1388,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["listentodisplayedeventchange(callback",{"_index":2753,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":2755,"title":{},"body":{"interfaces/Window.html":{}}}],["literal",{"_index":231,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":866,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["loadable",{"_index":1367,"title":{},"body":{"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["loadconfig",{"_index":2403,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaded",{"_index":1182,"title":{},"body":{"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["loader",{"_index":874,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["loader.geteventdata",{"_index":2430,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.process(filedata",{"_index":2429,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.ts",{"_index":1109,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ScriptLoader.html":{},"coverage.html":{}}}],["loader.ts:15",{"_index":1894,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:17",{"_index":1131,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:29",{"_index":1160,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:35",{"_index":1151,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:42",{"_index":1148,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:48",{"_index":1156,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:57",{"_index":1122,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:67",{"_index":1165,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders",{"_index":1112,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders/event",{"_index":886,"title":{},"body":{"interfaces/Configuration.html":{}}}],["loaders/jivexml",{"_index":2376,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaders/objects/tracks",{"_index":250,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["loaders/phoenix",{"_index":2378,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["loadevent(eventkey",{"_index":2645,"title":{},"body":{"interfaces/Window.html":{}}}],["loadfile",{"_index":2129,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loadfile((data",{"_index":2135,"title":{},"body":{"classes/StateManager.html":{}}}],["loadgltfgeometry",{"_index":2699,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":876,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["loadingmanager",{"_index":1365,"title":{"classes/LoadingManager.html":{}},"body":{"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["loadingmanager.addloadableitem('single_script",{"_index":1903,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.instance",{"_index":1403,"title":{},"body":{"classes/LoadingManager.html":{}}}],["loadingmanager.itemloaded('single_script",{"_index":1918,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsongeometry",{"_index":2704,"title":{},"body":{"interfaces/Window.html":{}}}],["loadjsrootscripts",{"_index":2927,"title":{},"body":{"changelog.html":{}}}],["loadobjgeometry",{"_index":2664,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootgeometry",{"_index":2717,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootjsongeometry",{"_index":2708,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":2624,"title":{},"body":{"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":2742,"title":{},"body":{"interfaces/Window.html":{}}}],["loadscript",{"_index":1889,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadscript(scripturl",{"_index":1890,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadstatefromjson",{"_index":1446,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["loadstatefromjson(json",{"_index":1484,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["local",{"_index":464,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["localstorage",{"_index":3603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstorage.getitem(item",{"_index":3600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstorage.setitem(item",{"_index":3604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":1741,"title":{},"body":{"classes/RKHelper.html":{}}}],["log",{"_index":1356,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["logger",{"_index":1145,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["logger.ts",{"_index":1342,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["logger.ts:15",{"_index":1354,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:26",{"_index":1357,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:6",{"_index":1346,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:8",{"_index":1348,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logging",{"_index":1146,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{}}}],["logo",{"_index":2466,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["logs",{"_index":1347,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["long",{"_index":1708,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["longer",{"_index":3080,"title":{},"body":{"changelog.html":{}}}],["look",{"_index":2788,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["lookatobject(uuid",{"_index":2789,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":1843,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["lower",{"_index":1004,"title":{},"body":{"classes/Cut.html":{},"changelog.html":{}}}],["m",{"_index":2271,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["made",{"_index":525,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{}}}],["main",{"_index":1050,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{}}}],["mainlogo",{"_index":2465,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["mainrenderer",{"_index":1772,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.domelement.id",{"_index":1863,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setpixelratio(window.devicepixelratio",{"_index":1862,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setsize(rendererwidth",{"_index":1861,"title":{},"body":{"classes/RendererManager.html":{}}}],["major",{"_index":3403,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":395,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["making",{"_index":393,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["manage",{"_index":3105,"title":{},"body":{"changelog.html":{}}}],["manager",{"_index":11,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["manager.ts",{"_index":8,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["manager.ts:10",{"_index":1794,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:102",{"_index":1988,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:104",{"_index":2116,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:105",{"_index":1393,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:109",{"_index":2818,"title":{},"body":{"classes/XRManager.html":{}}}],["manager.ts:11",{"_index":1380,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:111",{"_index":1970,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:112",{"_index":1402,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:119",{"_index":1829,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:12",{"_index":1055,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:127",{"_index":1805,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:128",{"_index":1967,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:135",{"_index":1806,"title":{},"body":{"classes/RendererManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:14",{"_index":1053,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:143",{"_index":1807,"title":{},"body":{"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:145",{"_index":1959,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:147",{"_index":2120,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:149",{"_index":2502,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:15",{"_index":82,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:153",{"_index":1799,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:155",{"_index":2128,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:158",{"_index":1954,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:16",{"_index":1062,"title":{},"body":{"classes/EffectsManager.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:163",{"_index":1816,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:169",{"_index":2368,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:17",{"_index":60,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:171",{"_index":2124,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:175",{"_index":1832,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:179",{"_index":2115,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:18",{"_index":1058,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:187",{"_index":1801,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:19",{"_index":74,"title":{},"body":{"classes/ARManager.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:195",{"_index":2122,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:20",{"_index":638,"title":{},"body":{"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:200",{"_index":1822,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:207",{"_index":1957,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:209",{"_index":2357,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:21",{"_index":2494,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:210",{"_index":1804,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:218",{"_index":1982,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:22",{"_index":48,"title":{},"body":{"classes/ARManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:220",{"_index":1814,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:227",{"_index":2347,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:228",{"_index":1820,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:23",{"_index":1047,"title":{},"body":{"classes/EffectsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:238",{"_index":1969,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:24",{"_index":1948,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:249",{"_index":1974,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:252",{"_index":2372,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:26",{"_index":1963,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:260",{"_index":1965,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:268",{"_index":2359,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:27",{"_index":1175,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:28",{"_index":1964,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:29",{"_index":2108,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:30",{"_index":1947,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:32",{"_index":1949,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:34",{"_index":1810,"title":{},"body":{"classes/RendererManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:36",{"_index":1960,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:37",{"_index":1385,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:38",{"_index":624,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:41",{"_index":1952,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:43",{"_index":1946,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:46",{"_index":1397,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:48",{"_index":1071,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:52",{"_index":1191,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:53",{"_index":2819,"title":{},"body":{"classes/XRManager.html":{}}}],["manager.ts:54",{"_index":2126,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:55",{"_index":632,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:59",{"_index":2353,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:6",{"_index":1379,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:61",{"_index":1069,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:64",{"_index":1400,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:65",{"_index":1980,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:66",{"_index":1186,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:69",{"_index":1063,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:7",{"_index":621,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:72",{"_index":646,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:77",{"_index":2505,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:78",{"_index":118,"title":{},"body":{"classes/ARManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:8",{"_index":1793,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:80",{"_index":2117,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:83",{"_index":1986,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:84",{"_index":1387,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:85",{"_index":1189,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:88",{"_index":1073,"title":{},"body":{"classes/EffectsManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:9",{"_index":1383,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:93",{"_index":1390,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:94",{"_index":1971,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:97",{"_index":1076,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:99",{"_index":2817,"title":{},"body":{"classes/XRManager.html":{}}}],["manager/animations",{"_index":220,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["manager/color",{"_index":614,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["manager/controls",{"_index":3457,"title":{},"body":{"coverage.html":{}}}],["manager/dat",{"_index":3470,"title":{},"body":{"coverage.html":{}}}],["manager/effects",{"_index":1031,"title":{},"body":{"classes/EffectsManager.html":{},"coverage.html":{}}}],["manager/export",{"_index":1168,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["manager/import",{"_index":3461,"title":{},"body":{"coverage.html":{}}}],["manager/index.ts",{"_index":3463,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager/phoenix",{"_index":888,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["manager/renderer",{"_index":1770,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["manager/scene",{"_index":3465,"title":{},"body":{"coverage.html":{}}}],["manager/selection",{"_index":1927,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["manager/xr/ar",{"_index":7,"title":{},"body":{"classes/ARManager.html":{},"coverage.html":{}}}],["manager/xr/vr",{"_index":2482,"title":{},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["manager/xr/xr",{"_index":2581,"title":{},"body":{"interfaces/Window.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["managers/loading",{"_index":1902,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["managers/state",{"_index":2579,"title":{},"body":{"interfaces/Window.html":{}}}],["managers/three",{"_index":889,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/ui",{"_index":887,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/url",{"_index":2580,"title":{},"body":{"interfaces/Window.html":{}}}],["manages",{"_index":1048,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/Window.html":{}}}],["managing",{"_index":251,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manipulate",{"_index":1143,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["manual",{"_index":1526,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["manually",{"_index":369,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["many",{"_index":3123,"title":{},"body":{"changelog.html":{}}}],["map((key",{"_index":2045,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mat4",{"_index":2270,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["match",{"_index":3072,"title":{},"body":{"changelog.html":{}}}],["matching",{"_index":185,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2171,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["math.abs(1",{"_index":843,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{}}}],["math.abs(returnvec.x",{"_index":1298,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.y",{"_index":1299,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.z",{"_index":1300,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.atan(math.pow(math.e",{"_index":949,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.log(math.tan(theta",{"_index":950,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.pi",{"_index":303,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["math.pow(fh",{"_index":1311,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.sign(1",{"_index":823,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{}}}],["math.sqrt(pos.x",{"_index":1747,"title":{},"body":{"classes/RKHelper.html":{}}}],["max",{"_index":739,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["maxcutactive",{"_index":983,"title":{},"body":{"classes/Cut.html":{}}}],["maxentries",{"_index":1344,"title":{},"body":{"classes/InfoLogger.html":{}}}],["maximum",{"_index":755,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{}}}],["maxstepsize",{"_index":2077,"title":{},"body":{"classes/State.html":{}}}],["maxvalue",{"_index":984,"title":{},"body":{"classes/Cut.html":{}}}],["menu",{"_index":735,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["menu's",{"_index":1617,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["menu/config",{"_index":3554,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["menu/phoenix",{"_index":776,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"coverage.html":{}}}],["menunodename",{"_index":2654,"title":{},"body":{"interfaces/Window.html":{}}}],["menus",{"_index":1142,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["menusubfolder",{"_index":1615,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["mesh",{"_index":242,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["mesh(particlegeometry",{"_index":487,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["meshbasicmaterial",{"_index":241,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{}}}],["meshphongmaterial",{"_index":649,"title":{},"body":{"classes/ColorManager.html":{}}}],["metadata",{"_index":1157,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["method",{"_index":3192,"title":{},"body":{"changelog.html":{}}}],["methods",{"_index":33,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["mev",{"_index":1759,"title":{},"body":{"classes/RKHelper.html":{}}}],["mid",{"_index":757,"title":{},"body":{"classes/ColorOptions.html":{}}}],["min",{"_index":738,"title":{},"body":{"classes/ColorOptions.html":{}}}],["min/max",{"_index":742,"title":{},"body":{"classes/ColorOptions.html":{}}}],["mincutactive",{"_index":985,"title":{},"body":{"classes/Cut.html":{}}}],["minimum",{"_index":754,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{}}}],["minor",{"_index":3328,"title":{},"body":{"changelog.html":{}}}],["minormax",{"_index":758,"title":{},"body":{"classes/ColorOptions.html":{}}}],["minvalue",{"_index":986,"title":{},"body":{"classes/Cut.html":{}}}],["misc",{"_index":3135,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":3493,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":3062,"title":{},"body":{"changelog.html":{}}}],["missingenergy",{"_index":3598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mm",{"_index":1758,"title":{},"body":{"classes/RKHelper.html":{}}}],["mock",{"_index":3609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mocking",{"_index":3627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":128,"title":{},"body":{"classes/ARManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":2382,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["models/preset",{"_index":884,"title":{},"body":{"interfaces/Configuration.html":{}}}],["modelviewmatrix",{"_index":2273,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["modular",{"_index":3498,"title":{},"body":{"index.html":{}}}],["module",{"_index":3507,"title":{},"body":{"index.html":{}}}],["modules",{"_index":3525,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mom",{"_index":779,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["momcolors",{"_index":688,"title":{},"body":{"classes/ColorOptions.html":{}}}],["momentum",{"_index":719,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["momvalue",{"_index":827,"title":{},"body":{"classes/ColorOptions.html":{}}}],["momvalue.color",{"_index":836,"title":{},"body":{"classes/ColorOptions.html":{}}}],["more",{"_index":3239,"title":{},"body":{"changelog.html":{}}}],["mouse",{"_index":1955,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":2062,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":2065,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":286,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["moveindirection",{"_index":2490,"title":{},"body":{"classes/VRManager.html":{}}}],["moveindirection(direction",{"_index":2500,"title":{},"body":{"classes/VRManager.html":{}}}],["movement",{"_index":2493,"title":{},"body":{"classes/VRManager.html":{}}}],["moving",{"_index":376,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{}}}],["mss",{"_index":1327,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multidimensional",{"_index":520,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["multiple",{"_index":1161,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{}}}],["multiplyscalar(fh",{"_index":1320,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(fh2",{"_index":1315,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(qop",{"_index":1285,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(updatedscale.x",{"_index":380,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["muon",{"_index":553,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber",{"_index":600,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":609,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":610,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":555,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.color",{"_index":593,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":611,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams[face",{"_index":568,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchambers",{"_index":3597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":52,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["name.split('>').foreach((nodename",{"_index":1581,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["named",{"_index":1381,"title":{},"body":{"classes/LoadingManager.html":{}}}],["names",{"_index":2933,"title":{},"body":{"changelog.html":{}}}],["namespace",{"_index":3245,"title":{},"body":{"changelog.html":{}}}],["native",{"_index":932,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["navigator",{"_index":2824,"title":{},"body":{"classes/XRManager.html":{}}}],["ndof",{"_index":1681,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["near",{"_index":78,"title":{},"body":{"classes/ARManager.html":{}}}],["necessary",{"_index":929,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["need",{"_index":370,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/URLOptionsManager.html":{}}}],["needed",{"_index":1709,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["needing",{"_index":3078,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":211,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newcolorbyoption",{"_index":808,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newcolorbyoption?.apply",{"_index":811,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newcolorbyoption?.key",{"_index":810,"title":{},"body":{"classes/ColorOptions.html":{}}}],["next",{"_index":2179,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["next_track_id",{"_index":2180,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["nextp",{"_index":2287,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["nextpos",{"_index":2279,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["nextpos.w",{"_index":2289,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["nextpos.xy",{"_index":2288,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["ng",{"_index":2912,"title":{},"body":{"changelog.html":{}}}],["node",{"_index":736,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["node.ts",{"_index":1430,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["node.ts:10",{"_index":1460,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:105",{"_index":1494,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:115",{"_index":1471,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:12",{"_index":1464,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:129",{"_index":1491,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:14",{"_index":1466,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:149",{"_index":1474,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:16",{"_index":1453,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:175",{"_index":1483,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:18",{"_index":1459,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:196",{"_index":1485,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:20",{"_index":1462,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:22",{"_index":1465,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:242",{"_index":1477,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:260",{"_index":1482,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:27",{"_index":1455,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:30",{"_index":1454,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:32",{"_index":1451,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:66",{"_index":1468,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:8",{"_index":1461,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:83",{"_index":1489,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:92",{"_index":1487,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild",{"_index":1571,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.loadstatefromjson(childstate",{"_index":1577,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.name",{"_index":1573,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.nodelevel",{"_index":1575,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig",{"_index":1559,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.label",{"_index":1563,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.type",{"_index":1561,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig[prop",{"_index":1566,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodefound",{"_index":1578,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodejs.timeout",{"_index":2553,"title":{},"body":{"classes/VRManager.html":{}}}],["nodelevel",{"_index":1436,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename",{"_index":1582,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename.trim",{"_index":1583,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodes",{"_index":1457,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["none",{"_index":867,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["normal",{"_index":1060,"title":{},"body":{"classes/EffectsManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["normal.x",{"_index":2296,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["normal.xy",{"_index":2294,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["normalblending",{"_index":1079,"title":{},"body":{"classes/EffectsManager.html":{}}}],["normalize(curp",{"_index":2291,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["normalize(nextp",{"_index":2290,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["notable",{"_index":2854,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":138,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["notforced",{"_index":1665,"title":{},"body":{"classes/PresetView.html":{},"miscellaneous/enumerations.html":{}}}],["nothing",{"_index":958,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["now",{"_index":970,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["nowdisplayingevent",{"_index":2588,"title":{},"body":{"interfaces/Window.html":{}}}],["npm",{"_index":3505,"title":{},"body":{"index.html":{}}}],["null",{"_index":90,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":117,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["number'].includes",{"_index":2048,"title":{},"body":{"classes/SelectionManager.html":{}}}],["numofsteps",{"_index":299,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj",{"_index":1184,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["obj.eventobject",{"_index":408,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.eventobject.name",{"_index":407,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.eventobject.visible",{"_index":421,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.obj",{"_index":1205,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":69,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":821,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["object(s",{"_index":641,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.assign",{"_index":598,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["object.assign(alleventsobject",{"_index":2451,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["object.defineproperties(this",{"_index":2312,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["object.entries(this.momcolors).foreach(([key",{"_index":826,"title":{},"body":{"classes/ColorOptions.html":{}}}],["object.entries(urloptionwithids).foreach(([urloption",{"_index":2476,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["object.keys(fileswithdata",{"_index":2447,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["object.keys(intersectedobject.userdata",{"_index":2044,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(paramscopy",{"_index":1703,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(prettyparams",{"_index":2038,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(prettysymbols.symbols).find((symbol",{"_index":1695,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":2743,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.progressitems).length",{"_index":1420,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object.keys(trackscollections",{"_index":1753,"title":{},"body":{"classes/RKHelper.html":{}}}],["object.material.color.set(color",{"_index":655,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.material?.color",{"_index":653,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.name",{"_index":672,"title":{},"body":{"classes/ColorManager.html":{},"classes/ExportManager.html":{}}}],["object.userdata",{"_index":671,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.values(collection.children",{"_index":661,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.values(this.progressitems).reduce",{"_index":1416,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object3d",{"_index":245,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"interfaces/PhoenixUI.html":{},"classes/SelectionManager.html":{}}}],["object['material",{"_index":674,"title":{},"body":{"classes/ColorManager.html":{}}}],["object['material']?.color",{"_index":663,"title":{},"body":{"classes/ColorManager.html":{}}}],["objectname",{"_index":2716,"title":{},"body":{"interfaces/Window.html":{}}}],["objectparams",{"_index":761,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.charge",{"_index":825,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.dparams?.[4",{"_index":842,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.mom",{"_index":845,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objects",{"_index":255,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["objects.traverse((object",{"_index":652,"title":{},"body":{"classes/ColorManager.html":{}}}],["objects.ts",{"_index":543,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["objects.ts:25",{"_index":551,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objectsgroup",{"_index":635,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{}}}],["objectsgroup.getobjectbyproperty('uuid",{"_index":2075,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectstoanimatewithsphere",{"_index":327,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objectstoanimatewithsphere.foreach((obj",{"_index":406,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objectstoanimatewithsphere.push",{"_index":400,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objecttype",{"_index":1224,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":1228,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":1226,"title":{},"body":{"classes/ExportManager.html":{}}}],["objectuserdata",{"_index":637,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{}}}],["objexporter",{"_index":1194,"title":{},"body":{"classes/ExportManager.html":{}}}],["objs",{"_index":3077,"title":{},"body":{"changelog.html":{}}}],["observable",{"_index":200,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["observed",{"_index":193,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["olddrawrangecount",{"_index":358,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["older",{"_index":3188,"title":{},"body":{"changelog.html":{}}}],["omit",{"_index":1470,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["onanimationend",{"_index":284,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["onanimationsphereupdate",{"_index":404,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onanimationsphereupdate(new",{"_index":437,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onanimationstart",{"_index":317,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["once",{"_index":397,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onchange",{"_index":788,"title":{},"body":{"classes/ColorOptions.html":{}}}],["onclick",{"_index":791,"title":{},"body":{"classes/ColorOptions.html":{},"classes/StateManager.html":{}}}],["oncontrollerselectend",{"_index":2488,"title":{},"body":{"classes/VRManager.html":{}}}],["oncontrollerselectstart",{"_index":2489,"title":{},"body":{"classes/VRManager.html":{}}}],["ondisplayedeventchange",{"_index":2587,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":1932,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":1134,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["onend",{"_index":314,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["oneventschange",{"_index":2586,"title":{},"body":{"interfaces/Window.html":{}}}],["onfileread",{"_index":3606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onfileread?.(e.target.result.tostring",{"_index":3621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onloadcallbacks",{"_index":1368,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onlyselectedcolorbyoption",{"_index":698,"title":{},"body":{"classes/ColorOptions.html":{}}}],["onprogress",{"_index":1377,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogress(id",{"_index":1399,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogresscallbacks",{"_index":1369,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onremovelabel",{"_index":1622,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["onsessionended",{"_index":28,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["onsessionstarted",{"_index":131,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["ontoggle",{"_index":1437,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ontouchdown",{"_index":1933,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ontouchmove",{"_index":1934,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onupdate",{"_index":195,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onupdate(callback",{"_index":205,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onxrsessionended",{"_index":34,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["onxrsessionstarted",{"_index":36,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["onxrsessionstarted(session",{"_index":113,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["opacity",{"_index":485,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"changelog.html":{}}}],["openfile",{"_index":2577,"title":{},"body":{"interfaces/Window.html":{}}}],["openfile(url",{"_index":2722,"title":{},"body":{"interfaces/Window.html":{}}}],["opening",{"_index":1660,"title":{},"body":{"classes/PresetView.html":{},"classes/StateManager.html":{},"changelog.html":{}}}],["openingangle",{"_index":2155,"title":{},"body":{"classes/StateManager.html":{}}}],["openingclippingangle",{"_index":2096,"title":{},"body":{"classes/StateManager.html":{}}}],["operations",{"_index":13,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["optimal",{"_index":3356,"title":{},"body":{"changelog.html":{}}}],["optimize",{"_index":3163,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":745,"title":{},"body":{"classes/ColorOptions.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["optional",{"_index":54,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["optionalfeatures",{"_index":162,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["options",{"_index":683,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["options.ts",{"_index":682,"title":{},"body":{"classes/ColorOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["options.ts:124",{"_index":764,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:150",{"_index":763,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:176",{"_index":746,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:193",{"_index":770,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:207",{"_index":765,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:246",{"_index":747,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:256",{"_index":750,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:26",{"_index":730,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:28",{"_index":731,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:282",{"_index":760,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:293",{"_index":748,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:30",{"_index":743,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:300",{"_index":766,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:32",{"_index":734,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:35",{"_index":725,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:57",{"_index":728,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:65",{"_index":741,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:74",{"_index":705,"title":{},"body":{"classes/ColorOptions.html":{}}}],["origin",{"_index":443,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["original",{"_index":375,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PrettySymbols.html":{}}}],["otherwise",{"_index":820,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{}}}],["out",{"_index":363,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["outdated",{"_index":142,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["outline",{"_index":1033,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":1067,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["outlinepass.overlaymaterial.blending",{"_index":1101,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xdf5330",{"_index":1103,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xffff66",{"_index":1102,"title":{},"body":{"classes/EffectsManager.html":{}}}],["output",{"_index":1213,"title":{},"body":{"classes/ExportManager.html":{},"changelog.html":{}}}],["over",{"_index":331,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["overlay",{"_index":64,"title":{},"body":{"classes/ARManager.html":{},"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["overlaycanvas",{"_index":1826,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlayed",{"_index":2771,"title":{},"body":{"interfaces/Window.html":{}}}],["overlayrenderer",{"_index":1773,"title":{},"body":{"classes/RendererManager.html":{}}}],["overlays",{"_index":67,"title":{},"body":{"classes/ARManager.html":{}}}],["overridden",{"_index":1533,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["override",{"_index":153,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["overriden",{"_index":999,"title":{},"body":{"classes/Cut.html":{}}}],["overview",{"_index":3526,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":1699,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["p",{"_index":1249,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["p.y",{"_index":2206,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["p.z",{"_index":2207,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["package",{"_index":2867,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["packages",{"_index":2953,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":2358,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["panel",{"_index":1352,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{}}}],["param",{"_index":152,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["parameter",{"_index":1693,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parameters",{"_index":50,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/typealiases.html":{}}}],["parameters.ts",{"_index":3553,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["parameterss",{"_index":1689,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parametrised",{"_index":3370,"title":{},"body":{"changelog.html":{}}}],["paramkey",{"_index":1702,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["params",{"_index":644,"title":{},"body":{"classes/ColorManager.html":{},"classes/PrettySymbols.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{}}}],["paramscopy",{"_index":1700,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams",{"_index":1724,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[0",{"_index":1721,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[1",{"_index":1723,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[2",{"_index":1716,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[3",{"_index":1715,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[4",{"_index":1718,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy?.dparams",{"_index":1713,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy['pos",{"_index":1710,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[paramkey",{"_index":1706,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[symbol",{"_index":1705,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parent",{"_index":1438,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{}}}],["parentelement",{"_index":1892,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentelement.appendchild(scriptelement",{"_index":1921,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parse",{"_index":1209,"title":{},"body":{"classes/ExportManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["parsefloat(objectparams?.dparams?.[4",{"_index":844,"title":{},"body":{"classes/ColorOptions.html":{}}}],["parsegltfgeometry",{"_index":2692,"title":{},"body":{"interfaces/Window.html":{}}}],["parseint(objectparams?.dparams?.[4",{"_index":824,"title":{},"body":{"classes/ColorOptions.html":{}}}],["parseobjgeometry",{"_index":2672,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixdisplay(input",{"_index":2680,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":2625,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":2670,"title":{},"body":{"interfaces/Window.html":{}}}],["parsing",{"_index":3323,"title":{},"body":{"changelog.html":{}}}],["part",{"_index":547,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["particle",{"_index":472,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["particle1",{"_index":486,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle1.clone",{"_index":489,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle1.position.setz(distancefromorigin",{"_index":490,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle2",{"_index":488,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle2.position.setz",{"_index":491,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlecolor",{"_index":477,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlegeometry",{"_index":481,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlematerial",{"_index":484,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particles",{"_index":471,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlesize",{"_index":473,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletoorigin",{"_index":496,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens",{"_index":493,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens.push(particletoorigin",{"_index":498,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens[0].oncomplete",{"_index":499,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pass",{"_index":1034,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["passed",{"_index":1015,"title":{},"body":{"classes/Cut.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["passes",{"_index":1049,"title":{},"body":{"classes/EffectsManager.html":{}}}],["passindex",{"_index":1105,"title":{},"body":{"classes/EffectsManager.html":{}}}],["path",{"_index":236,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["path/to/geometry.obj",{"_index":3513,"title":{},"body":{"index.html":{}}}],["pathlength",{"_index":2078,"title":{},"body":{"classes/State.html":{}}}],["paths",{"_index":2913,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":3491,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":921,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["perform",{"_index":1243,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performance",{"_index":1840,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["performed",{"_index":1245,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performing",{"_index":1239,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["periodically",{"_index":2950,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":3008,"title":{},"body":{"changelog.html":{}}}],["persist",{"_index":3127,"title":{},"body":{"changelog.html":{}}}],["perspectivecamera",{"_index":46,"title":{},"body":{"classes/ARManager.html":{},"classes/XRManager.html":{}}}],["phi",{"_index":906,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["phi=0",{"_index":960,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phi=pi",{"_index":967,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phnx",{"_index":2679,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":66,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["phoenix.min.js",{"_index":3519,"title":{},"body":{"index.html":{}}}],["phoenixloader",{"_index":2377,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["phoenixmenu",{"_index":2137,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["phoenixmenuconfigs",{"_index":1495,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenuconfigs[keyof",{"_index":1497,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenunode",{"_index":702,"title":{"classes/PhoenixMenuNode.html":{}},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"coverage.html":{}}}],["phoenixmenunode(name",{"_index":1504,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenuroot",{"_index":861,"title":{},"body":{"interfaces/Configuration.html":{},"classes/StateManager.html":{}}}],["phoenixmenuui",{"_index":3475,"title":{},"body":{"coverage.html":{}}}],["phoenixnodejson",{"_index":1543,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children",{"_index":1550,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children'].push(child.getnodestate",{"_index":1551,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['childrenactive",{"_index":1547,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['configs",{"_index":1549,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['name",{"_index":1544,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['nodelevel",{"_index":1545,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['togglestate",{"_index":1546,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixobjects",{"_index":548,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["phoenixscene",{"_index":2681,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":2684,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":2683,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixui",{"_index":1588,"title":{"interfaces/PhoenixUI.html":{}},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{},"coverage.html":{}}}],["phoenixurloptions",{"_index":2383,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["physics",{"_index":544,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/PrettySymbols.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["pi",{"_index":911,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["pick",{"_index":2461,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["pipe",{"_index":3384,"title":{},"body":{"changelog.html":{}}}],["planarcalocells",{"_index":3178,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["planarcalorimeters",{"_index":3131,"title":{},"body":{"changelog.html":{}}}],["plane",{"_index":247,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["planes",{"_index":439,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["playground",{"_index":3037,"title":{},"body":{"changelog.html":{}}}],["plength",{"_index":1328,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["point",{"_index":1265,"title":{},"body":{"classes/Field.html":{},"classes/PresetView.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pointing",{"_index":1654,"title":{},"body":{"classes/PresetView.html":{}}}],["points",{"_index":2197,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points.length",{"_index":2208,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[0].y",{"_index":2203,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[0].z",{"_index":2204,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[i].y",{"_index":2210,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[i].z",{"_index":2211,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["pos",{"_index":265,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos.x",{"_index":1748,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos.y",{"_index":1749,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos.z",{"_index":1746,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos1",{"_index":1277,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos2",{"_index":1288,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos[0",{"_index":273,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pos[1",{"_index":275,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pos[2",{"_index":277,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["position",{"_index":79,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["positions",{"_index":225,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["positions.concat(extrapolatedpos",{"_index":1769,"title":{},"body":{"classes/RKHelper.html":{}}}],["positions.slice(1).foreach",{"_index":536,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].duration",{"_index":532,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].easing",{"_index":534,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].position",{"_index":531,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positive",{"_index":966,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["possible",{"_index":726,"title":{},"body":{"classes/ColorOptions.html":{},"changelog.html":{}}}],["post",{"_index":1996,"title":{},"body":{"classes/SelectionManager.html":{}}}],["powerpreference",{"_index":1838,"title":{},"body":{"classes/RendererManager.html":{}}}],["preselectionantialias",{"_index":1935,"title":{},"body":{"classes/SelectionManager.html":{}}}],["presenting",{"_index":3502,"title":{},"body":{"index.html":{}}}],["preset",{"_index":222,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["presetanimations",{"_index":862,"title":{},"body":{"interfaces/Configuration.html":{}}}],["presets",{"_index":3593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["presetview",{"_index":882,"title":{"classes/PresetView.html":{}},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":863,"title":{},"body":{"interfaces/Configuration.html":{}}}],["prettier",{"_index":3114,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":1676,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams",{"_index":1714,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['d0",{"_index":1720,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['q",{"_index":1719,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['z0",{"_index":1722,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['|p",{"_index":1717,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettyparams",{"_index":2035,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettyparams[key",{"_index":2042,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbol",{"_index":1694,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols",{"_index":773,"title":{"classes/PrettySymbols.html":{}},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["prettysymbols.getprettyparams",{"_index":2036,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbols.getprettysymbol('charge",{"_index":713,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol('charge')}=${chargevalue",{"_index":813,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol('mom",{"_index":720,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol(paramkey",{"_index":1704,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols.symbols[symbol].includes(param",{"_index":1696,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["previous",{"_index":75,"title":{},"body":{"classes/ARManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["previousscale",{"_index":372,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween",{"_index":535,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween.chain(tween",{"_index":538,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween.oncomplete(onend",{"_index":539,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previousvalues",{"_index":21,"title":{},"body":{"classes/ARManager.html":{}}}],["prevlocalclipping",{"_index":465,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["prevnode",{"_index":1580,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.addchild(nodename",{"_index":1587,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.children.find(child",{"_index":1585,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.findintree(nodename",{"_index":1584,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevp",{"_index":2284,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["prevpos",{"_index":2277,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["prevpos.w",{"_index":2286,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["prevpos.xy",{"_index":2285,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["print",{"_index":1711,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["printed",{"_index":1688,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["private",{"_index":20,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["process",{"_index":552,"title":{},"body":{"classes/CMSObjects.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["processes",{"_index":2740,"title":{},"body":{"interfaces/Window.html":{}}}],["processeventfile",{"_index":2413,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["processeventfile(file",{"_index":2419,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["processing",{"_index":875,"title":{},"body":{"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"changelog.html":{},"index.html":{}}}],["progress",{"_index":147,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["progresses",{"_index":1401,"title":{},"body":{"classes/LoadingManager.html":{}}}],["progressitems",{"_index":1370,"title":{},"body":{"classes/LoadingManager.html":{}}}],["project",{"_index":2855,"title":{},"body":{"changelog.html":{}}}],["project/jsroot/blob/19ce116b68701ab45e0a092c673119bf97ede0c2/modules/core.mjs#l241",{"_index":2720,"title":{},"body":{"interfaces/Window.html":{}}}],["projectionmatrix",{"_index":2272,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["promise",{"_index":1901,"title":{},"body":{"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["promise((resolve",{"_index":1904,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["promises",{"_index":2442,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["prop",{"_index":1565,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["propagate",{"_index":1322,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagate(startpos",{"_index":1880,"title":{},"body":{"classes/RungeKutta.html":{}}}],["propagation",{"_index":312,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["propagator",{"_index":1733,"title":{},"body":{"classes/RKHelper.html":{}}}],["proper",{"_index":3012,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":3130,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"properties.html":{}}}],["property",{"_index":752,"title":{},"body":{"classes/ColorOptions.html":{}}}],["property's",{"_index":639,"title":{},"body":{"classes/ColorManager.html":{}}}],["props",{"_index":2043,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.join",{"_index":2054,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":2053,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":26,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["provided",{"_index":2902,"title":{},"body":{"changelog.html":{}}}],["pseudorapidity",{"_index":934,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["pt",{"_index":1679,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["public",{"_index":24,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["pushed",{"_index":2499,"title":{},"body":{"classes/VRManager.html":{}}}],["puts",{"_index":964,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["q",{"_index":1248,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qop",{"_index":1253,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["quaternion",{"_index":916,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion.multiply(quaternion2",{"_index":972,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":963,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion2",{"_index":968,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion2.setfromaxisangle(new",{"_index":969,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["query",{"_index":2360,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["radians",{"_index":942,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["radius",{"_index":297,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["random",{"_index":633,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"changelog.html":{}}}],["randomly",{"_index":647,"title":{},"body":{"classes/ColorManager.html":{}}}],["range",{"_index":640,"title":{},"body":{"classes/ColorManager.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"changelog.html":{}}}],["rangeslider",{"_index":1537,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["ratio",{"_index":1250,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["raycaster",{"_index":1989,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":2070,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":2069,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":2068,"title":{},"body":{"classes/SelectionManager.html":{}}}],["reachedhits",{"_index":412,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["reachedhits.length",{"_index":416,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["reaches",{"_index":398,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["react",{"_index":3524,"title":{},"body":{"index.html":{}}}],["read",{"_index":2446,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["reader",{"_index":3618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.onload",{"_index":3620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.readastext(configfile",{"_index":3623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reading",{"_index":2444,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["readonly",{"_index":22,"title":{},"body":{"classes/ARManager.html":{},"classes/PrettySymbols.html":{},"classes/VRManager.html":{}}}],["readzipfile",{"_index":2380,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["readzipfile(filebuffer",{"_index":2443,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["realistic",{"_index":3279,"title":{},"body":{"changelog.html":{}}}],["reason",{"_index":2458,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["receives",{"_index":2621,"title":{},"body":{"interfaces/Window.html":{}}}],["recover",{"_index":1179,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["reduce",{"_index":2884,"title":{},"body":{"changelog.html":{}}}],["redundant",{"_index":3271,"title":{},"body":{"changelog.html":{}}}],["refactor",{"_index":3095,"title":{},"body":{"changelog.html":{}}}],["refactoring",{"_index":3404,"title":{},"body":{"changelog.html":{}}}],["reference",{"_index":1638,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["reject",{"_index":1905,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["related",{"_index":12,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["release",{"_index":2876,"title":{},"body":{"changelog.html":{}}}],["released",{"_index":2498,"title":{},"body":{"classes/VRManager.html":{}}}],["reload",{"_index":2642,"title":{},"body":{"interfaces/Window.html":{}}}],["remaining",{"_index":435,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["remove",{"_index":467,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["removechild",{"_index":1447,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removechild(child",{"_index":1488,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removecontrols",{"_index":1784,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":1815,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":1074,"title":{},"body":{"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{}}}],["removeeventlistener('click",{"_index":2022,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('mousemove",{"_index":2021,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('touchstart",{"_index":2023,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removelabel",{"_index":1601,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["removelabel(labelid",{"_index":1635,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["removepass",{"_index":1044,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removepass(pass",{"_index":1072,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removing",{"_index":1631,"title":{},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["render",{"_index":1040,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["render(scene",{"_index":1818,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendered",{"_index":1827,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":29,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["renderer.localclippingenabled",{"_index":1876,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":1834,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":1831,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererelement",{"_index":2060,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientheight",{"_index":2067,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientwidth",{"_index":2064,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererheight",{"_index":1858,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderermanager",{"_index":248,"title":{"classes/RendererManager.html":{}},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":1774,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererwidth",{"_index":1855,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":1059,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["renderpass",{"_index":1057,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renderpass(this.scene",{"_index":1088,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renders",{"_index":2703,"title":{},"body":{"interfaces/Window.html":{}}}],["repeating",{"_index":3087,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":3274,"title":{},"body":{"changelog.html":{}}}],["repository",{"_index":3534,"title":{},"body":{"properties.html":{}}}],["representation",{"_index":2495,"title":{},"body":{"classes/VRManager.html":{}}}],["representing",{"_index":630,"title":{},"body":{"classes/ColorManager.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":1133,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["request",{"_index":3265,"title":{},"body":{"changelog.html":{}}}],["requesting",{"_index":106,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["requestsession(`immersive",{"_index":2829,"title":{},"body":{"classes/XRManager.html":{}}}],["required",{"_index":104,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"index.html":{}}}],["res.json",{"_index":2408,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["reset",{"_index":990,"title":{},"body":{"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["reset/remove",{"_index":2807,"title":{},"body":{"interfaces/Window.html":{}}}],["resetlabels",{"_index":2808,"title":{},"body":{"interfaces/Window.html":{}}}],["resize",{"_index":3281,"title":{},"body":{"changelog.html":{}}}],["resolution",{"_index":2264,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["resolution.y",{"_index":2268,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["resolve",{"_index":1917,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["resources",{"_index":2590,"title":{},"body":{"interfaces/Window.html":{}}}],["responsible",{"_index":622,"title":{},"body":{"classes/ColorManager.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{}}}],["restore",{"_index":434,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{}}}],["restored",{"_index":1458,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["restoring",{"_index":374,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["restructure",{"_index":3252,"title":{},"body":{"changelog.html":{}}}],["result",{"_index":1202,"title":{},"body":{"classes/ExportManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["results",{"_index":184,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1149,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":160,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":103,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["returnvec",{"_index":1295,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["reverse",{"_index":953,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["revert",{"_index":463,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["reverting",{"_index":2399,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["reverts",{"_index":2882,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":587,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["rk",{"_index":3138,"title":{},"body":{"changelog.html":{}}}],["rkhelper",{"_index":1725,"title":{"classes/RKHelper.html":{}},"body":{"classes/RKHelper.html":{},"changelog.html":{},"coverage.html":{}}}],["rkhelper.extrapolatetrackpositions(track",{"_index":1756,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkhelper.extrapolationlimit",{"_index":1734,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkstate",{"_index":1334,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.dir",{"_index":1336,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.maxstepsize",{"_index":1339,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.p",{"_index":1337,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pathlength",{"_index":1340,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pos",{"_index":1335,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.q",{"_index":1338,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["robustness",{"_index":3111,"title":{},"body":{"changelog.html":{}}}],["rollup",{"_index":3296,"title":{},"body":{"changelog.html":{}}}],["root",{"_index":164,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["rotate",{"_index":917,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["rotate.chain(end",{"_index":309,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["rotateopeningangleclipping",{"_index":2163,"title":{},"body":{"classes/StateManager.html":{}}}],["rotatestartangleclipping",{"_index":2161,"title":{},"body":{"classes/StateManager.html":{}}}],["rotationpositions",{"_index":305,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["rotations",{"_index":930,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["routes",{"_index":3392,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1158,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["run${this.eventmetadata.runnumber}_evt${this.eventmetadata.eventnumber}.json",{"_index":2145,"title":{},"body":{"classes/StateManager.html":{}}}],["runge",{"_index":1240,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rungekutta",{"_index":1242,"title":{"classes/RungeKutta.html":{}},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["runnumber",{"_index":2110,"title":{},"body":{"classes/StateManager.html":{}}}],["same",{"_index":3347,"title":{},"body":{"changelog.html":{}}}],["sample",{"_index":3146,"title":{},"body":{"changelog.html":{}}}],["save",{"_index":1187,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":1180,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":1171,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":1185,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile",{"_index":1198,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["savefile(output",{"_index":1218,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile(result",{"_index":1204,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":1172,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":1188,"title":{},"body":{"classes/ExportManager.html":{}}}],["saves",{"_index":2623,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":1173,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":1190,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestateasjson",{"_index":2101,"title":{},"body":{"classes/StateManager.html":{}}}],["scale",{"_index":77,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["scalescene",{"_index":37,"title":{},"body":{"classes/ARManager.html":{}}}],["scalescene(scale",{"_index":116,"title":{},"body":{"classes/ARManager.html":{}}}],["scaletween",{"_index":365,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["scaletween.onupdate((updatedscale",{"_index":371,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["scaling",{"_index":362,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["scene",{"_index":44,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["scene's",{"_index":2093,"title":{},"body":{"classes/StateManager.html":{}}}],["scene.background",{"_index":1850,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.getobjectbyname('vertices",{"_index":667,"title":{},"body":{"classes/ColorManager.html":{}}}],["scene.getobjectbyname(linkedtrackcollection",{"_index":676,"title":{},"body":{"classes/ColorManager.html":{}}}],["scene.phnx",{"_index":1219,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene.scale.x",{"_index":156,"title":{},"body":{"classes/ARManager.html":{}}}],["scene/geometry",{"_index":2698,"title":{},"body":{"interfaces/Window.html":{}}}],["scenecolor",{"_index":1849,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":1207,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":1216,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":2745,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":2748,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":136,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"coverage.html":{}}}],["scenemanager.event_data_id",{"_index":179,"title":{},"body":{"classes/ARManager.html":{}}}],["scenemanager.geometries_id",{"_index":180,"title":{},"body":{"classes/ARManager.html":{}}}],["scenemanager.labels_id",{"_index":181,"title":{},"body":{"classes/ARManager.html":{}}}],["scenescale",{"_index":70,"title":{},"body":{"classes/ARManager.html":{}}}],["sceneurl",{"_index":2763,"title":{},"body":{"interfaces/Window.html":{}}}],["screen",{"_index":2781,"title":{},"body":{"interfaces/Window.html":{}}}],["screenshot",{"_index":3363,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":1885,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{},"index.html":{}}}],["script[src",{"_index":1908,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement",{"_index":1910,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.addeventlistener('load",{"_index":1916,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.onerror",{"_index":1919,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.setattribute('data",{"_index":1915,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.src",{"_index":1914,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.type",{"_index":1912,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists",{"_index":1906,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists.length",{"_index":1909,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].addeventlistener('load",{"_index":1925,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].dataset.loaded",{"_index":1924,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptfor",{"_index":1891,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptloader",{"_index":1883,"title":{"classes/ScriptLoader.html":{}},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["scripts",{"_index":1888,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["scripturl",{"_index":1897,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["search",{"_index":2346,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["second",{"_index":1274,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"miscellaneous/variables.html":{}}}],["secondary",{"_index":1795,"title":{},"body":{"classes/RendererManager.html":{}}}],["see",{"_index":938,"title":{},"body":{"classes/CoordinateHelper.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["select",{"_index":2496,"title":{},"body":{"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["selected",{"_index":744,"title":{},"body":{"classes/ColorOptions.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["selectedcolorbyoption",{"_index":689,"title":{},"body":{"classes/ColorOptions.html":{}}}],["selectedobject",{"_index":1936,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectend",{"_index":2524,"title":{},"body":{"classes/VRManager.html":{}}}],["selecting",{"_index":1968,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":1928,"title":{},"body":{"classes/SelectionManager.html":{},"changelog.html":{}}}],["selectionmanager",{"_index":1926,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["selectstart",{"_index":2522,"title":{},"body":{"classes/VRManager.html":{}}}],["separate",{"_index":3254,"title":{},"body":{"changelog.html":{}}}],["separated",{"_index":756,"title":{},"body":{"classes/ColorOptions.html":{}}}],["separator",{"_index":2655,"title":{},"body":{"interfaces/Window.html":{}}}],["service",{"_index":1359,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"index.html":{}}}],["session",{"_index":83,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["session.addeventlistener('end",{"_index":2834,"title":{},"body":{"classes/XRManager.html":{}}}],["session_type",{"_index":23,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["sessioninit",{"_index":30,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["sessiontype",{"_index":2816,"title":{},"body":{"classes/XRManager.html":{}}}],["set",{"_index":101,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["set/get",{"_index":1866,"title":{},"body":{"classes/RendererManager.html":{}}}],["setantialiasing",{"_index":1045,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setantialiasing(antialias",{"_index":1075,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setcamera",{"_index":2102,"title":{},"body":{"classes/StateManager.html":{}}}],["setcamera(camera",{"_index":2118,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled",{"_index":2103,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled(clipping",{"_index":2119,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay",{"_index":2104,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay(eventdisplay",{"_index":2121,"title":{},"body":{"classes/StateManager.html":{}}}],["setfixoverlay",{"_index":1785,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":1819,"title":{},"body":{"classes/RendererManager.html":{}}}],["setflat",{"_index":2662,"title":{},"body":{"interfaces/Window.html":{}}}],["setinterval",{"_index":2558,"title":{},"body":{"classes/VRManager.html":{}}}],["setlocalclippingenabled",{"_index":1786,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":1821,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":1787,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":1823,"title":{},"body":{"classes/RendererManager.html":{}}}],["setopeningclippingangle",{"_index":2105,"title":{},"body":{"classes/StateManager.html":{}}}],["setopeningclippingangle(angle",{"_index":2123,"title":{},"body":{"classes/StateManager.html":{}}}],["setoverlayrenderer",{"_index":1788,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":1824,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["setphoenixmenuroot",{"_index":2106,"title":{},"body":{"classes/StateManager.html":{}}}],["setphoenixmenuroot(phoenixmenuroot",{"_index":2125,"title":{},"body":{"classes/StateManager.html":{}}}],["setrenderers",{"_index":1789,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":1828,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":2770,"title":{},"body":{"interfaces/Window.html":{}}}],["setselectedobject",{"_index":1944,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":1985,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":1945,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":1987,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setstartclippingangle",{"_index":2107,"title":{},"body":{"classes/StateManager.html":{}}}],["setstartclippingangle(angle",{"_index":2127,"title":{},"body":{"classes/StateManager.html":{}}}],["settimeout",{"_index":527,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":1811,"title":{},"body":{"classes/RendererManager.html":{}}}],["settings",{"_index":2574,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/enumerations.html":{}}}],["settolocalstorage",{"_index":3424,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setup",{"_index":3100,"title":{},"body":{"changelog.html":{}}}],["setupvrcontrols",{"_index":2491,"title":{},"body":{"classes/VRManager.html":{}}}],["setxrsession",{"_index":41,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["setxrsession(renderer",{"_index":130,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["shade",{"_index":3354,"title":{},"body":{"changelog.html":{}}}],["shaded",{"_index":2663,"title":{},"body":{"interfaces/Window.html":{}}}],["shader",{"_index":2252,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shaderchunk",{"_index":2177,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shaderchunk['tracks_frag",{"_index":2303,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shaderchunk['tracks_vert",{"_index":2253,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shadermaterial",{"_index":2172,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shadre",{"_index":2302,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["sharable",{"_index":3140,"title":{},"body":{"changelog.html":{}}}],["share",{"_index":3214,"title":{},"body":{"changelog.html":{}}}],["shouldcolorbycharge",{"_index":699,"title":{},"body":{"classes/ColorOptions.html":{}}}],["shouldcolorbycharge(objectparams",{"_index":768,"title":{},"body":{"classes/ColorOptions.html":{}}}],["show",{"_index":511,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["show/hide",{"_index":1609,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["showing",{"_index":1141,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["shown",{"_index":1350,"title":{},"body":{"classes/InfoLogger.html":{}}}],["shows",{"_index":65,"title":{},"body":{"classes/ARManager.html":{}}}],["si",{"_index":1251,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["side",{"_index":596,"title":{},"body":{"classes/CMSObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{}}}],["sides",{"_index":2659,"title":{},"body":{"interfaces/Window.html":{}}}],["simple",{"_index":2907,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["simplify",{"_index":3005,"title":{},"body":{"changelog.html":{}}}],["single",{"_index":522,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["singleton",{"_index":1378,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["size",{"_index":474,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["slider",{"_index":997,"title":{},"body":{"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["sliders",{"_index":3156,"title":{},"body":{"changelog.html":{}}}],["slidervalue",{"_index":833,"title":{},"body":{"classes/ColorOptions.html":{}}}],["smaller",{"_index":2734,"title":{},"body":{"interfaces/Window.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{}}}],["space",{"_index":1324,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["spec",{"_index":3332,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":2731,"title":{},"body":{"interfaces/Window.html":{}}}],["specified",{"_index":1644,"title":{},"body":{"classes/PresetView.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":975,"title":{},"body":{"classes/Cut.html":{},"interfaces/Window.html":{}}}],["sphere",{"_index":244,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["sphere(new",{"_index":326,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["sphere.attributes.position",{"_index":452,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spheregeometry",{"_index":243,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spheregeometry(1",{"_index":448,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spheregeometry(particlesize",{"_index":482,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spherical",{"_index":447,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["sphericaltocartesian",{"_index":903,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["sphericaltocartesian(radius",{"_index":943,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["split",{"_index":3257,"title":{},"body":{"changelog.html":{}}}],["splitting",{"_index":3259,"title":{},"body":{"changelog.html":{}}}],["src/.../active",{"_index":3541,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../browser",{"_index":3558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../color",{"_index":3496,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../config",{"_index":3543,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../constants.ts",{"_index":3557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.ts",{"_index":3560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../geometry",{"_index":3552,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../index.ts",{"_index":3556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../labels.ts",{"_index":3559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../preset",{"_index":3495,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../url",{"_index":3561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../xr",{"_index":3497,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../zip.ts",{"_index":3562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/event",{"_index":2570,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["src/helpers/active",{"_index":187,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/helpers/browser",{"_index":3420,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/constants.ts",{"_index":3425,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/coordinate",{"_index":894,"title":{},"body":{"classes/CoordinateHelper.html":{},"coverage.html":{}}}],["src/helpers/file.ts",{"_index":3427,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/info",{"_index":1341,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["src/helpers/labels.ts",{"_index":3429,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/pretty",{"_index":1674,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["src/helpers/rk",{"_index":1726,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["src/helpers/runge",{"_index":1233,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["src/helpers/zip.ts",{"_index":3433,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/models/cut.model.ts",{"_index":974,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/lib/models/cut.model.ts:10",{"_index":1001,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:12",{"_index":992,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:24",{"_index":1007,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:25",{"_index":1011,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:26",{"_index":1009,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:27",{"_index":1012,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:28",{"_index":1010,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:29",{"_index":1008,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:38",{"_index":1017,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:43",{"_index":1020,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:48",{"_index":1014,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:58",{"_index":1021,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:6",{"_index":1006,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:8",{"_index":1005,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/preset",{"_index":1640,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/types/configuration.ts",{"_index":852,"title":{},"body":{"interfaces/Configuration.html":{},"coverage.html":{}}}],["src/lib/types/geometry",{"_index":3555,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/loaders/cms",{"_index":3437,"title":{},"body":{"coverage.html":{}}}],["src/loaders/edm4hep",{"_index":3439,"title":{},"body":{"coverage.html":{}}}],["src/loaders/event",{"_index":1108,"title":{},"body":{"interfaces/EventDataLoader.html":{},"coverage.html":{}}}],["src/loaders/jivexml",{"_index":3443,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jsroot",{"_index":3445,"title":{},"body":{"coverage.html":{}}}],["src/loaders/objects/cms",{"_index":542,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/loaders/objects/phoenix",{"_index":3447,"title":{},"body":{"coverage.html":{}}}],["src/loaders/objects/tracks.ts",{"_index":2170,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{}}}],["src/loaders/objects/tracks.ts:102",{"_index":2331,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:17",{"_index":2325,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:19",{"_index":2326,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:21",{"_index":2327,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:23",{"_index":2324,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:230",{"_index":2175,"title":{},"body":{"classes/TracksMaterial.html":{}}}],["src/loaders/objects/tracks.ts:25",{"_index":2321,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:27",{"_index":2322,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:29",{"_index":2329,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:31",{"_index":2328,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:33",{"_index":2323,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:35",{"_index":2320,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:60",{"_index":2330,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/phoenix",{"_index":3450,"title":{},"body":{"coverage.html":{}}}],["src/loaders/script",{"_index":1884,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["src/loaders/trackml",{"_index":3452,"title":{},"body":{"coverage.html":{}}}],["src/managers/loading",{"_index":1366,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["src/managers/state",{"_index":2092,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{}}}],["src/managers/three",{"_index":6,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/managers/ui",{"_index":681,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/managers/url",{"_index":2333,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":3515,"title":{},"body":{"index.html":{}}}],["start",{"_index":227,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["start.chain(startxaxis",{"_index":307,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["start.start",{"_index":311,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startangle",{"_index":2153,"title":{},"body":{"classes/StateManager.html":{}}}],["startclippingangle",{"_index":2097,"title":{},"body":{"classes/StateManager.html":{}}}],["startclone.delay(500",{"_index":306,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startdir",{"_index":1325,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["started",{"_index":115,"title":{"changelog.html":{},"index.html":{}},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["starting",{"_index":1090,"title":{},"body":{"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{}}}],["startpos",{"_index":281,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["startpos[2",{"_index":294,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["starts",{"_index":133,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["startxaxis",{"_index":295,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startxaxis.chain(rotatestart",{"_index":308,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["state",{"_index":1244,"title":{"classes/State.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["state.dir",{"_index":1276,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.add",{"_index":1316,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().cross(b_first).multiplyscalar(qop",{"_index":1270,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.cross(b_first",{"_index":1268,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.normalize",{"_index":1321,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.p",{"_index":1256,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos",{"_index":1275,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.add(state.dir.clone().multiplyscalar(fh)).add",{"_index":1312,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.q",{"_index":1254,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.stepsize",{"_index":1307,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.unitc",{"_index":1255,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["statemanager",{"_index":2091,"title":{"classes/StateManager.html":{}},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["statemanager.instance",{"_index":2130,"title":{},"body":{"classes/StateManager.html":{}}}],["statemanager.loadstatefromjson(jsonstate",{"_index":2410,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["statements",{"_index":3416,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["stats",{"_index":2470,"title":{},"body":{"classes/URLOptionsManager.html":{},"dependencies.html":{}}}],["statselement",{"_index":2469,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["step",{"_index":304,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["step(state",{"_index":1247,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepdistance",{"_index":2501,"title":{},"body":{"classes/VRManager.html":{}}}],["steps",{"_index":1323,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepsize",{"_index":2079,"title":{},"body":{"classes/State.html":{}}}],["still",{"_index":145,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["stop",{"_index":2561,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["storage",{"_index":3013,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["storage.ts",{"_index":3421,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stored",{"_index":753,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["storing",{"_index":2589,"title":{},"body":{"interfaces/Window.html":{}}}],["string",{"_index":80,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":1154,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["style.setproperty('display",{"_index":2475,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["styles",{"_index":3136,"title":{},"body":{"changelog.html":{}}}],["sub",{"_index":2657,"title":{},"body":{"interfaces/Window.html":{}}}],["subfolder",{"_index":1618,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["super",{"_index":2186,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["super(xrsessiontype.ar",{"_index":154,"title":{},"body":{"classes/ARManager.html":{}}}],["super(xrsessiontype.vr",{"_index":2514,"title":{},"body":{"classes/VRManager.html":{}}}],["super.onxrsessionended",{"_index":178,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["super.onxrsessionstarted(session",{"_index":175,"title":{},"body":{"classes/ARManager.html":{}}}],["super.setxrsession(renderer",{"_index":2519,"title":{},"body":{"classes/VRManager.html":{}}}],["support",{"_index":3229,"title":{},"body":{"changelog.html":{}}}],["sure",{"_index":2955,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":1673,"title":{},"body":{"classes/PresetView.html":{}}}],["swap",{"_index":1833,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":1835,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":1790,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":1830,"title":{},"body":{"classes/RendererManager.html":{}}}],["switch",{"_index":3242,"title":{},"body":{"changelog.html":{}}}],["switching",{"_index":881,"title":{},"body":{"interfaces/Configuration.html":{}}}],["symbol",{"_index":1692,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols",{"_index":775,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{}}}],["symbols.ts",{"_index":1675,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["symbols.ts:24",{"_index":1691,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:37",{"_index":1687,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:6",{"_index":1685,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["t",{"_index":198,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{}}}],["table",{"_index":3478,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3477,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1896,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["take",{"_index":2046,"title":{},"body":{"classes/SelectionManager.html":{}}}],["taken",{"_index":2691,"title":{},"body":{"interfaces/Window.html":{}}}],["takes",{"_index":1132,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["target",{"_index":1646,"title":{},"body":{"classes/PresetView.html":{}}}],["temp",{"_index":1875,"title":{},"body":{"classes/RendererManager.html":{}}}],["tempanchor",{"_index":3630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.click",{"_index":3636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.download",{"_index":3635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.href",{"_index":3633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.remove",{"_index":3637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.style.display",{"_index":3632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["templates",{"_index":2984,"title":{},"body":{"changelog.html":{}}}],["temporary",{"_index":919,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["tesla",{"_index":1238,"title":{},"body":{"classes/Field.html":{}}}],["tested",{"_index":1742,"title":{},"body":{"classes/RKHelper.html":{}}}],["tests",{"_index":2921,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":2052,"title":{},"body":{"classes/SelectionManager.html":{},"changelog.html":{}}}],["text/javascript",{"_index":1913,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["text/plain",{"_index":1206,"title":{},"body":{"classes/ExportManager.html":{}}}],["theme",{"_index":878,"title":{},"body":{"interfaces/Configuration.html":{}}}],["then((jsonstate",{"_index":2409,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["then((res",{"_index":2407,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["then((session",{"_index":2830,"title":{},"body":{"classes/XRManager.html":{}}}],["theta",{"_index":912,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["thetatoeta",{"_index":904,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["thetatoeta(theta",{"_index":945,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["third",{"_index":1286,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["this._attributes",{"_index":2213,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.color",{"_index":2236,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.color.needsupdate",{"_index":2237,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.counter",{"_index":2238,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.counter.needsupdate",{"_index":2239,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.index",{"_index":2240,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.index.needsupdate",{"_index":2241,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.next",{"_index":2230,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.next.needsupdate",{"_index":2231,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.position",{"_index":2225,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.position.count",{"_index":2214,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.position.needsupdate",{"_index":2227,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.previous",{"_index":2228,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.previous.needsupdate",{"_index":2229,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.side",{"_index":2232,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.side.needsupdate",{"_index":2233,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.track_id",{"_index":2234,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.track_id.needsupdate",{"_index":2235,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.activecamera",{"_index":2168,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.fromarray",{"_index":2151,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.toarray",{"_index":2140,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activeobject",{"_index":2007,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(intersectedobject.uuid",{"_index":2034,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(object.uuid",{"_index":2076,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":1868,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":1841,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.allcolorbyoptions.filter((colorbyoption",{"_index":796,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.animateevent",{"_index":260,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateevent.bind(this",{"_index":261,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithclipping",{"_index":262,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithclipping.bind(this",{"_index":263,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithcollision(collisionduration",{"_index":528,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animatewithcollision",{"_index":519,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animatewithcollision(this.animateevent",{"_index":517,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.antialiasing",{"_index":1092,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.antialiasrender",{"_index":1093,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.applychargecoloroptions.bind(this",{"_index":717,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.applyconfigstate(nodeconfig",{"_index":1568,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyconfigstate(this.configs[configslength",{"_index":1519,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyembedoption",{"_index":2390,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyeventoptions",{"_index":2386,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyhidewidgetsoptions",{"_index":2389,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applymomcoloroptions.bind(this",{"_index":722,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.applyvertexcoloroptions.bind(this",{"_index":724,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.buildeventdatafromjson(event",{"_index":2647,"title":{},"body":{"interfaces/Window.html":{}}}],["this.buildgeometryfromparameters(parameters",{"_index":2768,"title":{},"body":{"interfaces/Window.html":{}}}],["this.callbacks.foreach((callback",{"_index":214,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.callbacks.push(callback",{"_index":216,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.camera",{"_index":1085,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.camera.near",{"_index":170,"title":{},"body":{"classes/ARManager.html":{}}}],["this.cameragroup",{"_index":2840,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.add(this.xrcamera",{"_index":2851,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.position.addscaledvector(direction",{"_index":2568,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.copy(cameraposition",{"_index":2850,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.position.toarray().join",{"_index":2557,"title":{},"body":{"classes/VRManager.html":{}}}],["this.camerapos",{"_index":1667,"title":{},"body":{"classes/PresetView.html":{}}}],["this.cameratarget",{"_index":1668,"title":{},"body":{"classes/PresetView.html":{}}}],["this.chargecolors[chargevalue",{"_index":814,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.children",{"_index":1501,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.filter",{"_index":1572,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.indexof(child",{"_index":1510,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.push(child",{"_index":1508,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.splice(childindex",{"_index":1511,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrenactive",{"_index":1548,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrentogglestate[child.name",{"_index":1522,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.clipping",{"_index":1669,"title":{},"body":{"classes/PresetView.html":{}}}],["this.clippingenabled.update(clipping",{"_index":2165,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled.value",{"_index":2141,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingopeningangle",{"_index":1671,"title":{},"body":{"classes/PresetView.html":{}}}],["this.clippingstartangle",{"_index":1670,"title":{},"body":{"classes/PresetView.html":{}}}],["this.collectionname",{"_index":780,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.collideparticles(1500",{"_index":513,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.colorbymomentum('max",{"_index":835,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbymomentum('min",{"_index":834,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbymomentum(key",{"_index":838,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions",{"_index":795,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.find",{"_index":809,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.foreach((colorbyoption",{"_index":799,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.map((colorbyoption",{"_index":805,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions[0].key",{"_index":803,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.collectioncolor(this.collectionname",{"_index":789,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.collectioncolorrandom(this.collectionname",{"_index":792,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.colorobjectsbyproperty",{"_index":815,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.colortracksbyvertex(this.collectionname",{"_index":846,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder",{"_index":782,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('button",{"_index":790,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('color",{"_index":784,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('select",{"_index":804,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('slider",{"_index":828,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.configs.foreach((config",{"_index":847,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colors",{"_index":2194,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.composer",{"_index":1083,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(outlinepass",{"_index":1104,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(this.defaultrenderpass",{"_index":1089,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.indexof(pass",{"_index":1106,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.splice(passindex",{"_index":1107,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.render",{"_index":1097,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.renderer.render(scene",{"_index":1098,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.computeboundingbox",{"_index":2251,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.computeboundingsphere",{"_index":2250,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.configs",{"_index":1502,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.find",{"_index":1560,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.push",{"_index":1518,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configuration",{"_index":2602,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.defaulteventfile?.eventfile",{"_index":2387,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.defaulteventfile?.eventtype",{"_index":2388,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader",{"_index":2427,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.addlabeltoeventobject",{"_index":2803,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.buildeventdata",{"_index":2639,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollection(collectionname",{"_index":2751,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollections",{"_index":2752,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventmetadata",{"_index":2757,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventslist(eventsdata",{"_index":2627,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getlabelsobject",{"_index":2811,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":1871,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controller.getworlddirection(direction",{"_index":2566,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1",{"_index":2527,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.add(line.clone",{"_index":2549,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener",{"_index":2563,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener('selectend",{"_index":2564,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.position.toarray().join",{"_index":2555,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1?.removeeventlistener",{"_index":2521,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2",{"_index":2530,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2.add(line.clone",{"_index":2550,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1",{"_index":2534,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1.add",{"_index":2536,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2",{"_index":2539,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2.add",{"_index":2541,"title":{},"body":{"classes/VRManager.html":{}}}],["this.counter",{"_index":2192,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.currentxrsession",{"_index":2837,"title":{},"body":{"classes/XRManager.html":{}}}],["this.currentxrsession.removeeventlistener('end",{"_index":2838,"title":{},"body":{"classes/XRManager.html":{}}}],["this.currentxrsession?.end",{"_index":2841,"title":{},"body":{"classes/XRManager.html":{}}}],["this.defaultapplymaxvalue",{"_index":1025,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultapplyminvalue",{"_index":1024,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultmaxvalue",{"_index":1023,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultminvalue",{"_index":1022,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultrenderpass",{"_index":1087,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.camera",{"_index":1095,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.scene",{"_index":1096,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.disableselecting",{"_index":2009,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager",{"_index":2003,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.addoutlinepassforselection",{"_index":2005,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.antialiasing",{"_index":2019,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.composer.renderer.domelement",{"_index":2061,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(false",{"_index":2020,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(this.preselectionantialias",{"_index":2025,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsrender",{"_index":1094,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.enableeventdisplayconsole",{"_index":2614,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablekeyboardcontrols",{"_index":2616,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":2008,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.etatotheta(eta",{"_index":957,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["this.eventdisplay",{"_index":2159,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.buildeventdatafromjson(eventdata",{"_index":2431,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getinfologger().add('could",{"_index":2445,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_config",{"_index":2405,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_event",{"_index":2418,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_config",{"_index":2412,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_event",{"_index":2424,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getuimanager().setclipping(true",{"_index":2158,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.parsephoenixevents(alleventsobject",{"_index":2463,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.parsephoenixevents(filedata",{"_index":2433,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventsdata",{"_index":2626,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":2646,"title":{},"body":{"interfaces/Window.html":{}}}],["this.fixedoverlay",{"_index":1879,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getcameragroup().add(this.controller1",{"_index":2529,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controller2",{"_index":2532,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip1",{"_index":2538,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip2",{"_index":2543,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameratween",{"_index":530,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(alongaxisposition",{"_index":296,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(position",{"_index":537,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(startpos",{"_index":287,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.gethitspositions(obj.position",{"_index":411,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getmainrenderer",{"_index":1860,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setanimationloop(null",{"_index":1844,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmomentum(objectparams",{"_index":840,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.getoverlayrenderer",{"_index":1847,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":1848,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render(scene",{"_index":1852,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getstatemanager().seteventdisplay(this",{"_index":2605,"title":{},"body":{"interfaces/Window.html":{}}}],["this.getthreemanager().getscenemanager().getscene",{"_index":2769,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary",{"_index":2596,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addgeometryfromparameters(parameters",{"_index":2728,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addlabeltoobject(label",{"_index":2806,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateclippingwithcollision(tweenduration",{"_index":2801,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateeventwithcollision(tweenduration",{"_index":2800,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animatepreset(animationpreset",{"_index":2799,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animatethroughevent",{"_index":2797,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":2638,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.disablehighlighting",{"_index":2793,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablehighlighting",{"_index":2792,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablekeyboardcontrols",{"_index":2796,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":2783,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.endxrsession(xrsessiontype",{"_index":2620,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":2690,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":2677,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":2786,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":2787,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":2791,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":2603,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.initxrsession(xrsessiontype",{"_index":2618,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry",{"_index":2701,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry",{"_index":2706,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry",{"_index":2666,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":2790,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(input",{"_index":2696,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry",{"_index":2674,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsephnxscene(phoenixscene.scene",{"_index":2687,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setanimationloop(uiloop",{"_index":2608,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":2773,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":2777,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":2739,"title":{},"body":{"interfaces/Window.html":{}}}],["this.handlejivexmlevent(fileurl",{"_index":2415,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.handlejsonevent(fileurl",{"_index":2417,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.handlezipfileevents(fileurl",{"_index":2416,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.hideidswithurloption(hidewidgetsoptions",{"_index":2472,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.icon",{"_index":1499,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":1998,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":2028,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.indices_array",{"_index":2195,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.infologger",{"_index":2002,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":2678,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":2055,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":2669,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":1364,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.length",{"_index":1360,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.pop",{"_index":1362,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.unshift(label",{"_index":1363,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.init(configuration",{"_index":2600,"title":{},"body":{"interfaces/Window.html":{}}}],["this.initchargecoloroptions.bind(this",{"_index":715,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initcolorbyoptions",{"_index":798,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initmomcoloroptions.bind(this",{"_index":721,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initrenderer(elementid",{"_index":1846,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.intersectobject(event",{"_index":2027,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":1851,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":1997,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.istracksmaterial",{"_index":2311,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.loaded",{"_index":1427,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.length",{"_index":1410,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.push(id",{"_index":1406,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.sort().join",{"_index":1412,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loadevent(eventkeys[0",{"_index":2628,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":2764,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager",{"_index":2595,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_geom",{"_index":2718,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_json_geom",{"_index":2709,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`gltf_geom_${name",{"_index":2700,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`json_geom_${name",{"_index":2705,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`obj_geom_${name",{"_index":2665,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_gltf_${name",{"_index":2694,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_obj_${name",{"_index":2673,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_phnx_${name",{"_index":2686,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_geom",{"_index":2725,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_json_geom",{"_index":2715,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`gltf_geom_${name",{"_index":2702,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`json_geom_${name",{"_index":2707,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`obj_geom_${name",{"_index":2668,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`parse_gltf_${name",{"_index":2697,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`parse_obj_${name",{"_index":2675,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`parse_phnx_${name",{"_index":2688,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry",{"_index":2711,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjgeometry(filename",{"_index":2766,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":2685,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadstatefromjson(json.parse(data",{"_index":2136,"title":{},"body":{"classes/StateManager.html":{}}}],["this.mainrenderer",{"_index":1867,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxcutactive",{"_index":1026,"title":{},"body":{"classes/Cut.html":{}}}],["this.maxentries",{"_index":1361,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.maxvalue",{"_index":1029,"title":{},"body":{"classes/Cut.html":{}}}],["this.mincutactive",{"_index":1027,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":1028,"title":{},"body":{"classes/Cut.html":{}}}],["this.momcolors.max.value",{"_index":830,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors.min.value",{"_index":829,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[key].color",{"_index":837,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[key].value",{"_index":831,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[minormax].color",{"_index":839,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.moveindirection(direction",{"_index":2559,"title":{},"body":{"classes/VRManager.html":{}}}],["this.name",{"_index":1498,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.next",{"_index":2190,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.next.push(p.x",{"_index":2205,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.next.push(points[i].x",{"_index":2209,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.next_track_id",{"_index":2196,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.nodelevel",{"_index":1507,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.oncontrollerselectend",{"_index":2525,"title":{},"body":{"classes/VRManager.html":{}}}],["this.oncontrollerselectstart",{"_index":2523,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":2640,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":2754,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":2015,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach((callback",{"_index":2629,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":2756,"title":{},"body":{"interfaces/Window.html":{}}}],["this.onloadcallbacks",{"_index":1428,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.foreach((callback",{"_index":1413,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.push(callback",{"_index":1424,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onlyselectedcolorbyoption",{"_index":801,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.onprogress(id",{"_index":1407,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks",{"_index":1422,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks.push(callback",{"_index":1425,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onsessionended",{"_index":2823,"title":{},"body":{"classes/XRManager.html":{}}}],["this.ontoggle",{"_index":1500,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(this.togglestate",{"_index":1556,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(value",{"_index":1520,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontouchdown",{"_index":2017,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove",{"_index":2013,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove(event.targettouches[0",{"_index":2059,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.onxrsessionended",{"_index":2839,"title":{},"body":{"classes/XRManager.html":{}}}],["this.onxrsessionended.bind(this",{"_index":2835,"title":{},"body":{"classes/XRManager.html":{}}}],["this.onxrsessionstarted.bind(this)(session",{"_index":2831,"title":{},"body":{"classes/XRManager.html":{}}}],["this.openingclippingangle.update(angle",{"_index":2167,"title":{},"body":{"classes/StateManager.html":{}}}],["this.openingclippingangle.value",{"_index":2143,"title":{},"body":{"classes/StateManager.html":{}}}],["this.outlinepass",{"_index":2004,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":2024,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":2029,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":1869,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parent",{"_index":1503,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent.removechild(this",{"_index":1512,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.phoenixmenuroot",{"_index":2131,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.configactive",{"_index":2149,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.getnodestate",{"_index":2138,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.loadstatefromjson(jsondata['phoenixmenu",{"_index":2148,"title":{},"body":{"classes/StateManager.html":{}}}],["this.positions",{"_index":2188,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.positions.length",{"_index":2215,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.preselectionantialias",{"_index":2018,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.previous",{"_index":2189,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.previous.push(points[0].x",{"_index":2202,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.previousvalues.cameranear",{"_index":157,"title":{},"body":{"classes/ARManager.html":{}}}],["this.previousvalues.scenescale",{"_index":155,"title":{},"body":{"classes/ARManager.html":{}}}],["this.process",{"_index":2212,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.progressitems",{"_index":1429,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.progressitems[id",{"_index":1405,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.render",{"_index":1091,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.renderer",{"_index":2822,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderer.xr",{"_index":2843,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderer.xr.getcontroller(0",{"_index":2528,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(1",{"_index":2531,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(0",{"_index":2535,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(1",{"_index":2540,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.setreferencespacetype('local",{"_index":173,"title":{},"body":{"classes/ARManager.html":{}}}],["this.renderer.xr.setsession(session",{"_index":2836,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderermanager.getmainrenderer().localclippingenabled",{"_index":466,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.renderers",{"_index":1870,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":1873,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.length",{"_index":1877,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":1872,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":1874,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers[0].localclippingenabled",{"_index":1878,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.reset",{"_index":1414,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.resetlabels",{"_index":2633,"title":{},"body":{"interfaces/Window.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":1221,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":1223,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":1208,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestateasjson",{"_index":2134,"title":{},"body":{"classes/StateManager.html":{}}}],["this.scalescene(0.00001",{"_index":171,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scalescene(this.previousvalues.scenescale",{"_index":177,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scene",{"_index":1086,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.scene.add(...particles",{"_index":492,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.getobjectbyname(groupname)?.scale.setscalar(scale",{"_index":183,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id",{"_index":324,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id).visible",{"_index":526,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.remove(...particles",{"_index":500,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.scale.x",{"_index":169,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scenemanager",{"_index":656,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.scenemanager.getscene",{"_index":666,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.scenemanager.getscene().getobjectbyname(objectsgroup",{"_index":651,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.selectedcolorbyoption",{"_index":802,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.selectedobject",{"_index":2006,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":2033,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":2039,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice",{"_index":2032,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":2030,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.sessioninit",{"_index":159,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["this.sessiontype",{"_index":2827,"title":{},"body":{"classes/XRManager.html":{}}}],["this.setattribute('color",{"_index":2247,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('counter",{"_index":2248,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('next",{"_index":2244,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('position",{"_index":2242,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('previous",{"_index":2243,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('side",{"_index":2245,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('track_id",{"_index":2246,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setclippingenabled(true",{"_index":2157,"title":{},"body":{"classes/StateManager.html":{}}}],["this.setindex(this._attributes.index",{"_index":2249,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setmainrenderer(renderer",{"_index":1842,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setupvrcontrols",{"_index":2520,"title":{},"body":{"classes/VRManager.html":{}}}],["this.setvalues(params",{"_index":2318,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.shouldcolorbycharge(objectuserdata",{"_index":816,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.side",{"_index":2191,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.startclippingangle.update(angle",{"_index":2166,"title":{},"body":{"classes/StateManager.html":{}}}],["this.startclippingangle.value",{"_index":2142,"title":{},"body":{"classes/StateManager.html":{}}}],["this.statemanager",{"_index":2651,"title":{},"body":{"interfaces/Window.html":{}}}],["this.togglestate",{"_index":1521,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.toload",{"_index":1426,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.length",{"_index":1409,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.push(id",{"_index":1404,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.sort().join",{"_index":1411,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.track_id",{"_index":2193,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.type",{"_index":2187,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.ui",{"_index":2598,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addcollection(objecttype",{"_index":2746,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatafolder",{"_index":2634,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(objecttype",{"_index":2744,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(geom",{"_index":2749,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(object",{"_index":2667,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabel(labelid",{"_index":2805,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabelsfolder",{"_index":2635,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.enablekeyboardcontrols",{"_index":2795,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.init(configuration",{"_index":2604,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.loadeventfolderphoenixmenustate",{"_index":2643,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.removelabel(labelid",{"_index":2804,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":2607,"title":{},"body":{"interfaces/Window.html":{}}}],["this.uniforms.linewidth.value",{"_index":2314,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.uniforms.progress.value",{"_index":2317,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.uniforms.resolution.value",{"_index":2315,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.uniforms.resolution.value.copy(value",{"_index":2316,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.urloptions",{"_index":2384,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('config",{"_index":2404,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('embed",{"_index":2473,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('file",{"_index":2393,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type",{"_index":2394,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type').tolowercase",{"_index":2401,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get(urloption",{"_index":2478,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptionsmanager",{"_index":2609,"title":{},"body":{"interfaces/Window.html":{}}}],["this.urloptionsmanager.applyoptions",{"_index":2612,"title":{},"body":{"interfaces/Window.html":{}}}],["this.value",{"_index":213,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.xractive",{"_index":2833,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera",{"_index":2842,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.name",{"_index":2847,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.position",{"_index":2849,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.position.addscaledvector(direction",{"_index":2569,"title":{},"body":{"classes/VRManager.html":{}}}],["this.xrcamera?.getworlddirection(direction",{"_index":2567,"title":{},"body":{"classes/VRManager.html":{}}}],["thr",{"_index":2726,"title":{},"body":{"interfaces/Window.html":{}}}],["three",{"_index":135,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"dependencies.html":{}}}],["three,js",{"_index":1817,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.js",{"_index":55,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":1197,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":1195,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer",{"_index":1077,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass",{"_index":1081,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":1993,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/pass",{"_index":1082,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass",{"_index":1080,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/webxr/xrcontrollermodelfactory",{"_index":2511,"title":{},"body":{"classes/VRManager.html":{}}}],["threejs",{"_index":931,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["threemanager",{"_index":1127,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["threemanager(this.infologger",{"_index":2597,"title":{},"body":{"interfaces/Window.html":{}}}],["through",{"_index":280,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["throwing",{"_index":3042,"title":{},"body":{"changelog.html":{}}}],["time",{"_index":226,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["title",{"_index":3605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tmp1",{"_index":948,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["tmp2",{"_index":947,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["toggle",{"_index":1456,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["toggled",{"_index":3128,"title":{},"body":{"changelog.html":{}}}],["toggles",{"_index":1608,"title":{},"body":{"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["toggleselfanddescendants",{"_index":1448,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggleselfanddescendants(value",{"_index":1490,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["togglestate",{"_index":1439,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggling",{"_index":1452,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["tojson",{"_index":2714,"title":{},"body":{"interfaces/Window.html":{}}}],["toload",{"_index":1371,"title":{},"body":{"classes/LoadingManager.html":{}}}],["top",{"_index":68,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{}}}],["totalitems",{"_index":1419,"title":{},"body":{"classes/LoadingManager.html":{}}}],["totalprogress",{"_index":1415,"title":{},"body":{"classes/LoadingManager.html":{}}}],["touch",{"_index":1958,"title":{},"body":{"classes/SelectionManager.html":{}}}],["touchevent",{"_index":2057,"title":{},"body":{"classes/SelectionManager.html":{}}}],["towards",{"_index":2503,"title":{},"body":{"classes/VRManager.html":{}}}],["track",{"_index":339,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{}}}],["track.children[0",{"_index":507,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["track.dparams",{"_index":1757,"title":{},"body":{"classes/RKHelper.html":{}}}],["track.pos",{"_index":1755,"title":{},"body":{"classes/RKHelper.html":{}}}],["track_id",{"_index":2182,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["trackcollection",{"_index":675,"title":{},"body":{"classes/ColorManager.html":{}}}],["trackcollection.children[trackindex].traverse((trackobject",{"_index":678,"title":{},"body":{"classes/ColorManager.html":{}}}],["trackcolor",{"_index":506,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tracking",{"_index":2518,"title":{},"body":{"classes/VRManager.html":{}}}],["trackmlloader",{"_index":3453,"title":{},"body":{"coverage.html":{}}}],["trackobject?.['material']?.color?.set(colorfortracksvertex",{"_index":679,"title":{},"body":{"classes/ColorManager.html":{}}}],["tracks",{"_index":335,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["trackscollection",{"_index":1752,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections",{"_index":1751,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections[trackscollection",{"_index":1754,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollectionsevent",{"_index":1745,"title":{},"body":{"classes/RKHelper.html":{}}}],["tracksmaterial",{"_index":2169,"title":{"classes/TracksMaterial.html":{}},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{}}}],["tracksmesh",{"_index":249,"title":{"classes/TracksMesh.html":{}},"body":{"interfaces/AnimationPreset.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{}}}],["transformations",{"_index":3224,"title":{},"body":{"changelog.html":{}}}],["transforming/changing",{"_index":1643,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":282,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["transparent",{"_index":168,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"changelog.html":{}}}],["traverse",{"_index":330,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["traversed",{"_index":1977,"title":{},"body":{"classes/SelectionManager.html":{}}}],["tree",{"_index":1479,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["true",{"_index":59,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["truncate",{"_index":1449,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["try",{"_index":1271,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["trying",{"_index":2875,"title":{},"body":{"changelog.html":{}}}],["tryrungekuttastep",{"_index":1273,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep(state.stepsize",{"_index":1305,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tube",{"_index":3326,"title":{},"body":{"changelog.html":{}}}],["tubegeometry",{"_index":238,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween",{"_index":234,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["tween(animationclipplane).to",{"_index":458,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(animationsphere).to",{"_index":402,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(eventobject.material).to",{"_index":355,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(particle.material",{"_index":494,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(particle.position",{"_index":497,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(this.activecamera.position).to",{"_index":271,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.easing(easing",{"_index":278,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.easing(easing.quartic.out).start",{"_index":431,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.js",{"_index":253,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.start",{"_index":460,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tweenduration",{"_index":283,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["tweenjs/tween.js",{"_index":237,"title":{},"body":{"interfaces/AnimationPreset.html":{},"dependencies.html":{}}}],["tweens",{"_index":430,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["two",{"_index":470,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{}}}],["type",{"_index":53,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3539,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typename",{"_index":1613,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["typeof",{"_index":268,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["types",{"_index":1496,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["types.ts",{"_index":3544,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["types/three",{"_index":3021,"title":{},"body":{"changelog.html":{}}}],["typing",{"_index":3292,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":1128,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["ui.ts",{"_index":1589,"title":{},"body":{"interfaces/PhoenixUI.html":{},"coverage.html":{}}}],["ui.ts:11",{"_index":1630,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:16",{"_index":1620,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:23",{"_index":1616,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:28",{"_index":1607,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:34",{"_index":1612,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:43",{"_index":1604,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:54",{"_index":1627,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:61",{"_index":1623,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:68",{"_index":1637,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:75",{"_index":1634,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["uiloop",{"_index":2606,"title":{},"body":{"interfaces/Window.html":{}}}],["uimanager",{"_index":1129,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["uimanager(this.graphicslibrary",{"_index":2599,"title":{},"body":{"interfaces/Window.html":{}}}],["uimenu",{"_index":2467,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["uint32array(this.indices_array",{"_index":2224,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["undefined",{"_index":787,"title":{},"body":{"classes/ColorOptions.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["undefined/null",{"_index":1515,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["uniform",{"_index":2262,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["uniforms",{"_index":2307,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["unique",{"_index":1124,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["unit",{"_index":2090,"title":{},"body":{"classes/State.html":{},"classes/VRManager.html":{}}}],["unitc",{"_index":2080,"title":{},"body":{"classes/State.html":{}}}],["units",{"_index":1252,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["unreal",{"_index":1035,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["until",{"_index":1331,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["up",{"_index":545,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["update",{"_index":196,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["update(updatedvalue",{"_index":208,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updateanimationsphere",{"_index":405,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updateanimationsphere.containspoint",{"_index":414,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updateanimationsphere.containspoint(obj.position",{"_index":420,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updated",{"_index":149,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["updatedcolorbyoption",{"_index":807,"title":{},"body":{"classes/ColorOptions.html":{}}}],["updatedvalue",{"_index":210,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updating",{"_index":207,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{}}}],["upgrade",{"_index":3032,"title":{},"body":{"changelog.html":{}}}],["upper",{"_index":1002,"title":{},"body":{"classes/Cut.html":{},"changelog.html":{}}}],["url",{"_index":865,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["url.createobjecturl(blob",{"_index":3634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urloptions",{"_index":2334,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urloptionsmanager",{"_index":2332,"title":{"classes/URLOptionsManager.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["urloptionsmanager(this",{"_index":2610,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptionwithids",{"_index":2374,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urlsearchparams",{"_index":2345,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["usage",{"_index":2929,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["use",{"_index":84,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":110,"title":{},"body":{"classes/ARManager.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["user",{"_index":3626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":822,"title":{},"body":{"classes/ColorOptions.html":{},"changelog.html":{}}}],["uses",{"_index":952,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"index.html":{}}}],["using",{"_index":252,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["uuid",{"_index":1972,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["v1",{"_index":961,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["v2",{"_index":962,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["v_color",{"_index":2258,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["v_counter",{"_index":2259,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["v_track_id",{"_index":2261,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["val",{"_index":1418,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["val.pos.x",{"_index":1766,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.y",{"_index":1767,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.z",{"_index":1768,"title":{},"body":{"classes/RKHelper.html":{}}}],["valid",{"_index":1018,"title":{},"body":{"classes/Cut.html":{}}}],["value",{"_index":58,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":76,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["variable",{"_index":189,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["variable.ts",{"_index":188,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["variable.ts:12",{"_index":204,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:17",{"_index":203,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:23",{"_index":209,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:32",{"_index":206,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:7",{"_index":199,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variables",{"_index":2895,"title":{"miscellaneous/variables.html":{}},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":2257,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec2",{"_index":2263,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec2(resolution.x",{"_index":2267,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec3",{"_index":2254,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4",{"_index":2274,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4(next",{"_index":2280,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4(position",{"_index":2276,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4(previous",{"_index":2278,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4(v_color",{"_index":2306,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vector",{"_index":954,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/VRManager.html":{}}}],["vector.applyquaternion(coordinatehelper.atlasquaternion",{"_index":956,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector.setfromsphericalcoords(radius",{"_index":955,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector2",{"_index":1078,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vector2(1",{"_index":2308,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vector2(window.innerwidth",{"_index":1099,"title":{},"body":{"classes/EffectsManager.html":{}}}],["vector3",{"_index":240,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["vector3().fromarray(hitposition",{"_index":415,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["vector3(0",{"_index":384,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/State.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["version",{"_index":2865,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["versions",{"_index":2883,"title":{},"body":{"changelog.html":{}}}],["vertex",{"_index":453,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["vertexshader",{"_index":2309,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vertices",{"_index":451,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["vertices.traverse((object",{"_index":668,"title":{},"body":{"classes/ColorManager.html":{}}}],["view",{"_index":868,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["view.model",{"_index":885,"title":{},"body":{"interfaces/Configuration.html":{}}}],["view.model.ts",{"_index":1641,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["view.model.ts:16",{"_index":1662,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:18",{"_index":1656,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:20",{"_index":1657,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:22",{"_index":1663,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:24",{"_index":1658,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:26",{"_index":1661,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:28",{"_index":1653,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:59",{"_index":1664,"title":{},"body":{"classes/PresetView.html":{}}}],["views",{"_index":883,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["visible",{"_index":396,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["void",{"_index":112,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["volumes",{"_index":2956,"title":{},"body":{"changelog.html":{}}}],["vr",{"_index":2483,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["vrmanager",{"_index":2481,"title":{"classes/VRManager.html":{}},"body":{"classes/VRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["wait",{"_index":1923,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":2072,"title":{},"body":{"classes/SelectionManager.html":{}}}],["warning",{"_index":2396,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["warnings",{"_index":2886,"title":{},"body":{"changelog.html":{}}}],["web",{"_index":3528,"title":{},"body":{"properties.html":{}}}],["webglrenderer",{"_index":99,"title":{},"body":{"classes/ARManager.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["webglrenderers",{"_index":1808,"title":{},"body":{"classes/RendererManager.html":{}}}],["webpack",{"_index":2999,"title":{},"body":{"changelog.html":{}}}],["webxr",{"_index":144,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["well",{"_index":2968,"title":{},"body":{"changelog.html":{}}}],["whether",{"_index":61,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["whose",{"_index":190,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/PhoenixMenuNode.html":{}}}],["widgets",{"_index":2348,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["width",{"_index":3050,"title":{},"body":{"changelog.html":{}}}],["window",{"_index":2392,"title":{"interfaces/Window.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["window.addeventlistener('resize",{"_index":1865,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.eventdisplay",{"_index":2762,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":1100,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["window.innerwidth",{"_index":1857,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.location.href.substr(window.location.href.lastindexof",{"_index":2385,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["wireframe",{"_index":3227,"title":{},"body":{"changelog.html":{}}}],["wireframing",{"_index":3247,"title":{},"body":{"changelog.html":{}}}],["within",{"_index":910,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/Cut.html":{}}}],["without",{"_index":336,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"changelog.html":{},"index.html":{}}}],["work",{"_index":146,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["workaround",{"_index":348,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["working",{"_index":3036,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":124,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["wrapper",{"_index":871,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{}}}],["wrong",{"_index":3203,"title":{},"body":{"changelog.html":{}}}],["x",{"_index":272,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["x,y,z",{"_index":869,"title":{},"body":{"interfaces/Configuration.html":{}}}],["xml",{"_index":2364,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["xr",{"_index":89,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["xr_camera",{"_index":2848,"title":{},"body":{"classes/XRManager.html":{}}}],["xractive",{"_index":31,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["xrcamera",{"_index":32,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["xrcontrollermodelfactory",{"_index":2510,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager",{"_index":15,"title":{"classes/XRManager.html":{}},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["xrmanager:109",{"_index":123,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:135",{"_index":129,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:26",{"_index":108,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:28",{"_index":102,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:30",{"_index":100,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:32",{"_index":91,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:34",{"_index":95,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:36",{"_index":87,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:38",{"_index":109,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:48",{"_index":2507,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:53",{"_index":114,"title":{},"body":{"classes/ARManager.html":{}}}],["xrmanager:61",{"_index":2504,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:67",{"_index":111,"title":{},"body":{"classes/ARManager.html":{}}}],["xrmanager:78",{"_index":2508,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:99",{"_index":119,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrsessioninit",{"_index":3018,"title":{},"body":{"changelog.html":{}}}],["xrsessiontype",{"_index":137,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/enumerations.html":{}}}],["xrsessiontype.vr",{"_index":2828,"title":{},"body":{"classes/XRManager.html":{}}}],["xrtype",{"_index":2826,"title":{},"body":{"classes/XRManager.html":{}}}],["y",{"_index":274,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["yarn",{"_index":2885,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["yes",{"_index":126,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/ColorOptions.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["z",{"_index":276,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["z0",{"_index":1762,"title":{},"body":{"classes/RKHelper.html":{}}}],["zero",{"_index":3381,"title":{},"body":{"changelog.html":{}}}],["zip",{"_index":2369,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":2729,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["zoomfactor",{"_index":2735,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":2736,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":2738,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ARManager.html":{"url":"classes/ARManager.html","title":"class - ARManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ARManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/xr/ar-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                AR manager for AR related operations.\n\n            \n\n            \n                Extends\n            \n            \n                            XRManager\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                enableDomOverlay\n                            \n                            \n                                    Private\n                                previousValues\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                            \n                                    Private\n                                scaleScene\n                            \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scene: Scene, camera: PerspectiveCamera)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:22\n                            \n                        \n\n                \n                    \n                            Create the AR manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three.js scene.\n\n                                                        \n                                                \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    PerspectiveCamera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Camera in the scene.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        enableDomOverlay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:17\n                        \n                    \n\n            \n                \n                    Whether to enable DOM overlay which shows Phoenix overlays on top of the AR scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        previousValues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    sceneScale: 1,\n    cameraNear: 10,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:19\n                        \n                    \n\n            \n                \n                    Previous values of scene scale, camera near and camera position.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        SESSION_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'immersive-ar'\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:15\n                        \n                    \n\n            \n                \n                    Session type to use for AR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:36\n\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:32\n\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:34\n\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:30\n\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:28\n\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:26\n\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:38\n\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                        \n                    onXRSessionEnded()\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:67\n\n                        \n                    \n\n\n            \n                \n                        Callback when the AR session ends.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                        \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:53\n\n                        \n                    \n\n\n            \n                \n                        Callback for when the AR session is started.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The AR session.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scaleScene\n                        \n                    \n                \n            \n            \n                \n                        \n                    scaleScene(scale: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/ar-manager.ts:78\n                        \n                    \n\n\n            \n                \n                        Scale the three.js scene.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scale\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Number to scale the scene to.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    endXRSession()\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:99\n\n                        \n                    \n\n\n            \n                \n                        End the current XR session.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:109\n\n                        \n                    \n\n\n            \n                \n                        Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Camera which is to be cloned for XR use.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Group\n\n                        \n                            \n                                The camera group used in XR mode.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                        \n                    getXRCamera()\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:135\n\n                        \n                    \n\n\n            \n                \n                        Get the camera used by XR.\n\n\n                        \n                            Returns :     Camera\n\n                        \n                            \n                                The camera used by XR.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:53\n\n                        \n                    \n\n\n            \n                \n                        Set and configure the XR session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderer\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Renderer to set the XR session for.\n\n                                            \n                                        \n                                        \n                                                onSessionStarted\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Callback to call when the XR session starts.\n\n                                            \n                                        \n                                        \n                                                onSessionEnded\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Callback to call when the XR session ends.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PerspectiveCamera, Scene } from 'three';\nimport { SceneManager } from '../scene-manager';\nimport { XRManager, XRSessionType } from './xr-manager';\n\n// NOTE: This was created on 28/06/2021\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 07/07/2021\n\n/**\n * AR manager for AR related operations.\n */\nexport class ARManager extends XRManager {\n  /** Session type to use for AR. */\n  static readonly SESSION_TYPE: string = 'immersive-ar';\n  /** Whether to enable DOM overlay which shows Phoenix overlays on top of the AR scene. */\n  public static enableDomOverlay: boolean = true;\n  /** Previous values of scene scale, camera near and camera position. */\n  private previousValues = {\n    sceneScale: 1,\n    cameraNear: 10,\n  };\n\n  /**\n   * Create the AR manager.\n   * @param scene The three.js scene.\n   * @param camera Camera in the scene.\n   * @override\n   */\n  constructor(\n    private scene: Scene,\n    private camera: PerspectiveCamera,\n  ) {\n    super(XRSessionType.AR);\n\n    this.previousValues.sceneScale = scene.scale.x;\n    this.previousValues.cameraNear = camera.near;\n    this.sessionInit = () => {\n      return ARManager.enableDomOverlay\n        ? {\n            optionalFeatures: ['dom-overlay'],\n            domOverlay: { root: document.body },\n          }\n        : {};\n    };\n  }\n\n  /**\n   * Callback for when the AR session is started.\n   * @param session The AR session.\n   * @override\n   */\n  protected async onXRSessionStarted(session: any) {\n    document.body.style.setProperty('background-color', 'transparent');\n    this.previousValues.sceneScale = this.scene.scale.x;\n    this.previousValues.cameraNear = this.camera.near;\n    this.scaleScene(0.00001);\n    this.camera.near = 0.01;\n    this.renderer.xr.setReferenceSpaceType('local');\n    await super.onXRSessionStarted(session);\n  }\n\n  /**\n   * Callback when the AR session ends.\n   * @override\n   */\n  protected onXRSessionEnded() {\n    document.body.style.removeProperty('background-color');\n    this.scaleScene(this.previousValues.sceneScale);\n    this.camera.near = this.previousValues.cameraNear;\n    super.onXRSessionEnded();\n  }\n\n  /**\n   * Scale the three.js scene.\n   * @param scale Number to scale the scene to.\n   */\n  private scaleScene(scale: number) {\n    [\n      SceneManager.EVENT_DATA_ID,\n      SceneManager.GEOMETRIES_ID,\n      SceneManager.LABELS_ID,\n    ].forEach((groupName) => {\n      this.scene.getObjectByName(groupName)?.scale.setScalar(scale);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActiveVariable.html":{"url":"classes/ActiveVariable.html","title":"class - ActiveVariable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActiveVariable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/active-variable.ts\n        \n\n\n            \n                Description\n            \n            \n                An active variable whose value can be changed and the change can be observed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callbacks\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                onUpdate\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value?: T)\n                    \n                \n                        \n                            \n                                Defined in src/helpers/active-variable.ts:7\n                            \n                        \n\n                \n                    \n                            Create the observable active variable.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Initial value.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        callbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CallbackFunction[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/helpers/active-variable.ts:17\n                        \n                    \n\n            \n                \n                    Callbacks to call on update.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/helpers/active-variable.ts:12\n                        \n                    \n\n            \n                \n                    Initial value.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        onUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    onUpdate(callback: CallbackFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/active-variable.ts:32\n                        \n                    \n\n\n            \n                \n                        Call a function on updating the value of variable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            CallbackFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Callback to call with updated value when the variable is updated.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updatedValue: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/active-variable.ts:23\n                        \n                    \n\n\n            \n                \n                        Update the value of variable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatedValue\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    New updated value.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export type CallbackFunction = (updatedValue: T) => void;\n\n/**\n * An active variable whose value can be changed and the change can be observed.\n */\nexport class ActiveVariable {\n  /**\n   * Create the observable active variable.\n   * @param value Initial value.\n   */\n  constructor(public value?: T) {}\n\n  /**\n   * Callbacks to call on update.\n   */\n  private callbacks: CallbackFunction[] = [];\n\n  /**\n   * Update the value of variable.\n   * @param updatedValue New updated value.\n   */\n  public update(updatedValue: T) {\n    this.value = updatedValue;\n    this.callbacks.forEach((callback) => callback(updatedValue));\n  }\n\n  /**\n   * Call a function on updating the value of variable.\n   * @param callback Callback to call with updated value when the variable is updated.\n   */\n  public onUpdate(callback: CallbackFunction) {\n    this.callbacks.push(callback);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AnimationPreset.html":{"url":"interfaces/AnimationPreset.html","title":"interface - AnimationPreset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AnimationPreset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/animations-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Type for animation preset.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            animateEventAfterInterval\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            collisionDuration\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            positions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        animateEventAfterInterval\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        animateEventAfterInterval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Time after which to start the event collision animation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        collisionDuration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        collisionDuration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Duration of the event collision.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the Animation\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        positions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        positions:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Positions with duration and easing of each tween forming a path.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Easing, Tween } from '@tweenjs/tween.js';\nimport {\n  TubeGeometry,\n  BufferGeometry,\n  Vector3,\n  Color,\n  MeshBasicMaterial,\n  Mesh,\n  SphereGeometry,\n  Sphere,\n  Object3D,\n  BufferAttribute,\n  Scene,\n  Camera,\n  Plane,\n  Group,\n} from 'three';\nimport { SceneManager } from './scene-manager';\nimport { RendererManager } from './renderer-manager';\nimport { TracksMesh } from '../../loaders/objects/tracks';\n\n/** Type for animation preset. */\nexport interface AnimationPreset {\n  /** Positions with duration and easing of each tween forming a path. */\n  positions: { position: number[]; duration: number; easing?: any }[];\n  /** Time after which to start the event collision animation. */\n  animateEventAfterInterval?: number;\n  /** Duration of the event collision. */\n  collisionDuration?: number;\n  /** Name of the Animation */\n  name: string;\n}\n\n/**\n * Manager for managing animation related operations using three.js and tween.js.\n */\nexport class AnimationsManager {\n  /**\n   * Constructor for the animation manager.\n   * @param scene Three.js scene containing all the objects and event data.\n   * @param activeCamera Currently active camera.\n   * @param rendererManager Manager for managing event display's renderer related functions.\n   */\n  constructor(\n    private scene: Scene,\n    private activeCamera: Camera,\n    private rendererManager: RendererManager,\n  ) {\n    this.animateEvent = this.animateEvent.bind(this);\n    this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\n  }\n\n  /**\n   * Get the camera tween for animating camera to a position.\n   * @param pos End position of the camera tween.\n   * @param duration Duration of the tween.\n   * @param easing Animation easing of the tween if any.\n   * @returns Tween object of the camera animation.\n   */\n  public getCameraTween(\n    pos: number[],\n    duration: number = 1000,\n    easing?: typeof Easing.Linear.None,\n  ) {\n    const tween = new Tween(this.activeCamera.position).to(\n      { x: pos[0], y: pos[1], z: pos[2] },\n      duration,\n    );\n\n    if (easing) {\n      tween.easing(easing);\n    }\n\n    return tween;\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void,\n  ) {\n    // Move to start\n    const start = this.getCameraTween(startPos, 1000, Easing.Cubic.Out);\n    // Move to position along the detector axis\n    const alongAxisPosition = [0, 0, startPos[2]];\n    const startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\n\n    const radius = 500;\n    const numOfSteps = 24;\n    const angle = 3 * Math.PI;\n    const step = angle / numOfSteps;\n\n    const rotationPositions = [];\n    for (let i = 1; i  onAnimationEnd?.());\n    startClone.delay(500);\n\n    start.chain(startXAxis);\n    startXAxis.chain(rotateStart);\n    rotate.chain(end);\n    end.chain(startClone);\n\n    start.start();\n  }\n\n  /**\n   * Animate the propagation and generation of event data.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Callback when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   */\n  public animateEvent(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n  ) {\n    const extraAnimationSphereDuration = tweenDuration * 0.25;\n    tweenDuration *= 0.75;\n\n    const eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    const animationSphere = new Sphere(new Vector3(), 0);\n    const objectsToAnimateWithSphere: {\n      eventObject: Object3D;\n      position: any;\n    }[] = [];\n\n    const allTweens = [];\n    // Traverse over all event data\n    eventData.traverse((eventObject: any) => {\n      if (eventObject.geometry) {\n        // Animation for extrapolating tracks without changing scale\n        if (eventObject.name === 'Track' || eventObject.name === 'LineHit') {\n          // Check if geometry drawRange count exists\n          let geometryPosCount =\n            eventObject.geometry?.attributes?.position?.count;\n          if (geometryPosCount) {\n            // WORKAROUND\n            // Changing position count for TubeGeometry because\n            // what we get is not the actual and it has Infinity drawRange count\n            if (eventObject.geometry instanceof TubeGeometry) {\n              geometryPosCount *= 6;\n            }\n\n            if (eventObject.geometry instanceof TracksMesh) {\n              eventObject.material.progress = 0;\n              const eventObjectTween = new Tween(eventObject.material).to(\n                {\n                  progress: 1,\n                },\n                tweenDuration,\n              );\n              eventObjectTween.onComplete(() => {\n                eventObject.material.progress = 1;\n              });\n              allTweens.push(eventObjectTween);\n            } else if (eventObject.geometry instanceof BufferGeometry) {\n              const oldDrawRangeCount = eventObject.geometry.drawRange.count;\n              eventObject.geometry.setDrawRange(0, 0);\n              const eventObjectTween = new Tween(\n                eventObject.geometry.drawRange,\n              ).to(\n                {\n                  count: geometryPosCount,\n                },\n                tweenDuration,\n              );\n              eventObjectTween.onComplete(() => {\n                eventObject.geometry.drawRange.count = oldDrawRangeCount;\n              });\n              allTweens.push(eventObjectTween);\n            }\n          }\n        }\n        // Animation for scaling out objects with or without position\n        else if (eventObject.name === 'Jet') {\n          const scaleTween = new Tween({\n            x: 0.01,\n            y: 0.01,\n            z: 0.01,\n          }).to(\n            {\n              x: eventObject.scale.x,\n              y: eventObject.scale.y,\n              z: eventObject.scale.z,\n            },\n            tweenDuration,\n          );\n          // Manually updating scale since we need to change position\n          scaleTween.onUpdate((updatedScale: Vector3) => {\n            const previousScale = eventObject.scale.x;\n            eventObject.scale.setScalar(updatedScale.x);\n            // Restoring to original position and then moving again with the current value\n            eventObject.position\n              .divideScalar(previousScale)\n              .multiplyScalar(updatedScale.x);\n          });\n          allTweens.push(scaleTween);\n        } else {\n          const hasPosition = !eventObject.position.equals(\n            new Vector3(0, 0, 0),\n          );\n          let position = hasPosition\n            ? eventObject.position\n            : eventObject.geometry.boundingSphere.center;\n\n          // Edit geometry for hits\n          if (eventObject.name === 'Hit') {\n            position = Array.from(\n              eventObject.geometry.attributes['position'].array,\n            );\n            eventObject.geometry.deleteAttribute('position');\n            eventObject.geometry.computeBoundingSphere();\n          } else {\n            // Making the object invisible and will make visible\n            // once the animation sphere reaches the object\n            eventObject.visible = false;\n          }\n\n          objectsToAnimateWithSphere.push({\n            eventObject: eventObject,\n            position: position,\n          });\n        }\n      }\n    });\n\n    // Tween for the animation sphere\n    const animationSphereTween = new Tween(animationSphere).to(\n      { radius: 3000 },\n      tweenDuration,\n    );\n\n    const onAnimationSphereUpdate = (updateAnimationSphere: Sphere) => {\n      objectsToAnimateWithSphere.forEach((obj) => {\n        if (obj.eventObject.name === 'Hit') {\n          const geometry = (obj.eventObject as any).geometry;\n\n          const hitsPositions = this.getHitsPositions(obj.position);\n          const reachedHits = hitsPositions.filter((hitPosition) =>\n            updateAnimationSphere.containsPoint(\n              new Vector3().fromArray(hitPosition),\n            ),\n          );\n\n          if (reachedHits.length > 0) {\n            geometry.setAttribute(\n              'position',\n              new BufferAttribute(\n                new Float32Array([].concat(...reachedHits)),\n                3,\n              ),\n            );\n            geometry.computeBoundingSphere();\n          }\n        } else if (updateAnimationSphere.containsPoint(obj.position)) {\n          obj.eventObject.visible = true;\n        }\n      });\n    };\n\n    animationSphereTween.onUpdate(onAnimationSphereUpdate);\n\n    // Animation sphere tween after covering the tracks\n    const animationSphereTweenClone = new Tween(animationSphere).to(\n      { radius: 10000 },\n      extraAnimationSphereDuration,\n    );\n    animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\n\n    animationSphereTween.chain(animationSphereTweenClone);\n\n    allTweens.push(animationSphereTween);\n\n    // Call onAnimationStart when the first tween starts\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all tweens\n    for (const tween of allTweens) {\n      tween.easing(Easing.Quartic.Out).start();\n    }\n\n    // Call onEnd when the last tween completes\n    animationSphereTweenClone.onComplete(() => {\n      // Restore all remaining event data items\n      onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data using clipping planes.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   * @param clippingConstant Constant for the clipping planes for distance from the origin.\n   */\n  public animateEventWithClipping(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n    clippingConstant: number = 11000,\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Sphere to get spherical set of clipping planes from\n    const sphere = new SphereGeometry(1, 8, 8);\n    // Clipping planes for animation\n    const animationClipPlanes: Plane[] = [];\n\n    // Get clipping planes from the vertices of sphere\n    const position = sphere.attributes.position;\n    const vertex = new Vector3();\n    for (let i = 0; i  {\n      if (eventObject.geometry && eventObject.material) {\n        eventObject.material.clippingPlanes = animationClipPlanes;\n      }\n    });\n\n    const allTweens = [];\n    // Create tweens for the animation clipping planes\n    for (const animationClipPlane of animationClipPlanes) {\n      animationClipPlane.constant = 0;\n      const tween = new Tween(animationClipPlane).to(\n        { constant: clippingConstant },\n        tweenDuration,\n      );\n      allTweens.push(tween);\n    }\n\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all the tweens\n    for (const tween of allTweens) {\n      tween.start();\n    }\n\n    allTweens[allTweens.length - 1].onComplete(() => {\n      // Revert local clipping of the renderer\n      if (!prevLocalClipping) {\n        this.rendererManager.getMainRenderer().localClippingEnabled =\n          prevLocalClipping /* false */;\n      }\n      // Remove the applied clipping planes from the event data objects\n      allEventData.traverse((eventObject: any) => {\n        if (eventObject.geometry && eventObject.material) {\n          eventObject.material.clippingPlanes = null;\n        }\n      });\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the collision of two particles.\n   * @param tweenDuration Duration of the particle collision animation tween.\n   * @param particleSize Size of the particles.\n   * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\n   * @param particleColor Color of the particles.\n   * @param onEnd Callback to call when the particle collision ends.\n   */\n  public collideParticles(\n    tweenDuration: number,\n    particleSize: number = 10,\n    distanceFromOrigin: number = 5000,\n    particleColor: Color = new Color(0xffffff),\n    onEnd?: () => void,\n  ) {\n    const particleGeometry = new SphereGeometry(particleSize, 32, 32);\n    const particleMaterial = new MeshBasicMaterial({\n      color: particleColor,\n      transparent: true,\n      opacity: 0,\n    });\n\n    const particle1 = new Mesh(particleGeometry, particleMaterial);\n    const particle2 = particle1.clone() as Mesh;\n\n    particle1.position.setZ(distanceFromOrigin);\n    particle2.position.setZ(-distanceFromOrigin);\n\n    const particles = [particle1, particle2];\n\n    this.scene.add(...particles);\n\n    const particleTweens = [];\n\n    for (const particle of particles) {\n      new Tween(particle.material)\n        .to(\n          {\n            opacity: 1,\n          },\n          300,\n        )\n        .start();\n\n      const particleToOrigin = new Tween(particle.position)\n        .to(\n          {\n            z: 0,\n          },\n          tweenDuration,\n        )\n        .start();\n\n      particleTweens.push(particleToOrigin);\n    }\n\n    particleTweens[0].onComplete(() => {\n      this.scene.remove(...particles);\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param animationFunction Animation function to call after collision.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateWithCollision(\n    animationFunction: (\n      tweenDuration: number,\n      onEnd?: () => void,\n      onAnimationStart?: () => void,\n    ) => void,\n    tweenDuration: number,\n    onEnd?: () => void,\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Get the color of the first track to use for colliding particles\n    const track = allEventData.getObjectByName('Track');\n    let trackColor: Color;\n    if (track instanceof Group) {\n      trackColor = (track.children[0] as any)?.material?.color;\n    } else {\n      trackColor = (track as any)?.material.color;\n    }\n\n    // Hide event data to show particles collision\n    if (allEventData) {\n      allEventData.visible = false;\n    }\n\n    this.collideParticles(1500, 30, 5000, trackColor, () => {\n      animationFunction(tweenDuration, onEnd, () => {\n        if (allEventData) {\n          allEventData.visible = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void,\n  ) {\n    this.animateWithCollision(\n      this.animateEventWithClipping,\n      tweenDuration,\n      onEnd,\n    );\n  }\n\n  /**\n   * Get the positions of hits in a multidimensional array\n   * from a single dimensional array.\n   * @param positions Positions of hits in a single dimensional array.\n   * @returns Positions of hits in a multidimensional array.\n   */\n  private getHitsPositions(positions: number[]): number[][] {\n    const hitsPositions: number[][] = [];\n    for (let i = 0; i  void) {\n    const { positions, animateEventAfterInterval, collisionDuration } =\n      animationPreset;\n\n    if (animateEventAfterInterval && collisionDuration) {\n      // Will be made visible after collision animation ends.\n      this.scene.getObjectByName(SceneManager.EVENT_DATA_ID).visible = false;\n      setTimeout(() => {\n        this.animateEventWithCollision(collisionDuration);\n      }, animateEventAfterInterval);\n    }\n\n    const firstTween = this.getCameraTween(\n      positions[0].position,\n      positions[0].duration ?? 2000,\n      positions[0].easing,\n    );\n\n    let previousTween = firstTween;\n    positions.slice(1).forEach(({ position, duration, easing }) => {\n      const tween = this.getCameraTween(position, duration ?? 2000, easing);\n      previousTween.chain(tween);\n      previousTween = tween;\n    });\n    previousTween.onComplete(onEnd);\n\n    firstTween.start();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/cms-objects.ts\n        \n\n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getMuonChamber\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/objects/cms-objects.ts:25\n                        \n                    \n\n\n            \n                \n                        Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                muonChamberParams\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Parameters of the Muon Chamber.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Object3D\n\n                        \n                            \n                                Muon Chamber object.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Object3D,\n  Group,\n  Mesh,\n  MeshBasicMaterial,\n  EdgesGeometry,\n  LineBasicMaterial,\n  DoubleSide,\n  LineSegments,\n  BufferGeometry,\n  BufferAttribute,\n} from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n  /**\n   * Process the Muon Chamber from the given parameters.\n   * and get it as a geometry.\n   * @param muonChamberParams Parameters of the Muon Chamber.\n   * @returns Muon Chamber object.\n   */\n  public static getMuonChamber(muonChamberParams: any): Object3D {\n    let allFacePositions: number[] = [];\n\n    const addFace3 = (...faces: string[]) => {\n      allFacePositions = allFacePositions.concat(\n        ...faces.map((face) => muonChamberParams[face]),\n      );\n    };\n\n    // front\n    addFace3('front_1', 'front_2', 'front_3');\n    addFace3('front_3', 'front_4', 'front_1');\n\n    // back\n    addFace3('back_1', 'back_2', 'back_3');\n    addFace3('back_3', 'back_4', 'back_1');\n\n    // top\n    addFace3('back_1', 'back_2', 'front_2');\n    addFace3('front_2', 'front_1', 'back_1');\n\n    // bottom\n    addFace3('back_4', 'back_3', 'front_3');\n    addFace3('front_3', 'front_4', 'back_4');\n\n    // left\n    addFace3('front_1', 'front_4', 'back_4');\n    addFace3('back_4', 'back_1', 'front_1');\n\n    // right\n    addFace3('front_2', 'back_2', 'back_3');\n    addFace3('back_3', 'front_3', 'front_2');\n\n    const boxBuffer = new BufferGeometry();\n    boxBuffer.attributes.position = new BufferAttribute(\n      new Float32Array(allFacePositions),\n      3,\n    );\n    boxBuffer.computeVertexNormals();\n\n    const boxObject = new Mesh(\n      boxBuffer,\n      new MeshBasicMaterial({\n        color: muonChamberParams.color ?? EVENT_DATA_TYPE_COLORS.MuonChambers,\n        transparent: true,\n        opacity: 0.1,\n        side: DoubleSide,\n      }),\n    );\n\n    boxObject.userData = Object.assign({}, muonChamberParams);\n    boxObject.name = 'MuonChamber';\n\n    // These are the lines along the box edges\n\n    const boxEdges = new EdgesGeometry(boxBuffer);\n    const lineBoxObject = new LineSegments(\n      boxEdges,\n      new LineBasicMaterial({\n        color: 0xffffff,\n        transparent: true,\n        opacity: 0.7,\n      }),\n    );\n\n    const muonChamber = new Group();\n    muonChamber.add(boxObject);\n    muonChamber.add(lineBoxObject);\n\n    muonChamberParams.uuid = boxObject.uuid;\n\n    return muonChamber;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorManager.html":{"url":"classes/ColorManager.html","title":"class - ColorManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/color-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Color manager for three.js functions related to coloring of objects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                collectionColor\n                            \n                            \n                                    Public\n                                collectionColorRandom\n                            \n                            \n                                colorObjectsByProperty\n                            \n                            \n                                    Public\n                                colorTracksByVertex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sceneManager: SceneManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/color-manager.ts:7\n                            \n                        \n\n                \n                    \n                            Create the coloring manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sceneManager\n                                                  \n                                                        \n                                                                        SceneManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The scene manager responsible for managing the three.js scene.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        collectionColor\n                        \n                    \n                \n            \n            \n                \n                        \n                    collectionColor(collectionName: string, color: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/color-manager.ts:38\n                        \n                    \n\n\n            \n                \n                        Changes the color of all objects inside an event data collection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                collectionName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the collection.\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Hex value representing the color.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        collectionColorRandom\n                        \n                    \n                \n            \n            \n                \n                        \n                    collectionColorRandom(collectionName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/color-manager.ts:55\n                        \n                    \n\n\n            \n                \n                        Changes the color of all objects inside an event data collection to some random color.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                collectionName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the collection.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        colorObjectsByProperty\n                        \n                    \n                \n            \n            \n                \ncolorObjectsByProperty(color: any, objectsGroup: string, customCheck: (objectUserData: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/color-manager.ts:20\n                        \n                    \n\n\n            \n                \n                        Color objects by a property's value or range.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                color\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Color to set for the object.\n\n                                            \n                                        \n                                        \n                                                objectsGroup\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the object(s) group to color.\n\n                                            \n                                        \n                                        \n                                                customCheck\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function to custom check values against object params.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        colorTracksByVertex\n                        \n                    \n                \n            \n            \n                \n                        \n                    colorTracksByVertex(collectionName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/color-manager.ts:72\n                        \n                    \n\n\n            \n                \n                        Randomly color tracks by the vertex they are associated with.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                collectionName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the collection.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Color, MeshPhongMaterial } from 'three';\nimport { SceneManager } from './scene-manager';\n\n/**\n * Color manager for three.js functions related to coloring of objects.\n */\nexport class ColorManager {\n  /**\n   * Create the coloring manager.\n   * @param sceneManager The scene manager responsible for managing the three.js scene.\n   */\n  constructor(private sceneManager: SceneManager) {}\n\n  /**\n   * Color objects by a property's value or range.\n   * @param color Color to set for the object.\n   * @param objectsGroup Name of the object(s) group to color.\n   * @param customCheck Function to custom check values against object params.\n   */\n  colorObjectsByProperty(\n    color: any,\n    objectsGroup: string,\n    customCheck: (objectUserData: any) => boolean,\n  ) {\n    const objects = this.sceneManager.getScene().getObjectByName(objectsGroup);\n    objects.traverse((object: any) => {\n      if (object.material?.color && customCheck(object.userData)) {\n        object.material.color.set(color);\n      }\n    });\n  }\n\n  /**\n   * Changes the color of all objects inside an event data collection.\n   * @param collectionName Name of the collection.\n   * @param color Hex value representing the color.\n   */\n  public collectionColor(collectionName: string, color: any) {\n    const collection = this.sceneManager\n      .getScene()\n      .getObjectByName(SceneManager.EVENT_DATA_ID)\n      .getObjectByName(collectionName);\n\n    for (const child of Object.values(collection.children)) {\n      child.traverse((object) => {\n        (object['material']?.color as Color)?.set(color);\n      });\n    }\n  }\n\n  /**\n   * Changes the color of all objects inside an event data collection to some random color.\n   * @param collectionName Name of the collection.\n   */\n  public collectionColorRandom(collectionName: string) {\n    const collection = this.sceneManager\n      .getScene()\n      .getObjectByName(SceneManager.EVENT_DATA_ID)\n      .getObjectByName(collectionName);\n\n    for (const child of Object.values(collection.children)) {\n      child.traverse((object) => {\n        (object['material']?.color as Color)?.set(Math.random() * 0xffffff);\n      });\n    }\n  }\n\n  /**\n   * Randomly color tracks by the vertex they are associated with.\n   * @param collectionName Name of the collection.\n   */\n  public colorTracksByVertex(collectionName: string) {\n    const scene = this.sceneManager.getScene();\n    const vertices = scene.getObjectByName('Vertices');\n    vertices.traverse((object) => {\n      const { linkedTrackCollection, linkedTracks } = object.userData;\n\n      if (\n        object.name === 'Vertex' &&\n        linkedTrackCollection === collectionName &&\n        linkedTracks\n      ) {\n        const colorForTracksVertex = (object['material'] as MeshPhongMaterial)\n          .color;\n        const trackCollection = scene.getObjectByName(linkedTrackCollection);\n\n        linkedTracks.forEach((trackIndex: number) => {\n          trackCollection.children[trackIndex].traverse((trackObject) => {\n            trackObject?.['material']?.color?.set(colorForTracksVertex);\n          });\n        });\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorOptions.html":{"url":"classes/ColorOptions.html","title":"class - ColorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/color-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Color options with functions to color event data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                allColorByOptions\n                            \n                            \n                                    Private\n                                chargeColors\n                            \n                            \n                                    Private\n                                collectionName\n                            \n                            \n                                    Private\n                                colorByOptions\n                            \n                            \n                                    Private\n                                colorOptionsFolder\n                            \n                            \n                                    Private\n                                momColors\n                            \n                            \n                                    Private\n                                selectedColorByOption\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyChargeColorOptions\n                            \n                            \n                                    Private\n                                applyMomColorOptions\n                            \n                            \n                                    Private\n                                applyVertexColorOptions\n                            \n                            \n                                    Private\n                                colorByMomentum\n                            \n                            \n                                    Private\n                                getMomentum\n                            \n                            \n                                    Private\n                                initChargeColorOptions\n                            \n                            \n                                    Private\n                                initColorByOptions\n                            \n                            \n                                    Private\n                                initMomColorOptions\n                            \n                            \n                                    Private\n                                onlySelectedColorByOption\n                            \n                            \n                                    Private\n                                shouldColorByCharge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorManager: ColorManager, collectionFolder: PhoenixMenuNode, collectionColor: Color, colorByOptionsToInclude?: ColorByOptionKeys[])\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/color-options.ts:74\n                            \n                        \n\n                \n                    \n                            Create the color options.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        colorManager\n                                                  \n                                                        \n                                                                        ColorManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Color manager for three.js functions related to coloring of objects.\n\n                                                        \n                                                \n                                                \n                                                        collectionFolder\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Collection folder to add the color by options to.\n\n                                                        \n                                                \n                                                \n                                                        collectionColor\n                                                  \n                                                        \n                                                                    Color\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        colorByOptionsToInclude\n                                                  \n                                                        \n                                                                        ColorByOptionKeys[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Options to include for this collection to color event data by.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        allColorByOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOption[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      key: ColorByOptionKeys.CHARGE,\n      name: 'Charge ' + PrettySymbols.getPrettySymbol('charge'),\n      initialize: this.initChargeColorOptions.bind(this),\n      apply: this.applyChargeColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.MOM,\n      name: 'Momentum ' + PrettySymbols.getPrettySymbol('mom'),\n      initialize: this.initMomColorOptions.bind(this),\n      apply: this.applyMomColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.VERTEX,\n      name: 'Vertex',\n      apply: this.applyVertexColorOptions.bind(this),\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:35\n                        \n                    \n\n            \n                \n                    All color by options possible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        chargeColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    '-1': '#ff0000',\n    '0': '#ff0000',\n    '1': '#ff0000',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:57\n                        \n                    \n\n            \n                \n                    Default values for colors for color by charge.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        collectionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:26\n                        \n                    \n\n            \n                \n                    Collection name of the event data type.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorByOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOption[]\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:28\n                        \n                    \n\n            \n                \n                    Available options to color by in this instance of color options.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorOptionsFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:32\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing color configurations.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        momColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    min: {\n      value: 0,\n      color: '#ff0000',\n    },\n    max: {\n      value: 50000,\n      color: '#ff0000',\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:65\n                        \n                    \n\n            \n                \n                    Default values for colors and min/max for color by momentum.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedColorByOption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOptionKeys\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:30\n                        \n                    \n\n            \n                \n                    Currently selected option to color by.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        applyChargeColorOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyChargeColorOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:176\n                        \n                    \n\n\n            \n                \n                        Apply charge color options.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        applyMomColorOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyMomColorOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:246\n                        \n                    \n\n\n            \n                \n                        Apply momentum color options.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        applyVertexColorOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyVertexColorOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:293\n                        \n                    \n\n\n            \n                \n                        Apply color by vertex to tracks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorByMomentum\n                        \n                    \n                \n            \n            \n                \n                        \n                    colorByMomentum(minOrMax: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:256\n                        \n                    \n\n\n            \n                \n                        Color event data based on the momentum property of each object.\nThis is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                minOrMax\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    If the momentum to color objects by is minimum or maximum momentum.\nThis is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getMomentum\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMomentum(objectParams: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:282\n                        \n                    \n\n\n            \n                \n                        Get momentum from object parameters.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                objectParams\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Parameters associated to the 3D object.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                THe momentum value.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initChargeColorOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    initChargeColorOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:150\n                        \n                    \n\n\n            \n                \n                        Initialize charge color options.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initColorByOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    initColorByOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:124\n                        \n                    \n\n\n            \n                \n                        Initialize the color options.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initMomColorOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    initMomColorOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:207\n                        \n                    \n\n\n            \n                \n                        Initialize momentum color options.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onlySelectedColorByOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    onlySelectedColorByOption()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:300\n                        \n                    \n\n\n            \n                \n                        Show configs of only the currently selected color by option.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldColorByCharge\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldColorByCharge(objectParams: any, chargeValue: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:193\n                        \n                    \n\n\n            \n                \n                        Check if object should be colored based on charge value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                objectParams\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object parameters associated to the 3D object.\n\n                                            \n                                        \n                                        \n                                                chargeValue\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value of charge (-1, 0, 1).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                Whether the charge is equal to the value.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Color } from 'three';\nimport { PrettySymbols } from '../../helpers/pretty-symbols';\nimport { ColorManager } from '../three-manager/color-manager';\nimport { PhoenixMenuNode } from './phoenix-menu/phoenix-menu-node';\n\n/** Keys for options available for coloring event data by. */\nexport enum ColorByOptionKeys {\n  CHARGE = 'charge',\n  MOM = 'mom',\n  VERTEX = 'vertex',\n}\n\n/** Type for a single color by option. */\ntype ColorByOption = {\n  key: ColorByOptionKeys;\n  name: string;\n  initialize?: () => void;\n  apply?: () => void;\n};\n\n/**\n * Color options with functions to color event data.\n */\nexport class ColorOptions {\n  /** Collection name of the event data type. */\n  private collectionName: string;\n  /** Available options to color by in this instance of color options. */\n  private colorByOptions: ColorByOption[];\n  /** Currently selected option to color by. */\n  private selectedColorByOption: ColorByOptionKeys;\n  /** Phoenix menu node containing color configurations. */\n  private colorOptionsFolder: PhoenixMenuNode;\n\n  /** All color by options possible. */\n  private allColorByOptions: ColorByOption[] = [\n    {\n      key: ColorByOptionKeys.CHARGE,\n      name: 'Charge ' + PrettySymbols.getPrettySymbol('charge'),\n      initialize: this.initChargeColorOptions.bind(this),\n      apply: this.applyChargeColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.MOM,\n      name: 'Momentum ' + PrettySymbols.getPrettySymbol('mom'),\n      initialize: this.initMomColorOptions.bind(this),\n      apply: this.applyMomColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.VERTEX,\n      name: 'Vertex',\n      apply: this.applyVertexColorOptions.bind(this),\n    },\n  ];\n\n  // Charge options.\n  /** Default values for colors for color by charge. */\n  private chargeColors = {\n    '-1': '#ff0000',\n    '0': '#ff0000',\n    '1': '#ff0000',\n  };\n\n  // Momentum options.\n  /** Default values for colors and min/max for color by momentum. */\n  private momColors = {\n    min: {\n      value: 0,\n      color: '#ff0000',\n    },\n    max: {\n      value: 50000,\n      color: '#ff0000',\n    },\n  };\n\n  /**\n   * Create the color options.\n   * @param colorManager Color manager for three.js functions related to coloring of objects.\n   * @param collectionFolder Collection folder to add the color by options to.\n   * @param colorByOptionsToInclude Options to include for this collection to color event data by.\n   */\n  constructor(\n    private colorManager: ColorManager,\n    collectionFolder: PhoenixMenuNode,\n    collectionColor: Color,\n    colorByOptionsToInclude?: ColorByOptionKeys[],\n  ) {\n    this.collectionName = collectionFolder.name;\n    this.colorOptionsFolder = collectionFolder.addChild('Color Options');\n\n    this.colorOptionsFolder.addConfig('color', {\n      label: 'Color',\n      color: collectionColor\n        ? `#${collectionColor?.getHexString()}`\n        : undefined,\n      onChange: (value) =>\n        this.colorManager.collectionColor(this.collectionName, value),\n    });\n\n    this.colorOptionsFolder.addConfig('button', {\n      label: 'Random',\n      onClick: () =>\n        this.colorManager.collectionColorRandom(this.collectionName),\n    });\n\n    // Check which color by options are to be included.\n\n    if (colorByOptionsToInclude?.length > 0) {\n      this.colorByOptions = this.allColorByOptions.filter((colorByOption) =>\n        colorByOptionsToInclude.includes(colorByOption.key),\n      );\n\n      this.initColorByOptions();\n      this.colorByOptions.forEach((colorByOption) =>\n        colorByOption.initialize?.(),\n      );\n      this.onlySelectedColorByOption();\n    }\n  }\n\n  /**\n   * Initialize the color options.\n   */\n  private initColorByOptions() {\n    this.selectedColorByOption = this.colorByOptions[0].key;\n\n    // Configurations\n\n    this.colorOptionsFolder.addConfig('select', {\n      label: 'Color by',\n      options: this.colorByOptions.map((colorByOption) => colorByOption.name),\n      onChange: (updatedColorByOption) => {\n        const newColorByOption = this.colorByOptions.find(\n          (colorByOption) => colorByOption.name === updatedColorByOption,\n        );\n\n        this.selectedColorByOption = newColorByOption?.key;\n        newColorByOption?.apply?.();\n\n        this.onlySelectedColorByOption();\n      },\n    });\n  }\n\n  // Charge options.\n\n  /**\n   * Initialize charge color options.\n   */\n  private initChargeColorOptions() {\n    // Charge configurations\n    [-1, 0, 1].forEach((chargeValue) => {\n      this.colorOptionsFolder.addConfig('color', {\n        label: `${PrettySymbols.getPrettySymbol('charge')}=${chargeValue}`,\n        group: ColorByOptionKeys.CHARGE,\n        color: this.chargeColors[chargeValue],\n        onChange: (color) => {\n          this.chargeColors[chargeValue] = color;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.CHARGE) {\n            this.colorManager.colorObjectsByProperty(\n              color,\n              this.collectionName,\n              (objectUserData) =>\n                this.shouldColorByCharge(objectUserData, chargeValue),\n            );\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Apply charge color options.\n   */\n  private applyChargeColorOptions() {\n    [-1, 0, 1].forEach((chargeValue) => {\n      this.colorManager.colorObjectsByProperty(\n        this.chargeColors[chargeValue],\n        this.collectionName,\n        (objectUserData) =>\n          this.shouldColorByCharge(objectUserData, chargeValue),\n      );\n    });\n  }\n\n  /**\n   * Check if object should be colored based on charge value.\n   * @param objectParams Object parameters associated to the 3D object.\n   * @param chargeValue Value of charge (-1, 0, 1).\n   * @returns Whether the charge is equal to the value.\n   */\n  private shouldColorByCharge(objectParams: any, chargeValue: number) {\n    // For ATLAS data, the charge is calculated from dparams[4] otherwise it exists as an object's userData\n    if (Math.sign(1 / parseInt(objectParams?.dparams?.[4])) === chargeValue) {\n      return true;\n    } else if (objectParams?.charge === chargeValue) {\n      return true;\n    }\n  }\n\n  // Momentum options.\n\n  /**\n   * Initialize momentum color options.\n   */\n  private initMomColorOptions() {\n    // Momentum configurations\n    Object.entries(this.momColors).forEach(([key, momValue]) => {\n      this.colorOptionsFolder.addConfig('slider', {\n        label: PrettySymbols.getPrettySymbol('mom') + ' ' + key,\n        group: ColorByOptionKeys.MOM,\n        min: this.momColors.min.value,\n        max: this.momColors.max.value,\n        value: this.momColors[key].value,\n        step: 10,\n        allowCustomValue: true,\n        onChange: (sliderValue) => {\n          this.momColors[key].value = sliderValue;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.MOM) {\n            this.colorByMomentum('min');\n            this.colorByMomentum('max');\n          }\n        },\n      });\n\n      this.colorOptionsFolder.addConfig('color', {\n        label: PrettySymbols.getPrettySymbol('mom') + ' ' + key + ' color',\n        group: ColorByOptionKeys.MOM,\n        color: momValue.color,\n        onChange: (color) => {\n          this.momColors[key].color = color;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.MOM) {\n            this.colorByMomentum(key);\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Apply momentum color options.\n   */\n  private applyMomColorOptions() {\n    this.colorByMomentum('min');\n    this.colorByMomentum('max');\n  }\n\n  /**\n   * Color event data based on the momentum property of each object.\n   * @param minOrMax If the momentum to color objects by is minimum or maximum momentum.\n   * This is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n   */\n  private colorByMomentum(minOrMax: string) {\n    this.colorManager.colorObjectsByProperty(\n      this.momColors[minOrMax].color,\n      this.collectionName,\n      (objectParams) => {\n        const mom = this.getMomentum(objectParams);\n        const mid = (this.momColors.min.value + this.momColors.max.value) / 2;\n\n        if (minOrMax === 'max' && mom > mid && mom  this.momColors.min.value\n        ) {\n          return true;\n        }\n      },\n    );\n  }\n\n  /**\n   * Get momentum from object parameters.\n   * @param objectParams Parameters associated to the 3D object.\n   * @returns THe momentum value.\n   */\n  private getMomentum(objectParams: any) {\n    return objectParams?.dparams?.[4]\n      ? Math.abs(1 / parseFloat(objectParams?.dparams?.[4]))\n      : objectParams?.mom;\n  }\n\n  // Vertex options.\n\n  /**\n   * Apply color by vertex to tracks.\n   */\n  private applyVertexColorOptions() {\n    this.colorManager.colorTracksByVertex(this.collectionName);\n  }\n\n  /**\n   * Show configs of only the currently selected color by option.\n   */\n  private onlySelectedColorByOption() {\n    this.colorOptionsFolder.configs.forEach((config) => {\n      const groupNotSelected =\n        config.group !== undefined &&\n        config.group !== this.selectedColorByOption;\n\n      config.hidden = groupNotSelected;\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Configuration.html":{"url":"interfaces/Configuration.html","title":"interface - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/types/configuration.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration of the event display.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowUrlOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultEventFile\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultView\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            elementId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            enableDatGUIMenu\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            eventDataLoader\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            forceColourTheme\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            phoenixMenuRoot\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            presetAnimations\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            presetViews\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowUrlOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowUrlOptions:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to allow URL options or not (true by default).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultEventFile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultEventFile:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default event to load when none given in URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultView\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultView:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default view [x,y,z].\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the wrapper element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDatGUIMenu\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDatGUIMenu:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to enable dat.GUI menu or not.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventDataLoader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventDataLoader:         EventDataLoader\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventDataLoader\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event data loader responsible for processing and loading event data.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        forceColourTheme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        forceColourTheme:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to force a theme ('dark' or 'light' are current options)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phoenixMenuRoot\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phoenixMenuRoot:         PhoenixMenuNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PhoenixMenuNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Root node of the phoenix menu.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presetAnimations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        presetAnimations:         AnimationPreset[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AnimationPreset[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Preset animations for switching event display camera.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presetViews\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        presetViews:         PresetView[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PresetView[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Preset views for switching event display camera.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { PresetView } from '../models/preset-view.model';\nimport { EventDataLoader } from '../../loaders/event-data-loader';\nimport { PhoenixMenuNode } from '../../managers/ui-manager/phoenix-menu/phoenix-menu-node';\nimport { AnimationPreset } from '../../managers/three-manager/animations-manager';\nimport { DepthPackingStrategies } from 'three';\n\n/**\n * Configuration of the event display.\n */\nexport interface Configuration {\n  /** Default view [x,y,z]. */\n  defaultView?: number[];\n  /** Preset views for switching event display camera. */\n  presetViews?: PresetView[];\n  /** Preset animations for switching event display camera. */\n  presetAnimations?: AnimationPreset[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader?: EventDataLoader;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot?: PhoenixMenuNode;\n  /** Whether to enable dat.GUI menu or not. */\n  enableDatGUIMenu?: boolean;\n  /** ID of the wrapper element. */\n  elementId?: string;\n  /** Default event to load when none given in URL. */\n  defaultEventFile?: { eventFile: string; eventType: string };\n  /** Whether to allow URL options or not (true by default). */\n  allowUrlOptions?: boolean;\n  /** Whether to force a theme ('dark' or 'light' are current options) */\n  forceColourTheme?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CoordinateHelper.html":{"url":"classes/CoordinateHelper.html","title":"class - CoordinateHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CoordinateHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/coordinate-helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper methods for coordinate conversions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                anglesAreSane\n                            \n                            \n                                    Static\n                                atlasQuaternion\n                            \n                            \n                                    Static\n                                etaPhiToCartesian\n                            \n                            \n                                    Static\n                                etaToTheta\n                            \n                            \n                                    Static\n                                sphericalToCartesian\n                            \n                            \n                                    Static\n                                thetaToEta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        anglesAreSane\n                        \n                    \n                \n            \n            \n                \n                        \n                    anglesAreSane(theta: number, phi: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/coordinate-helper.ts:13\n                        \n                    \n\n\n            \n                \n                        Checks if angles are within range: -PI \n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                theta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    equatorial angle\n\n                                            \n                                        \n                                        \n                                                phi\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    azimuthal angle\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        atlasQuaternion\n                        \n                    \n                \n            \n            \n                \n                        \n                    atlasQuaternion()\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/coordinate-helper.ts:81\n                        \n                    \n\n\n            \n                \n                        Returns the Quaternion to rotate to ATLAS coords.\nTemporary. We will need to make this configurable per experiment.\n\n\n                        \n                            Returns :     Quaternion\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        etaPhiToCartesian\n                        \n                    \n                \n            \n            \n                \n                        \n                    etaPhiToCartesian(radius: number, eta: number, phi: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/coordinate-helper.ts:65\n                        \n                    \n\n\n            \n                \n                        Get cartesian from eta/phi parameters.\nApplies the necessary rotations to move from threejs native to experimental.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                radius\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The radius.\n\n                                            \n                                        \n                                        \n                                                eta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Pseudorapidity\n\n                                            \n                                        \n                                        \n                                                phi\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Phi angle.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Vector3\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        etaToTheta\n                        \n                    \n                \n            \n            \n                \n                        \n                    etaToTheta(eta: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/coordinate-helper.ts:25\n                        \n                    \n\n\n            \n                \n                        Convert pseudorapidity eta to spherical coordinate theta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Pseudorapidity eta to convert to theta.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                theta in radians\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        sphericalToCartesian\n                        \n                    \n                \n            \n            \n                \n                        \n                    sphericalToCartesian(radius: number, theta: number, phi: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/coordinate-helper.ts:46\n                        \n                    \n\n\n            \n                \n                        Get cartesian from spherical parameters.\nApplies the necessary rotations to move from threejs to experimental.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                radius\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The radius.\n\n                                            \n                                        \n                                        \n                                                theta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Theta angle.\n\n                                            \n                                        \n                                        \n                                                phi\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Phi angle.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Vector3\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        thetaToEta\n                        \n                    \n                \n            \n            \n                \n                        \n                    thetaToEta(theta: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/coordinate-helper.ts:35\n                        \n                    \n\n\n            \n                \n                        Convert spherical theta to pseudorapidity eta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                theta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Angle in radians to convert to pseudorapidity eta.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                pseudorapidity eta\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3, Quaternion } from 'three';\n\n/**\n * Helper methods for coordinate conversions.\n */\nexport class CoordinateHelper {\n  /**\n   * Checks if angles are within range: -PI  phi;\n    const tmp2 = 0  theta;\n    return tmp1 && tmp2;\n  }\n\n  /**\n   * Convert pseudorapidity eta to spherical coordinate theta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param eta Pseudorapidity eta to convert to theta.\n   * @returns theta in radians\n   */\n  public static etaToTheta(eta: number): number {\n    return 2 * Math.atan(Math.pow(Math.E, -eta));\n  }\n\n  /**\n   * Convert spherical theta to pseudorapidity eta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param theta Angle in radians to convert to pseudorapidity eta.\n   * @returns pseudorapidity eta\n   */\n  public static thetaToEta(theta: number): number {\n    return -Math.log(Math.tan(theta / 2.0));\n  }\n\n  /**\n   * Get cartesian from spherical parameters.\n   * Applies the necessary rotations to move from threejs to experimental.\n   * @param radius The radius.\n   * @param theta Theta angle.\n   * @param phi Phi angle.\n   */\n  public static sphericalToCartesian(\n    radius: number,\n    theta: number,\n    phi: number,\n  ): Vector3 {\n    // Threejs uses theta as azimuthal, so need to reverse.\n    const vector = new Vector3();\n    vector.setFromSphericalCoords(radius, theta, phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Get cartesian from eta/phi parameters.\n   * Applies the necessary rotations to move from threejs native to experimental.\n   * @param radius The radius.\n   * @param eta Pseudorapidity\n   * @param phi Phi angle.\n   */\n  public static etaPhiToCartesian(\n    radius: number,\n    eta: number,\n    phi: number,\n  ): Vector3 {\n    const vector = new Vector3();\n    // Threejs uses theta as azimuthal, so need to reverse.\n    vector.setFromSphericalCoords(radius, this.etaToTheta(eta), phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Returns the Quaternion to rotate to ATLAS coords.\n   * Temporary. We will need to make this configurable per experiment.\n   */\n  public static atlasQuaternion(): Quaternion {\n    // With nothing, we have eta=0 on x, and phi=0 on z\n    // Should be eta=0 on y, and phi=0 on x\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(0, 0, 1);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2); // This puts eta~infinite on z-axis, eta=0 on  but y-positive is phi=PI (and eta=0 on x)\n    const quaternion2 = new Quaternion();\n    quaternion2.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI / 2.0); // Now have eta = 3.0 on -x, eta =0 on +y, and phi = 0 on +z\n    quaternion.multiply(quaternion2);\n    return quaternion;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/cut.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                defaultApplyMaxValue\n                            \n                            \n                                    Private\n                                defaultApplyMinValue\n                            \n                            \n                                    Private\n                                defaultMaxValue\n                            \n                            \n                                    Private\n                                defaultMinValue\n                            \n                            \n                                    Public\n                                field\n                            \n                            \n                                    Public\n                                maxCutActive\n                            \n                            \n                                    Public\n                                maxValue\n                            \n                            \n                                    Public\n                                minCutActive\n                            \n                            \n                                    Public\n                                minValue\n                            \n                            \n                                    Public\n                                step\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cutPassed\n                            \n                            \n                                enableMaxCut\n                            \n                            \n                                enableMinCut\n                            \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number, step: number, minCutActive: boolean, maxCutActive: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/lib/models/cut.model.ts:12\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Size of increment when using slider.\n\n                                                        \n                                                \n                                                \n                                                        minCutActive\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                If true, the minimum cut is appled. Can be overriden later with enableMinCut.\n\n                                                        \n                                                \n                                                \n                                                        maxCutActive\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                If true, the maximum cut is appled. Can be overriden later with enableMaxCut.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultApplyMaxValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:10\n                        \n                    \n\n            \n                \n                    Default if upper bound applied\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultApplyMinValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:12\n                        \n                    \n\n            \n                \n                    Default if lower bound applied\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultMaxValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:8\n                        \n                    \n\n            \n                \n                    Default maximum allowed value of the event data attribute.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultMinValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:6\n                        \n                    \n\n            \n                \n                    Default minimum allowed value of the event data attribute.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:24\n                        \n                    \n\n            \n                \n                    Name of the event data attribute to be filtered.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        maxCutActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:29\n                        \n                    \n\n            \n                \n                    If true, the maximum cut is appled. Can be overriden later with enableMaxCut.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        maxValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:26\n                        \n                    \n\n            \n                \n                    Maximum allowed value of the event data attribute.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        minCutActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:28\n                        \n                    \n\n            \n                \n                    If true, the minimum cut is appled. Can be overriden later with enableMinCut.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        minValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:25\n                        \n                    \n\n            \n                \n                    Minimum allowed value of the event data attribute.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        step\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:27\n                        \n                    \n\n            \n                \n                    Size of increment when using slider.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cutPassed\n                        \n                    \n                \n            \n            \n                \ncutPassed(value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/models/cut.model.ts:48\n                        \n                    \n\n\n            \n                \n                        Returns true if the passed value is within the active cut range.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enableMaxCut\n                        \n                    \n                \n            \n            \n                \nenableMaxCut(check: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/models/cut.model.ts:38\n                        \n                    \n\n\n            \n                \n                        Returns true if upper cut is valid.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                check\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enableMinCut\n                        \n                    \n                \n            \n            \n                \nenableMinCut(check: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/models/cut.model.ts:43\n                        \n                    \n\n\n            \n                \n                        Returns true if upper cut is valid.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                check\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reset\n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/models/cut.model.ts:58\n                        \n                    \n\n\n            \n                \n                        Reset the minimum and maximum value of the cut to default.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Default minimum allowed value of the event data attribute. */\n  private defaultMinValue: number;\n  /** Default maximum allowed value of the event data attribute. */\n  private defaultMaxValue: number;\n  /** Default if upper bound applied */\n  private defaultApplyMaxValue: boolean;\n  /** Default if lower bound applied */\n  private defaultApplyMinValue: boolean;\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   * @param step Size of increment when using slider.\n   * @param minCutActive If true, the minimum cut is appled. Can be overriden later with enableMinCut.\n   * @param maxCutActive If true, the maximum cut is appled. Can be overriden later with enableMaxCut.\n   *\n   */\n  constructor(\n    public field: string,\n    public minValue: number,\n    public maxValue: number,\n    public step: number = 1,\n    public minCutActive: boolean = true,\n    public maxCutActive: boolean = true,\n  ) {\n    this.defaultMinValue = minValue;\n    this.defaultMaxValue = maxValue;\n    this.defaultApplyMinValue = minCutActive;\n    this.defaultApplyMaxValue = maxCutActive;\n  }\n\n  /** Returns true if upper cut is valid. */\n  enableMaxCut(check: boolean) {\n    this.maxCutActive = check;\n  }\n\n  /** Returns true if upper cut is valid. */\n  enableMinCut(check: boolean) {\n    this.minCutActive = check;\n  }\n\n  /** Returns true if the passed value is within the active cut range. */\n  cutPassed(value: number): boolean {\n    return (\n      (!this.maxCutActive || value  this.minValue)\n    );\n  }\n\n  /**\n   * Reset the minimum and maximum value of the cut to default.\n   */\n  reset() {\n    this.minValue = this.defaultMinValue;\n    this.maxValue = this.defaultMaxValue;\n    this.minCutActive = this.defaultApplyMinValue;\n    this.maxCutActive = this.defaultApplyMaxValue;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EffectsManager.html":{"url":"classes/EffectsManager.html","title":"class - EffectsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EffectsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/effects-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                antialiasing\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Public\n                                composer\n                            \n                            \n                                    Private\n                                defaultRenderPass\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOutlinePassForSelection\n                            \n                            \n                                    Private\n                                antialiasRender\n                            \n                            \n                                    Private\n                                effectsRender\n                            \n                            \n                                    Public\n                                removePass\n                            \n                            \n                                    Public\n                                setAntialiasing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the effects manager which manages effects and three.js passes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The camera inside the scene.\n\n                                                        \n                                                \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The default scene used for event display.\n\n                                                        \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    WebGLRenderer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The main renderer used by the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        antialiasing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:20\n                        \n                    \n\n            \n                \n                    Whether antialiasing is enabled or disabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        camera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:14\n                        \n                    \n\n            \n                \n                    The camera inside the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        composer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EffectComposer\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:12\n                        \n                    \n\n            \n                \n                    Effect composer for effect passes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultRenderPass\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RenderPass\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:18\n                        \n                    \n\n            \n                \n                    Render pass for rendering the default scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        render\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:23\n                        \n                    \n\n            \n                \n                    Render function with (normal render) or without antialias (effects render).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scene\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Scene\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:16\n                        \n                    \n\n            \n                \n                    The default scene used for event display.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addOutlinePassForSelection\n                        \n                    \n                \n            \n            \n                \n                        \n                    addOutlinePassForSelection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/effects-manager.ts:69\n                        \n                    \n\n\n            \n                \n                        Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                        \n                            Returns :     OutlinePass\n\n                        \n                            \n                                OutlinePass for highlighting hovered over event display elements.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        antialiasRender\n                        \n                    \n                \n            \n            \n                \n                        \n                    antialiasRender(scene: Scene, camera: Camera)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/effects-manager.ts:61\n                        \n                    \n\n\n            \n                \n                        Render for antialias without the effects composer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scene\n                                            \n                                                        Scene\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The default scene used for event display.\n\n                                            \n                                        \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The camera inside the scene.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        effectsRender\n                        \n                    \n                \n            \n            \n                \n                        \n                    effectsRender(scene: Scene, camera: Camera)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/effects-manager.ts:48\n                        \n                    \n\n\n            \n                \n                        Render the effects composer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scene\n                                            \n                                                        Scene\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The default scene used for event display.\n\n                                            \n                                        \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The camera inside the scene.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removePass\n                        \n                    \n                \n            \n            \n                \n                        \n                    removePass(pass: Pass)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/effects-manager.ts:88\n                        \n                    \n\n\n            \n                \n                        Remove a pass from the effect composer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                pass\n                                            \n                                                        Pass\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Effect pass to be removed from the effect composer.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setAntialiasing\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAntialiasing(antialias: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/effects-manager.ts:97\n                        \n                    \n\n\n            \n                \n                        Set the antialiasing of renderer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                antialias\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Whether antialiasing is to enabled or disabled.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { Camera, Scene, WebGLRenderer, Vector2, NormalBlending } from 'three';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass';\n\n/**\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\n */\nexport class EffectsManager {\n  /** Effect composer for effect passes. */\n  public composer: EffectComposer;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The default scene used for event display. */\n  private scene: Scene;\n  /** Render pass for rendering the default scene. */\n  private defaultRenderPass: RenderPass;\n  /** Whether antialiasing is enabled or disabled. */\n  public antialiasing: boolean = true;\n\n  /** Render function with (normal render) or without antialias (effects render). */\n  public render: (scene: Scene, camera: Camera) => void;\n\n  /**\n   * Constructor for the effects manager which manages effects and three.js passes.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   * @param renderer The main renderer used by the event display.\n   */\n  constructor(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n    this.composer = new EffectComposer(renderer);\n    this.camera = camera;\n    this.scene = scene;\n\n    this.defaultRenderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.defaultRenderPass);\n\n    // Set the starting render function\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n\n  /**\n   * Render the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private effectsRender(scene: Scene, camera: Camera) {\n    if (this.composer) {\n      this.defaultRenderPass.camera = camera;\n      this.defaultRenderPass.scene = scene;\n      this.composer.render();\n    }\n  }\n\n  /**\n   * Render for antialias without the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private antialiasRender(scene: Scene, camera: Camera) {\n    this.composer.renderer.render(scene, camera);\n  }\n\n  /**\n   * Initialize the outline pass for highlighting hovered over event display elements.\n   * @returns OutlinePass for highlighting hovered over event display elements.\n   */\n  public addOutlinePassForSelection(): OutlinePass {\n    const outlinePass = new OutlinePass(\n      new Vector2(window.innerWidth, window.innerHeight),\n      this.scene,\n      this.camera,\n    );\n    outlinePass.overlayMaterial.blending = NormalBlending;\n    outlinePass.visibleEdgeColor.set(0xffff66);\n    outlinePass.visibleEdgeColor.set(0xdf5330);\n\n    this.composer.addPass(outlinePass);\n\n    return outlinePass;\n  }\n\n  /**\n   * Remove a pass from the effect composer.\n   * @param pass Effect pass to be removed from the effect composer.\n   */\n  public removePass(pass: Pass) {\n    const passIndex = this.composer.passes.indexOf(pass);\n    this.composer.passes.splice(passIndex, 1);\n  }\n\n  /**\n   * Set the antialiasing of renderer.\n   * @param antialias Whether antialiasing is to enabled or disabled.\n   */\n  public setAntialiasing(antialias: boolean) {\n    this.antialiasing = antialias;\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/event-data-loader.ts\n        \n\n\n            \n                Description\n            \n            \n                Event data loader for implementing different event data loaders.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addLabelToEventObject\n                                    \n                                \n                                \n                                    \n                                        buildEventData\n                                    \n                                \n                                \n                                    \n                                        getCollection\n                                    \n                                \n                                \n                                    \n                                        getCollections\n                                    \n                                \n                                \n                                    \n                                        getEventMetadata\n                                    \n                                \n                                \n                                    \n                                        getEventsList\n                                    \n                                \n                                \n                                    \n                                        getLabelsObject\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addLabelToEventObject\n                        \n                    \n                \n            \n            \n                \naddLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:57\n                        \n                    \n\n\n            \n                \n                        Add label of event object to the labels object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                label\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Label to add to the event object.\n\n                                            \n                                        \n                                        \n                                                collection\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Collection the event object is a part of.\n\n                                            \n                                        \n                                        \n                                                indexInCollection\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Event object's index in collection.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A unique label ID string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEventData\n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:17\n                        \n                    \n\n\n            \n                \n                        Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object representing the event.\n\n                                            \n                                        \n                                        \n                                                graphicsLibrary\n                                            \n                                                            ThreeManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Manager containing functionality to draw the 3D objects.\n\n                                            \n                                        \n                                        \n                                                ui\n                                            \n                                                            UIManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Manager for showing menus and controls to manipulate the geometries.\n\n                                            \n                                        \n                                        \n                                                infoLogger\n                                            \n                                                            InfoLogger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Logger for logging event display data..\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCollection\n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:42\n                        \n                    \n\n\n            \n                \n                        Get all the objects inside a collection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                collectionName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Key of the collection that will be retrieved.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Object containing all physics objects from the desired collection.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCollections\n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:35\n                        \n                    \n\n\n            \n                \n                        Get the different collections for the current stored event.\n\n\n                        \n                            Returns :     string[]\n\n                        \n                            \n                                List of strings, each representing a collection of the event displayed.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventMetadata\n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:48\n                        \n                    \n\n\n            \n                \n                        Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                        \n                            Returns :     any[]\n\n                        \n                            \n                                Metadata of the displayed event.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventsList\n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:29\n                        \n                    \n\n\n            \n                \n                        Takes an object containing multiple events and returns the keys of these events.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventsData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object that contains the different events.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                List of keys of the different events.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLabelsObject\n                        \n                    \n                \n            \n            \n                \ngetLabelsObject()\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:67\n                        \n                    \n\n\n            \n                \n                        Get the object containing labels.\n\n\n                        \n                            Returns :     literal type\n\n                        \n                            \n                                The labels object.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeManager } from '../managers/three-manager';\nimport { UIManager } from '../managers/ui-manager';\nimport { InfoLogger } from '../helpers/info-logger';\n\n/**\n * Event data loader for implementing different event data loaders.\n */\nexport interface EventDataLoader {\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Manager containing functionality to draw the 3D objects.\n   * @param ui Manager for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Logger for logging event display data..\n   */\n  buildEventData(\n    eventData: any,\n    graphicsLibrary: ThreeManager,\n    ui: UIManager,\n    infoLogger: InfoLogger,\n  ): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n  /**\n   * Add label of event object to the labels object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @returns A unique label ID string.\n   */\n  addLabelToEventObject(\n    label: string,\n    collection: string,\n    indexInCollection: number,\n  ): string;\n\n  /**\n   * Get the object containing labels.\n   * @returns The labels object.\n   */\n  getLabelsObject(): { [key: string]: any };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/export-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        exportPhoenixScene\n                        \n                    \n                \n            \n            \n                \n                        \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/export-manager.ts:27\n                        \n                    \n\n\n            \n                \n                        Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scene\n                                            \n                                                        Scene\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The scene to be exported.\n\n                                            \n                                        \n                                        \n                                                eventData\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currently loaded event data.\n\n                                            \n                                        \n                                        \n                                                geometries\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currently loaded geometries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        exportSceneToOBJ\n                        \n                    \n                \n            \n            \n                \n                        \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/export-manager.ts:14\n                        \n                    \n\n\n            \n                \n                        Exports scene to OBJ file format.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scene\n                                            \n                                                        Scene\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The scene to be exported.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveEventDataConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/export-manager.ts:66\n                        \n                    \n\n\n            \n                \n                        Save the configuration of the currently loaded event data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currently loaded event data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveGeometriesConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/export-manager.ts:85\n                        \n                    \n\n\n            \n                \n                        Save the configuration of the currently loaded geometries.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                geometries\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currently loaded geometries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveSceneConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/export-manager.ts:52\n                        \n                    \n\n\n            \n                \n                        Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventData\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Curently loaded event data.\n\n                                            \n                                        \n                                        \n                                                geometries\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currently loaded geometries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { eventData: {}; geometries: {}; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\nimport { saveFile } from '../../helpers/file';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n  /**\n   * Exports scene to OBJ file format.\n   * @param scene The scene to be exported.\n   */\n  public exportSceneToOBJ(scene: Scene) {\n    // Instantiate a exporter\n    const exporter = new OBJExporter();\n    const result = exporter.parse(scene);\n    saveFile(result, 'phoenix-obj.obj', 'text/plain');\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   * @param scene The scene to be exported.\n   * @param eventData Currently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  public exportPhoenixScene(\n    scene: Scene,\n    eventData: Object3D,\n    geometries: Object3D,\n  ) {\n    const exporter = new GLTFExporter();\n\n    const sceneConfig = this.saveSceneConfig(eventData, geometries);\n    // Parse the input and generate the glTF output\n    exporter.parse(\n      scene,\n      (result) => {\n        const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n        const output = JSON.stringify(jsonResult, null, 2);\n        saveFile(output, 'phoenix-scene.phnx', 'text/plain');\n      },\n      null,\n    );\n  }\n\n  /**\n   * Save the configuration of the currently loaded scene including event data and geometries.\n   * @param eventData Curently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n    const eventDataConfig = this.saveEventDataConfiguration(eventData);\n    const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n    const sceneConfig = {\n      eventData: eventDataConfig,\n      geometries: geometriesConfig,\n    };\n    return sceneConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded event data.\n   * @param eventData Currently loaded event data.\n   */\n  private saveEventDataConfiguration(eventData: any) {\n    const eventDataConfig = {};\n    for (const objectType of eventData.children) {\n      if (objectType.name) {\n        eventDataConfig[objectType.name] = [];\n        for (const collection of objectType.children) {\n          if (collection.name) {\n            eventDataConfig[objectType.name].push(collection.name);\n          }\n        }\n      }\n    }\n    return eventDataConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded geometries.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveGeometriesConfiguration(geometries: Object3D) {\n    const geometriesConfig = [];\n    geometries.children.forEach((object) => {\n      if (object.name !== 'EventData') {\n        geometriesConfig.push(object.name);\n      }\n    });\n    return geometriesConfig;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                 Default class to define the field.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(field: Vector3)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/runge-kutta.ts:192\n                        \n                    \n\n\n            \n                \n                        Returns field as a Vector3 in Tesla.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                        Vector3\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Vector3\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6),\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6),\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true,\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoLogger.html":{"url":"classes/InfoLogger.html","title":"class - InfoLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/info-logger.ts\n        \n\n\n            \n                Description\n            \n            \n                Logger for logging event display data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        infoLoggerList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/helpers/info-logger.ts:6\n                        \n                    \n\n            \n                \n                    List that contains all the info logs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxEntries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/helpers/info-logger.ts:8\n                        \n                    \n\n            \n                \n                    Max entries to be shown inside the information panel\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/info-logger.ts:15\n                        \n                    \n\n\n            \n                \n                        Add an entry to the info logger\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Data of the info log\n\n                                            \n                                        \n                                        \n                                                label\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Label of the info log\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInfoLoggerList\n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/info-logger.ts:26\n                        \n                    \n\n\n            \n                \n                        Get the info logger list being used by the info logger service\n\n\n                        \n                            Returns :     any[]\n\n                        \n                            \n                                The info logger list containing log data\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class InfoLogger {\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? label + ': ' + data : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingManager.html":{"url":"classes/LoadingManager.html","title":"class - LoadingManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/loading-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Phoenix loading manager for managing loadable items.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                    Public\n                                loaded\n                            \n                            \n                                    Private\n                                onLoadCallbacks\n                            \n                            \n                                    Private\n                                onProgressCallbacks\n                            \n                            \n                                    Private\n                                progressItems\n                            \n                            \n                                    Public\n                                toLoad\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadableItem\n                            \n                            \n                                    Public\n                                addLoadListener\n                            \n                            \n                                    Public\n                                addLoadListenerWithCheck\n                            \n                            \n                                    Public\n                                addProgressListener\n                            \n                            \n                                    Public\n                                itemLoaded\n                            \n                            \n                                    Public\n                                onProgress\n                            \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                            Create the singleton Phoenix loading manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoadingManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:6\n                        \n                    \n\n            \n                \n                    Instance of the loading manager\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loaded\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:11\n                        \n                    \n\n            \n                \n                    Items loaded\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onLoadCallbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (function)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:14\n                        \n                    \n\n            \n                \n                    Callbacks to call on load.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onProgressCallbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (function)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:16\n                        \n                    \n\n            \n                \n                    Callbacks to call on progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        progressItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:19\n                        \n                    \n\n            \n                \n                    Progress for each named item.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toLoad\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:9\n                        \n                    \n\n            \n                \n                    Items to load.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addLoadableItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    addLoadableItem(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:37\n                        \n                    \n\n\n            \n                \n                        Add an item which is to be loaded.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                            \n                                                    ID of the item to be loaded.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addLoadListener\n                        \n                    \n                \n            \n            \n                \n                        \n                    addLoadListener(callback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:84\n                        \n                    \n\n\n            \n                \n                        Add a listener for when all items have loaded.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Callback to call when all items have loaded.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addLoadListenerWithCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    addLoadListenerWithCheck(callback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:93\n                        \n                    \n\n\n            \n                \n                        Add a listener for when all items have loaded with check if there\nare any items to load when the listener is added.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Callback to call when all items have loaded.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addProgressListener\n                        \n                    \n                \n            \n            \n                \n                        \n                    addProgressListener(callback: (progress: number) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:105\n                        \n                    \n\n\n            \n                \n                        Add a callback to listen when the progress of an item increases.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Callback to call when the progress of a loading item increases.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        itemLoaded\n                        \n                    \n                \n            \n            \n                \n                        \n                    itemLoaded(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:46\n                        \n                    \n\n\n            \n                \n                        Function to call when an item has finished loading.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                            \n                                                    ID of the item loaded.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        onProgress\n                        \n                    \n                \n            \n            \n                \n                        \n                    onProgress(id: string, progress: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:64\n                        \n                    \n\n\n            \n                \n                        Function to call when loading of an item progresses.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the item with the progress.\n\n                                            \n                                        \n                                        \n                                                progress\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Progress of the item.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reset\n                        \n                    \n                \n            \n            \n                \n                        \n                    reset()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:112\n                        \n                    \n\n\n            \n                \n                        Reset the loading manager and its items.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class LoadingManager {\n  /** Instance of the loading manager */\n  private static instance: LoadingManager;\n\n  /** Items to load. */\n  public toLoad: string[] = [];\n  /** Items loaded */\n  public loaded: string[] = [];\n\n  /** Callbacks to call on load. */\n  private onLoadCallbacks: (() => void)[] = [];\n  /** Callbacks to call on progress. */\n  private onProgressCallbacks: ((progress: number) => void)[] = [];\n\n  /** Progress for each named item. */\n  private progressItems: { [key: string]: number } = {};\n\n  /**\n   * Create the singleton Phoenix loading manager.\n   * @returns The loading manager instance.\n   */\n  constructor() {\n    if (LoadingManager.instance === undefined) {\n      LoadingManager.instance = this;\n    }\n\n    return LoadingManager.instance;\n  }\n\n  /**\n   * Add an item which is to be loaded.\n   * @param id ID of the item to be loaded.\n   */\n  public addLoadableItem(id: string = '') {\n    this.toLoad.push(id);\n    this.progressItems[id] = 0;\n  }\n\n  /**\n   * Function to call when an item has finished loading.\n   * @param id ID of the item loaded.\n   */\n  public itemLoaded(id: string = '') {\n    this.loaded.push(id);\n    this.onProgress(id, 100);\n\n    if (\n      this.toLoad.length === this.loaded.length &&\n      this.toLoad.sort().join(',') === this.loaded.sort().join(',')\n    ) {\n      this.onLoadCallbacks.forEach((callback) => callback());\n      this.reset();\n    }\n  }\n\n  /**\n   * Function to call when loading of an item progresses.\n   * @param id ID of the item with the progress.\n   * @param progress Progress of the item.\n   */\n  public onProgress(id: string, progress: number) {\n    this.progressItems[id] = progress;\n\n    const totalProgress = Object.values(this.progressItems).reduce(\n      (acc, val) => acc + val,\n      0,\n    );\n    const totalItems = Object.keys(this.progressItems).length;\n\n    const averageProgress = totalProgress / totalItems;\n\n    for (const callback of this.onProgressCallbacks) {\n      callback(averageProgress);\n    }\n  }\n\n  /**\n   * Add a listener for when all items have loaded.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListener(callback: () => void) {\n    this.onLoadCallbacks.push(callback);\n  }\n\n  /**\n   * Add a listener for when all items have loaded with check if there\n   * are any items to load when the listener is added.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListenerWithCheck(callback: () => void) {\n    if (this.toLoad.length > 0 && this.toLoad.length !== this.loaded.length) {\n      this.onLoadCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Add a callback to listen when the progress of an item increases.\n   * @param callback Callback to call when the progress of a loading item increases.\n   */\n  public addProgressListener(callback: (progress: number) => void) {\n    this.onProgressCallbacks.push(callback);\n  }\n\n  /**\n   * Reset the loading manager and its items.\n   */\n  public reset() {\n    this.toLoad = [];\n    this.loaded = [];\n    this.onLoadCallbacks = [];\n    this.onProgressCallbacks = [];\n    this.progressItems = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuNode.html":{"url":"classes/PhoenixMenuNode.html","title":"class - PhoenixMenuNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n        \n\n\n            \n                Description\n            \n            \n                A single node of phoenix menu item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                childrenActive\n                            \n                            \n                                    Private\n                                childrenToggleState\n                            \n                            \n                                configActive\n                            \n                            \n                                configs\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                nodeLevel\n                            \n                            \n                                onToggle\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                toggleState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                addConfig\n                            \n                            \n                                applyConfigState\n                            \n                            \n                                findInTree\n                            \n                            \n                                findInTreeOrCreate\n                            \n                            \n                                getNodeState\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                remove\n                            \n                            \n                                removeChild\n                            \n                            \n                                toggleSelfAndDescendants\n                            \n                            \n                                truncate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, icon?: string, onToggle?: (value?: boolean) => void, children?: PhoenixMenuNode[], configs?: [], parent?: PhoenixMenuNode)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:32\n                            \n                        \n\n                \n                    \n                            Create the phoenix menu node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the node.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Icon of the node.\n\n                                                        \n                                                \n                                                \n                                                        onToggle\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function on toggling the node.\n\n                                                        \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                        PhoenixMenuNode[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Children of the node.\n\n                                                        \n                                                \n                                                \n                                                        configs\n                                                  \n                                                        \n                                                                    []\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Configuration options in the node.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Parent of the node.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:16\n                        \n                    \n\n            \n                \n                    Children of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        childrenActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:30\n                        \n                    \n\n            \n                \n                    If the node children are active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        childrenToggleState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:27\n                        \n                    \n\n            \n                \n                    Previous toggle state of child nodes. This is so that the\nprevious state of child can be restored if we toggle the parent back on.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:32\n                        \n                    \n\n            \n                \n                    If the node configuration options are active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:18\n                        \n                    \n\n            \n                \n                    Configuration options in the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:10\n                        \n                    \n\n            \n                \n                    Icon of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:8\n                        \n                    \n\n            \n                \n                    Name of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeLevel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:20\n                        \n                    \n\n            \n                \n                    Level of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onToggle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:12\n                        \n                    \n\n            \n                \n                    Function on toggling the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:22\n                        \n                    \n\n            \n                \n                    Parent of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:14\n                        \n                    \n\n            \n                \n                    If the node toggle state is true or false.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addChild\n                        \n                    \n                \n            \n            \n                \naddChild(name: string, onToggle?: (value?: boolean) => void, icon?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:66\n                        \n                    \n\n\n            \n                \n                        Add a child to the phoenix menu item.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the child.\n\n                                            \n                                        \n                                        \n                                                onToggle\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Function on toggling the child.\n\n                                            \n                                        \n                                        \n                                                icon\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Icon of the child.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PhoenixMenuNode\n\n                        \n                            \n                                The child node.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addConfig\n                        \n                    \n                \n            \n            \n                \naddConfig(type: T, options: Omit)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:115\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Add a config to the phoenix menu item.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Type of configuration.\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                        Omit\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Options for the config.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PhoenixMenuNode\n\n                        \n                            \n                                The current node.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        applyConfigState\n                        \n                    \n                \n            \n            \n                \napplyConfigState(config: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:149\n                        \n                    \n\n\n            \n                \n                        Apply the current values of config by calling the change function.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Config whose values are to be applied.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findInTree\n                        \n                    \n                \n            \n            \n                \nfindInTree(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:242\n                        \n                    \n\n\n            \n                \n                        Find a node in the tree by name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the node to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PhoenixMenuNode\n\n                        \n                            \n                                The found node.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findInTreeOrCreate\n                        \n                    \n                \n            \n            \n                \nfindInTreeOrCreate(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:260\n                        \n                    \n\n\n            \n                \n                        Find a node in the tree by name or create one.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the node to find or create.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PhoenixMenuNode\n\n                        \n                            \n                                The found or created node.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeState\n                        \n                    \n                \n            \n            \n                \ngetNodeState()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:175\n                        \n                    \n\n\n            \n                \n                        Get current state of the node as an object.\n\n\n                        \n                            Returns :     literal type\n\n                        \n                            \n                                State of the node as an object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadStateFromJSON\n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:196\n                        \n                    \n\n\n            \n                \n                        Load the state of the phoenix menu node from JSON.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        string | literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JSON containing the phoenix menu node state.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:92\n                        \n                    \n\n\n            \n                \n                        Remove the current node.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeChild\n                        \n                    \n                \n            \n            \n                \nremoveChild(child: PhoenixMenuNode)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:83\n                        \n                    \n\n\n            \n                \n                        Remove a child node.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                child\n                                            \n                                                            PhoenixMenuNode\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The child node to be removed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PhoenixMenuNode\n\n                        \n                            \n                                The current node.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleSelfAndDescendants\n                        \n                    \n                \n            \n            \n                \ntoggleSelfAndDescendants(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:129\n                        \n                    \n\n\n            \n                \n                        Function for toggling the current and all child nodes.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    If the node itself and descendants are to be made true or false.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        truncate\n                        \n                    \n                \n            \n            \n                \ntruncate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:105\n                        \n                    \n\n\n            \n                \n                        Remove all children.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixMenuConfigs } from './config-types';\n\n/**\n * A single node of phoenix menu item.\n */\nexport class PhoenixMenuNode {\n  /** Name of the node. */\n  name: string;\n  /** Icon of the node. */\n  icon: string;\n  /** Function on toggling the node. */\n  onToggle: (value: boolean) => void;\n  /** If the node toggle state is true or false. */\n  toggleState: boolean = true;\n  /** Children of the node. */\n  children: PhoenixMenuNode[] = [];\n  /** Configuration options in the node. */\n  configs: PhoenixMenuConfigs[keyof PhoenixMenuConfigs][] = [];\n  /** Level of the node. */\n  nodeLevel: number = 0;\n  /** Parent of the node. */\n  private parent: PhoenixMenuNode;\n  /**\n   * Previous toggle state of child nodes. This is so that the\n   * previous state of child can be restored if we toggle the parent back on.\n   */\n  private childrenToggleState = {};\n\n  /** If the node children are active or not. */\n  childrenActive: boolean = false;\n  /** If the node configuration options are active or not. */\n  configActive: boolean = false;\n\n  /**\n   * Create the phoenix menu node.\n   * @param name Name of the node.\n   * @param icon Icon of the node.\n   * @param onToggle Function on toggling the node.\n   * @param children Children of the node.\n   * @param configs Configuration options in the node.\n   * @param parent Parent of the node.\n   */\n  constructor(\n    name: string,\n    icon?: string,\n    onToggle?: (value: boolean) => void,\n    children?: PhoenixMenuNode[],\n    configs?: PhoenixMenuConfigs[keyof PhoenixMenuConfigs][],\n    parent?: PhoenixMenuNode,\n  ) {\n    this.name = name;\n    this.icon = icon;\n    this.onToggle = onToggle;\n    if (children) this.children = children;\n    if (configs) this.configs = configs;\n    if (parent) this.parent = parent;\n  }\n\n  /**\n   * Add a child to the phoenix menu item.\n   * @param name Name of the child.\n   * @param onToggle Function on toggling the child.\n   * @param icon Icon of the child.\n   * @returns The child node.\n   */\n  addChild(\n    name: string,\n    onToggle?: (value: boolean) => void,\n    icon?: string,\n  ): PhoenixMenuNode {\n    const child = new PhoenixMenuNode(name, icon, onToggle);\n    child.parent = this;\n    child.nodeLevel = this.nodeLevel + 1;\n    this.children.push(child);\n    return child;\n  }\n\n  /**\n   * Remove a child node.\n   * @param child The child node to be removed.\n   * @returns The current node.\n   */\n  removeChild(child: PhoenixMenuNode): PhoenixMenuNode {\n    const childIndex = this.children.indexOf(child);\n    this.children.splice(childIndex, 1);\n    return this;\n  }\n\n  /**\n   * Remove the current node.\n   */\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    } else {\n      console.error(\n        'Cannot delete root node of phoenix menu. Set it to undefined/null instead.',\n      );\n    }\n  }\n\n  /**\n   * Remove all children.\n   */\n  truncate() {\n    this.children = [];\n  }\n\n  /**\n   * Add a config to the phoenix menu item.\n   * @param type Type of configuration.\n   * @param options Options for the config.\n   * @returns The current node.\n   */\n  addConfig(\n    type: T,\n    options: Omit,\n  ): PhoenixMenuNode {\n    const configsLength = this.configs.push({ type, ...options });\n    // Apply the values of config\n    this.applyConfigState(this.configs[configsLength - 1]);\n    return this;\n  }\n\n  /**\n   * Function for toggling the current and all child nodes.\n   * @param value If the node itself and descendants are to be made true or false.\n   */\n  toggleSelfAndDescendants(value: boolean) {\n    this.onToggle?.(value);\n    this.toggleState = value;\n    for (const child of this.children) {\n      if (!value) {\n        // Save previous toggle state of children and toggle them false\n        this.childrenToggleState[child.name] = child.toggleState;\n        child.toggleSelfAndDescendants(value);\n      } else {\n        // Restore previous toggle state of children\n        child.toggleState = this.childrenToggleState[child.name];\n        child.toggleSelfAndDescendants(child.toggleState);\n      }\n    }\n  }\n\n  /**\n   * Apply the current values of config by calling the change function.\n   * @param config Config whose values are to be applied.\n   */\n  applyConfigState(config: any) {\n    // Apply configs of different config types - manual\n    if (config.type === 'checkbox' && config?.['isChecked']) {\n      config.onChange?.(config?.['isChecked']);\n    } else if (config.type === 'color' && config?.['color'] && !config.group) {\n      // Ignore color by options with `!config.group`, otherwise the collection color is overridden\n      config.onChange?.(config?.['color']);\n    } else if (config.type === 'slider' && config?.['value']) {\n      config.onChange?.(config?.['value']);\n    } else if (\n      config.type === 'rangeSlider' &&\n      config?.['value'] !== undefined\n    ) {\n      config.onChange?.({\n        value: config?.['value'],\n        highValue: config?.['highValue'],\n      });\n      config.setEnableMin?.(config?.['enableMin']);\n      config.setEnableMax?.(config?.['enableMax']);\n    }\n  }\n\n  /**\n   * Get current state of the node as an object.\n   * @returns State of the node as an object.\n   */\n  getNodeState(): { [key: string]: any } {\n    const phoenixNodeJSON: { [key: string]: any } = {};\n\n    phoenixNodeJSON['name'] = this.name;\n    phoenixNodeJSON['nodeLevel'] = this.nodeLevel;\n    phoenixNodeJSON['toggleState'] = this.toggleState;\n    phoenixNodeJSON['childrenActive'] = this.childrenActive;\n    phoenixNodeJSON['configs'] = this.configs;\n    phoenixNodeJSON['children'] = [];\n\n    for (const child of this.children) {\n      phoenixNodeJSON['children'].push(child.getNodeState());\n    }\n\n    return phoenixNodeJSON;\n  }\n\n  /**\n   * Load the state of the phoenix menu node from JSON.\n   * @param json JSON containing the phoenix menu node state.\n   */\n  loadStateFromJSON(json: string | { [key: string]: any }) {\n    let jsonObject: any;\n    if (typeof json === 'string') {\n      jsonObject = JSON.parse(json);\n    } else {\n      jsonObject = json;\n    }\n\n    this.childrenActive = jsonObject['childrenActive'];\n    this.toggleState = jsonObject['toggleState'];\n    this.toggleState !== undefined && this.onToggle?.(this.toggleState);\n\n    for (const configState of jsonObject['configs']) {\n      const nodeConfig = this.configs.find(\n        (nodeConfig) =>\n          nodeConfig.type === configState['type'] &&\n          nodeConfig.label === configState['label'],\n      );\n\n      if (nodeConfig) {\n        for (const prop in configState) {\n          nodeConfig[prop] = configState[prop];\n        }\n\n        this.applyConfigState(nodeConfig);\n      }\n    }\n\n    for (const childState of jsonObject['children']) {\n      const nodeChild = this.children.filter(\n        (nodeChild) =>\n          nodeChild.name === childState.name &&\n          nodeChild.nodeLevel === childState.nodeLevel,\n      )[0];\n\n      if (nodeChild) {\n        nodeChild.loadStateFromJSON(childState);\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name.\n   * @param name Name of the node to find.\n   * @returns The found node.\n   */\n  findInTree(name: string): PhoenixMenuNode {\n    if (this.name === name) {\n      return this;\n    } else {\n      for (const child of this.children) {\n        const nodeFound = child.findInTree(name);\n        if (nodeFound) {\n          return nodeFound;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name or create one.\n   * @param name Name of the node to find or create.\n   * @returns The found or created node.\n   */\n  findInTreeOrCreate(name: string): PhoenixMenuNode {\n    let prevNode: PhoenixMenuNode = this;\n    name.split('>').forEach((nodeName) => {\n      nodeName = nodeName.trim();\n      const nodeFound = prevNode.findInTree(nodeName);\n      // const nodeFound = prevNode.children.find(child => child.name === nodeName);\n\n      prevNode = nodeFound ? nodeFound : prevNode.addChild(nodeName, () => {});\n    });\n    return prevNode;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PhoenixUI.html":{"url":"interfaces/PhoenixUI.html","title":"interface - PhoenixUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PhoenixUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-ui.ts\n        \n\n\n            \n                Description\n            \n            \n                Common interface for implement Phoenix UI menu.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addCollection\n                                    \n                                \n                                \n                                    \n                                        addEventDataFolder\n                                    \n                                \n                                \n                                    \n                                        addEventDataTypeFolder\n                                    \n                                \n                                \n                                    \n                                        addGeometry\n                                    \n                                \n                                \n                                    \n                                        addGeometryFolder\n                                    \n                                \n                                \n                                    \n                                        addLabel\n                                    \n                                \n                                \n                                    \n                                        addLabelsFolder\n                                    \n                                \n                                \n                                    \n                                        clear\n                                    \n                                \n                                \n                                    \n                                        getEventDataTypeFolder\n                                    \n                                \n                                \n                                    \n                                        removeLabel\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addCollection\n                        \n                    \n                \n            \n            \n                \naddCollection(eventDataType: string, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:43\n                        \n                    \n\n\n            \n                \n                        Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventDataType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the event data type.\n\n                                            \n                                        \n                                        \n                                                collectionName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                            \n                                        \n                                        \n                                                cuts\n                                            \n                                                            Cut[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                            \n                                        \n                                        \n                                                collectionColor\n                                            \n                                                        Color\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Default color of the collection.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addEventDataFolder\n                        \n                    \n                \n            \n            \n                \naddEventDataFolder()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:28\n                        \n                    \n\n\n            \n                \n                        Add event data folder with functions for event data toggles like show/hide and depthTest.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \naddEventDataTypeFolder(typeName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:34\n                        \n                    \n\n\n            \n                \n                        Add folder for event data type like tracks or hits to the menu.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                typeName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the type of event data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addGeometry\n                        \n                    \n                \n            \n            \n                \naddGeometry(object: Object3D, menuSubfolder?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:23\n                        \n                    \n\n\n            \n                \n                        Add geometry to the menu's geometry folder and set up its configurable options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                object\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object to add to the UI menu.\n\n                                            \n                                        \n                                        \n                                                menuSubfolder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Subfolder in the menu to add the geometry to. Example Folder > Subfolder.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addGeometryFolder\n                        \n                    \n                \n            \n            \n                \naddGeometryFolder()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:16\n                        \n                    \n\n\n            \n                \n                        Add geometry (detector geometry) folder to the menu.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addLabel\n                        \n                    \n                \n            \n            \n                \naddLabel(labelId: string, onRemoveLabel: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:61\n                        \n                    \n\n\n            \n                \n                        Add folder for configuration of label.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                labelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Unique ID of the label.\n\n                                            \n                                        \n                                        \n                                                onRemoveLabel\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function called when label is removed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addLabelsFolder\n                        \n                    \n                \n            \n            \n                \naddLabelsFolder(configFunctions: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:54\n                        \n                    \n\n\n            \n                \n                        Add labels folder to the menu.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                configFunctions\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Functions to attach to the labels folder configuration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:11\n                        \n                    \n\n\n            \n                \n                        Clear the menu by removing all folders.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \ngetEventDataTypeFolder(typeName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:75\n                        \n                    \n\n\n            \n                \n                        Get the folder of the event data type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                typeName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the event data type.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                Folder of the event data type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeLabel\n                        \n                    \n                \n            \n            \n                \nremoveLabel(labelId: string, labelFolderReference?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:68\n                        \n                    \n\n\n            \n                \n                        Remove label from the menu and scene if it exists.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                labelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A unique label ID string.\n\n                                            \n                                        \n                                        \n                                                labelFolderReference\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Reference to the label folder.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Color, Object3D } from 'three';\nimport { Cut } from '../../lib/models/cut.model';\n\n/**\n * Common interface for implement Phoenix UI menu.\n */\nexport interface PhoenixUI {\n  /**\n   * Clear the menu by removing all folders.\n   */\n  clear(): void;\n\n  /**\n   * Add geometry (detector geometry) folder to the menu.\n   */\n  addGeometryFolder(): void;\n\n  /**\n   * Add geometry to the menu's geometry folder and set up its configurable options.\n   * @param object Object to add to the UI menu.\n   * @param menuSubfolder Subfolder in the menu to add the geometry to. Example `Folder > Subfolder`.\n   */\n  addGeometry(object: Object3D, menuSubfolder?: string): void;\n\n  /**\n   * Add event data folder with functions for event data toggles like show/hide and depthTest.\n   */\n  addEventDataFolder(): void;\n\n  /**\n   * Add folder for event data type like tracks or hits to the menu.\n   * @param typeName Name of the type of event data.\n   */\n  addEventDataTypeFolder(typeName: string): void;\n\n  /**\n   * Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n   * @param eventDataType Name of the event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Default color of the collection.\n   */\n  addCollection(\n    eventDataType: string,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color,\n  ): void;\n\n  /**\n   * Add labels folder to the menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  addLabelsFolder(configFunctions: any): void;\n\n  /**\n   * Add folder for configuration of label.\n   * @param labelId Unique ID of the label.\n   * @param onRemoveLabel Function called when label is removed.\n   */\n  addLabel(labelId: string, onRemoveLabel: () => void): void;\n\n  /**\n   * Remove label from the menu and scene if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelFolderReference Reference to the label folder.\n   */\n  removeLabel(labelId: string, labelFolderReference?: T): void;\n\n  /**\n   * Get the folder of the event data type.\n   * @param typeName Name of the event data type.\n   * @returns Folder of the event data type.\n   */\n  getEventDataTypeFolder(typeName: string): T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/preset-view.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\nAlso allows to point the camera to a given target and to define the default clipping for that view\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                cameraTarget\n                            \n                            \n                                    Public\n                                clipping\n                            \n                            \n                                    Public\n                                clippingOpeningAngle\n                            \n                            \n                                    Public\n                                clippingStartAngle\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], cameraTarget: number[], icon: string, clipping: ClippingSetting, clippingStartAngle: number, clippingOpeningAngle: number)\n                    \n                \n                        \n                            \n                                Defined in src/lib/models/preset-view.model.ts:28\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        cameraTarget\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Target to which the camera is pointing.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                                \n                                                        clipping\n                                                  \n                                                        \n                                                                        ClippingSetting\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        clippingStartAngle\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        clippingOpeningAngle\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraPos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:18\n                        \n                    \n\n            \n                \n                    Position to which the camera is to be set.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraTarget\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:20\n                        \n                    \n\n            \n                \n                    Target to which the camera is pointing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clipping\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClippingSetting\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:24\n                        \n                    \n\n            \n                \n                    Whether clipping should be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clippingOpeningAngle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:28\n                        \n                    \n\n            \n                \n                    In case of clipping, value of the opening angle.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clippingStartAngle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:26\n                        \n                    \n\n            \n                \n                    In case of clipping, value of the start angle.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:16\n                        \n                    \n\n            \n                \n                    Icon of the preset view (to describe the view angle).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:22\n                        \n                    \n\n            \n                \n                    Name of the preset view.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getIconURL\n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/models/preset-view.model.ts:59\n                        \n                    \n\n\n            \n                \n                        Get the URL of the preset view icon.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                Icon URL.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export enum ClippingSetting {\n  NotForced,\n  On,\n  Off,\n}\n\n/**\n * Preset view for easily transforming/changing camera position to a specified position.\n * Also allows to point the camera to a given target and to define the default clipping for that view\n */\nexport class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Target to which the camera is pointing. */\n  public cameraTarget: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /** Whether clipping should be used. */\n  public clipping: ClippingSetting;\n  /** In case of clipping, value of the start angle. */\n  public clippingStartAngle: number;\n  /** In case of clipping, value of the opening angle. */\n  public clippingOpeningAngle: number;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param cameraTarget Target to which the camera is pointing.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(\n    name: string,\n    cameraPos: number[],\n    cameraTarget: number[],\n    icon: string,\n    clipping: ClippingSetting = ClippingSetting.NotForced,\n    clippingStartAngle: number = 0,\n    clippingOpeningAngle: number = 0,\n  ) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.cameraTarget = cameraTarget;\n    this.icon = icon;\n    this.clipping = clipping;\n    this.clippingStartAngle = clippingStartAngle;\n    this.clippingOpeningAngle = clippingOpeningAngle;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrettySymbols.html":{"url":"classes/PrettySymbols.html","title":"class - PrettySymbols","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrettySymbols\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/pretty-symbols.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper for pretty symbols functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                symbols\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPrettyParams\n                            \n                            \n                                    Static\n                                getPrettySymbol\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        symbols\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  }\n                    \n                \n                    \n                        \n                                Defined in src/helpers/pretty-symbols.ts:6\n                        \n                    \n\n            \n                \n                    Pretty symbols for object params.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getPrettyParams\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPrettyParams(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/pretty-symbols.ts:37\n                        \n                    \n\n\n            \n                \n                        Get pretty printed parameters of an object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object parameters to be pretty printed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                New pretty printed parameterss.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getPrettySymbol\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPrettySymbol(param: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/pretty-symbols.ts:24\n                        \n                    \n\n\n            \n                \n                        Get pretty symbol of a parameter.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                param\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Parameter of a physics object.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PrettySymbols {\n  /** Pretty symbols for object params. */\n  public static readonly symbols: { [key: string]: string[] } = {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  };\n\n  /**\n   * Get pretty symbol of a parameter.\n   * @param param Parameter of a physics object.\n   */\n  public static getPrettySymbol(param: string) {\n    const prettySymbol = Object.keys(PrettySymbols.symbols).find((symbol) =>\n      PrettySymbols.symbols[symbol].includes(param),\n    );\n\n    return prettySymbol ? prettySymbol : param;\n  }\n\n  /**\n   * Get pretty printed parameters of an object.\n   * @param params Object parameters to be pretty printed.\n   * @returns New pretty printed parameterss.\n   */\n  public static getPrettyParams(params: { [key: string]: any }): {\n    [key: string]: any;\n  } {\n    // Create a copy of the params so we don't overwrite the original object\n    const paramsCopy = Object.assign({}, params);\n    // Go through all the parameters\n    for (const paramKey of Object.keys(paramsCopy)) {\n      // Get the pretty printed symbol\n      const symbol = PrettySymbols.getPrettySymbol(paramKey);\n      // If we do get a symbol\n      if (symbol !== paramKey) {\n        // Add a parameter with pretty printed symbol\n        paramsCopy[symbol] = paramsCopy[paramKey];\n        delete paramsCopy[paramKey];\n      }\n    }\n\n    // Delete 'pos' since it's too long and not needed\n    delete paramsCopy['pos'];\n\n    // Pretty print the dparams if any\n    if (paramsCopy?.dparams) {\n      const prettyDParams: { [key: string]: any } = {};\n\n      prettyDParams['θ'] = paramsCopy.dparams[3];\n      prettyDParams['ϕ'] = paramsCopy.dparams[2];\n      prettyDParams['|p|'] = Math.abs(1 / paramsCopy.dparams[4]);\n      prettyDParams['q'] = Math.sign(1 / paramsCopy.dparams[4]);\n      prettyDParams['d0'] = paramsCopy.dparams[0];\n      prettyDParams['z0'] = paramsCopy.dparams[1];\n\n      delete paramsCopy.dparams;\n\n      return { ...paramsCopy, ...prettyDParams };\n    }\n\n    return paramsCopy;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RKHelper.html":{"url":"classes/RKHelper.html","title":"class - RKHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RKHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/rk-helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper methods for RungeKutta functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                extrapolateTrackPositions\n                            \n                            \n                                    Static\n                                extrapolationLimit\n                            \n                            \n                                    Static\n                                getTracksWithRungeKutta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        extrapolateTrackPositions\n                        \n                    \n                \n            \n            \n                \n                        \n                    extrapolateTrackPositions(track: literal type, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/rk-helper.ts:44\n                        \n                    \n\n\n            \n                \n                        Extrapolate tracks using RungeKutta propagator.\nis out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                track\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Track which is to be extrapolated.\n\n                                            \n                                        \n                                        \n                                                inbounds\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    RKHelper.extrapolationLimit\n                                            \n\n                                            \n                                                    Function which returns true until the passed position\nis out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An array of track positions.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        extrapolationLimit\n                        \n                    \n                \n            \n            \n                \n                        \n                    extrapolationLimit(pos: Vector3)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/rk-helper.ts:14\n                        \n                    \n\n\n            \n                \n                        Function used by the extrapolator to check if the extrapolation should continue.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                pos\n                                            \n                                                        Vector3\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Location to be tested\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                A boolean: true, if the position is in-bounds, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getTracksWithRungeKutta\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/rk-helper.ts:24\n                        \n                    \n\n\n            \n                \n                        Get extrapolated tracks using RungeKutta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tracksCollectionsEvent\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Event containing tracks collections.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RungeKutta } from './runge-kutta';\nimport { Vector3 } from 'three';\nimport { CoordinateHelper } from './coordinate-helper';\n\n/**\n * Helper methods for RungeKutta functions.\n */\nexport class RKHelper {\n  /**\n   * Function used by the extrapolator to check if the extrapolation should continue.\n   * @param pos Location to be tested\n   * @returns A boolean: true, if the position is in-bounds, false otherwise.\n   */\n  public static extrapolationLimit(pos: Vector3) {\n    if (pos.z > 3000) return false;\n    if (Math.sqrt(pos.x * pos.x + pos.y * pos.y) > 1100) return false;\n    return true;\n  }\n\n  /**\n   * Get extrapolated tracks using RungeKutta.\n   * @param tracksCollectionsEvent Event containing tracks collections.\n   */\n  public static getTracksWithRungeKutta(tracksCollectionsEvent: any) {\n    const tracksCollections = Object.assign({}, tracksCollectionsEvent);\n    const Tracks = {};\n    for (const tracksCollection of Object.keys(tracksCollections)) {\n      for (const track of tracksCollections[tracksCollection]) {\n        track.pos = RKHelper.extrapolateTrackPositions(track);\n      }\n    }\n\n    return Tracks;\n  }\n\n  /**\n   * Extrapolate tracks using RungeKutta propagator.\n   * @param track Track which is to be extrapolated.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n   * @returns An array of track positions.\n\n   */\n  public static extrapolateTrackPositions(\n    track: { dparams: any },\n    inbounds: (pos: Vector3) => boolean = RKHelper.extrapolationLimit,\n  ): any {\n    const dparams = track.dparams;\n    // ATLAS uses mm, MeV\n    const d0 = dparams[0];\n    const z0 = dparams[1];\n    const phi = dparams[2];\n    let theta = dparams[3];\n    const qop = dparams[4];\n\n    if (theta  [\n      val.pos.x,\n      val.pos.y,\n      val.pos.z,\n    ]);\n\n    return positions.concat(extrapolatedPos);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/renderer-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                    Public\n                                getLocalClipping\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                initRenderer\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                            Create the renderer manager by initializing the main renderer.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fixedOverlay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:14\n                        \n                    \n\n            \n                \n                    If the overlay is fixed or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mainRenderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:8\n                        \n                    \n\n            \n                \n                    Main renderer to be used by the event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayRenderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:10\n                        \n                    \n\n            \n                \n                    Overlay renderer for rendering a secondary overlay canvas.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:12\n                        \n                    \n\n            \n                \n                    A list of all available/created renderers.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addRenderer\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:153\n                        \n                    \n\n\n            \n                \n                        Add a renderer to the available renderers list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderer\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Three.js WebGLRenderer to be added.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        containsObject\n                        \n                    \n                \n            \n            \n                \n                        \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:187\n                        \n                    \n\n\n            \n                \n                        Check if the list of available renderers contains a renderer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The renderer to be checked for containment.\n\n                                            \n                                        \n                                        \n                                                list\n                                            \n                                                        WebGLRenderer[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    List of available renderers.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                If the list contains the renderer or not.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getLocalClipping\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLocalClipping()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:210\n                        \n                    \n\n\n            \n                \n                        Get if the local clipping for the first renderer is enabled or disabled.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                If the renderer local clipping is enabled or disabled.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMainRenderer\n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:127\n                        \n                    \n\n\n            \n                \n                        Get the main renderer.\n\n\n                        \n                            Returns :     WebGLRenderer\n\n                        \n                            \n                                The main renderer.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOverlayRenderer\n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:135\n                        \n                    \n\n\n            \n                \n                        Get the renderer used for overlay.\n\n\n                        \n                            Returns :     WebGLRenderer\n\n                        \n                            \n                                The overlay renderer.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRenderers\n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:143\n                        \n                    \n\n\n            \n                \n                        Get all the available renderers.\n\n\n                        \n                            Returns :     WebGLRenderer[]\n\n                        \n                            \n                                A list of three.js WebGLRenderers\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(elementId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:34\n                        \n                    \n\n\n            \n                \n                        Initialize the renderer manager by setting up the main renderer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                elementId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'eventDisplay'\n                                            \n\n                                            \n                                                    ID of the wrapper element.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initRenderer\n                        \n                    \n                \n            \n            \n                \n                        \n                    initRenderer(elementId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:64\n                        \n                    \n\n\n            \n                \n                        Set up the renderer with the DOM.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                elementId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the wrapper element.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFixedOverlay\n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:220\n                        \n                    \n\n\n            \n                \n                        Check if the overlay is fixed or not.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                If the overlay is fixed or not.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeControls\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:163\n                        \n                    \n\n\n            \n                \n                        Remove a renderer from the available renderers list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderer\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Three,js WebGLRenderer to be removed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                        \n                    render(scene: Scene, camera: Camera)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:46\n                        \n                    \n\n\n            \n                \n                        Render the overlay.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scene\n                                            \n                                                        Scene\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event display scene to render.\n\n                                            \n                                        \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Camera for render.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFixOverlay\n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:228\n                        \n                    \n\n\n            \n                \n                        Set if the overlay is to be fixed or not.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    If the overlay is to be fixed or not.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setLocalClippingEnabled\n                        \n                    \n                \n            \n            \n                \n                        \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:200\n                        \n                    \n\n\n            \n                \n                        Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    If the local clipping is to be enabled or disabled.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMainRenderer\n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:97\n                        \n                    \n\n\n            \n                \n                        Set the main renderer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderer\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Three.js WebGLRenderer.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setOverlayRenderer\n                        \n                    \n                \n            \n            \n                \n                        \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:105\n                        \n                    \n\n\n            \n                \n                        Set the renderer for overlay event display view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                overlayCanvas\n                                            \n                                                        HTMLCanvasElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Canvas on which the overlay is to be rendered.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRenderers\n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:119\n                        \n                    \n\n\n            \n                \n                        Set the available renderers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderers\n                                            \n                                                        WebGLRenderer[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    List of three.js WebGLRenderers.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        swapRenderers\n                        \n                    \n                \n            \n            \n                \n                        \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:175\n                        \n                    \n\n\n            \n                \n                        Swap any two renderers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                rendererA\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Renderer A to be swapped with renderer B.\n\n                                            \n                                        \n                                        \n                                                rendererB\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Renderer B to be swapped with renderer A.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, Camera } from 'three';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n  /**\n   * Create the renderer manager by initializing the main renderer.\n   */\n  constructor() {\n    const renderer: WebGLRenderer = new WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      powerPreference: 'high-performance',\n    });\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n  }\n\n  /**\n   * Initialize the renderer manager by setting up the main renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  public init(elementId: string = 'eventDisplay') {\n    // Reset the animation loop\n    this.getMainRenderer().setAnimationLoop(null);\n    // Main renderer for current browsers\n    this.initRenderer(elementId);\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene to render.\n   * @param camera Camera for render.\n   */\n  public render(scene: Scene, camera: Camera) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(scene, camera);\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set up the renderer with the DOM.\n   * @param elementId ID of the wrapper element.\n   */\n  private initRenderer(elementId: string) {\n    let canvasWrapper = document.getElementById(elementId);\n    if (!canvasWrapper) {\n      canvasWrapper = document.body;\n    }\n\n    const rendererWidth = () =>\n      canvasWrapper.offsetWidth > 0\n        ? canvasWrapper.offsetWidth\n        : window.innerWidth;\n    const rendererHeight = () =>\n      canvasWrapper.offsetHeight > 0\n        ? canvasWrapper.offsetHeight\n        : window.innerHeight;\n\n    const mainRenderer = this.getMainRenderer();\n    mainRenderer.setSize(rendererWidth(), rendererHeight(), false);\n    mainRenderer.setPixelRatio(window.devicePixelRatio);\n    mainRenderer.domElement.id = 'three-canvas';\n\n    canvasWrapper.appendChild(this.getMainRenderer().domElement);\n\n    window.addEventListener('resize', () => {\n      mainRenderer.setSize(rendererWidth(), rendererHeight());\n    });\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer({\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true,\n    });\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Get if the local clipping for the first renderer is enabled or disabled.\n   * @returns If the renderer local clipping is enabled or disabled.\n   */\n  public getLocalClipping() {\n    if (this.renderers.length > 0) {\n      return this.renderers[0].localClippingEnabled;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RungeKutta.html":{"url":"classes/RungeKutta.html","title":"class - RungeKutta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RungeKutta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                Class for performing Runge-Kutta operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                propagate\n                            \n                            \n                                    Static\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        propagate\n                        \n                    \n                \n            \n            \n                \n                        \n                    propagate(startPos: Vector3, startDir: Vector3, p: number, q: number, mss: number, plength: number, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/runge-kutta.ts:126\n                        \n                    \n\n\n            \n                \n                        Propagate using the given properties by performing the Runge-Kutta steps.\nis out of bounds, when it returns false.\nthrough the Runge-Kutta steps.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                startPos\n                                            \n                                                        Vector3\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Starting position in 3D space.\n\n                                            \n                                        \n                                        \n                                                startDir\n                                            \n                                                        Vector3\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Starting direction in 3D space.\n\n                                            \n                                        \n                                        \n                                                p\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Momentum.\n\n                                            \n                                        \n                                        \n                                                q\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Charge.\n\n                                            \n                                        \n                                        \n                                                mss\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    -1\n                                            \n\n                                            \n                                                    Max step size.\n\n                                            \n                                        \n                                        \n                                                plength\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1000\n                                            \n\n                                            \n                                                    Path length.\n\n                                            \n                                        \n                                        \n                                                inbounds\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    () => true\n                                            \n\n                                            \n                                                    Function which returns true until the passed position\nis out of bounds, when it returns false.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type[]\n\n                        \n                            \n                                An array containing position and direction at that position calculated\nthrough the Runge-Kutta steps.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        step\n                        \n                    \n                \n            \n            \n                \n                        \n                    step(state: State)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/runge-kutta.ts:12\n                        \n                    \n\n\n            \n                \n                        Perform a Runge-Kutta step for the given state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            State\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State at which the step is to be performed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The computed step size.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6),\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6),\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true,\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScriptLoader.html":{"url":"classes/ScriptLoader.html","title":"class - ScriptLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScriptLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/script-loader.ts\n        \n\n\n            \n                Description\n            \n            \n                Script loader for dynamically loading external scripts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                loadScript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        loadScript\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadScript(scriptURL: string, scriptFor?: string, parentElement: HTMLElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/script-loader.ts:15\n                        \n                    \n\n\n            \n                \n                        Load a script dynamically from a URL.\nDefaults to  tag.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scriptURL\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    URL of the script to be loaded.\n\n                                            \n                                        \n                                        \n                                                scriptFor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Optional data attribute to identify what the script is for. [data-scriptFor]\n\n                                            \n                                        \n                                        \n                                                parentElement\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    document.getElementsByTagName('head')[0]\n                                            \n\n                                            \n                                                    Parent element to which the script is to be appended.\nDefaults to  tag.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise for the script load.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoadingManager } from '../managers/loading-manager';\n\n/**\n * Script loader for dynamically loading external scripts.\n */\nexport class ScriptLoader {\n  /**\n   * Load a script dynamically from a URL.\n   * @param scriptURL URL of the script to be loaded.\n   * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\n   * @param parentElement Parent element to which the script is to be appended.\n   * Defaults to `` tag.\n   * @returns Promise for the script load.\n   */\n  public static loadScript(\n    scriptURL: string,\n    scriptFor?: string,\n    parentElement: HTMLElement = document.getElementsByTagName('head')[0],\n  ): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('single_script');\n\n    return new Promise((resolve, reject) => {\n      const scriptExists = document.querySelectorAll(\n        'script[src=\"' + scriptURL + '\"]',\n      );\n\n      // If no script exists - add one\n      if (scriptExists.length === 0) {\n        const scriptElement = document.createElement('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = scriptURL;\n        if (scriptFor) {\n          scriptElement.setAttribute('data-scriptfor', scriptFor);\n        }\n\n        scriptElement.addEventListener('load', () => {\n          scriptElement.setAttribute('data-loaded', 'true');\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        });\n        scriptElement.onerror = (event) => {\n          console.error('ERROR LOADING SCRIPT: ', event);\n          reject();\n          loadingManager.itemLoaded('single_script');\n        };\n\n        parentElement.appendChild(scriptElement);\n      } else {\n        // If script has already loaded then resolve else wait for it to load\n        if (scriptExists[0].dataset.loaded === 'true') {\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        } else {\n          scriptExists[0].addEventListener('load', () => {\n            resolve();\n            loadingManager.itemLoaded('single_script');\n          });\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/selection-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                effectsManager\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                preSelectionAntialias\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                disableHighlighting\n                            \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Public\n                                enableHighlighting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/selection-manager.ts:43\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        activeObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable('')\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:30\n                        \n                    \n\n            \n                \n                    The currently selected object which is observable for changes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        camera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:24\n                        \n                    \n\n            \n                \n                    The camera inside the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        effectsManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EffectsManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:38\n                        \n                    \n\n            \n                \n                    Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ignoreList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:32\n                        \n                    \n\n            \n                \n                    Objects to be ignored on hovering over the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        infoLogger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InfoLogger\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:41\n                        \n                    \n\n            \n                \n                    Service for logging data to the information panel.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:22\n                        \n                    \n\n            \n                \n                    Is initialized.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onDocumentMouseDown\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:158\n                        \n                    \n\n            \n                \n                    Function to call on mouse click when object selection is enabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onTouchDown\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:207\n                        \n                    \n\n            \n                \n                    Function to call on touch when object selection is enabled.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    event\n                                                    \n                                                            Event containing touch data.\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onTouchMove\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:145\n                        \n                    \n\n            \n                \n                    Function to call on mouse move when object selection is enabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        outlinePass\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutlinePass\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:36\n                        \n                    \n\n            \n                \n                    Outline pass for highlighting the hovered over event display elements.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        preSelectionAntialias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:43\n                        \n                    \n\n            \n                \n                    Performance mode value before enabling selection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scene\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Scene\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:26\n                        \n                    \n\n            \n                \n                    The scene used for event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedObject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:28\n                        \n                    \n\n            \n                \n                    Object used to display the information of the selected 3D object.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        disableHighlighting\n                        \n                    \n                \n            \n            \n                \n                        \n                    disableHighlighting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:260\n                        \n                    \n\n\n            \n                \n                        Disable highlighting of objects.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        disableSelecting\n                        \n                    \n                \n            \n            \n                \n                        \n                    disableSelecting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:128\n                        \n                    \n\n\n            \n                \n                        Disable selecting of event display elements and remove mouse move and click events.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        enableHighlighting\n                        \n                    \n                \n            \n            \n                \n                        \n                    enableHighlighting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:238\n                        \n                    \n\n\n            \n                \n                        Enable highlighting of the objects.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        enableSelecting\n                        \n                    \n                \n            \n            \n                \n                        \n                    enableSelecting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:111\n                        \n                    \n\n\n            \n                \n                        Enable selecting of event display elements and set mouse move and click events.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getActiveObjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getActiveObjectId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:94\n                        \n                    \n\n\n            \n                \n                        Get the uuid of the currently selected object.\n\n\n                        \n                            Returns :         ActiveVariable\n\n                        \n                            \n                                uuid of the currently selected object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlightObject\n                        \n                    \n                \n            \n            \n                \n                        \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:249\n                        \n                    \n\n\n            \n                \n                        Highlight the object with the given uuid by giving it an outline.\nwith the given uuid.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    uuid of the object.\n\n                                            \n                                        \n                                        \n                                                objectsGroup\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(camera: Camera, scene: Scene, effectsManager: EffectsManager, infoLogger: InfoLogger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:65\n                        \n                    \n\n\n            \n                \n                        Initialize the selection manager.\nlike outline pass and unreal bloom.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The camera inside the scene.\n\n                                            \n                                        \n                                        \n                                                scene\n                                            \n                                                        Scene\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The scene used for event display.\n\n                                            \n                                        \n                                        \n                                                effectsManager\n                                            \n                                                            EffectsManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Manager for managing three.js event display effects\nlike outline pass and unreal bloom.\n\n                                            \n                                        \n                                        \n                                                infoLogger\n                                            \n                                                            InfoLogger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Service for logging data to the information panel.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        intersectObject\n                        \n                    \n                \n            \n            \n                \n                        \n                    intersectObject(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:218\n                        \n                    \n\n\n            \n                \n                        Check if any object intersects on mouse move.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Event containing data of the mouse move.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Object3D\n\n                        \n                            \n                                Intersected or hovered over object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSelectedObject\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:83\n                        \n                    \n\n\n            \n                \n                        Set the currently selected object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedObject\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The currently selected object.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSelecting\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSelecting(enable: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:102\n                        \n                    \n\n\n            \n                \n                        Set if selecting is to be enabled or disabled.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                enable\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    If selecting is to be enabled or disabled.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector2,\n  Raycaster,\n  Camera,\n  Scene,\n  Object3D,\n  DirectionalLight,\n  AmbientLight,\n  AxesHelper,\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { InfoLogger } from '../../helpers/info-logger';\nimport { EffectsManager } from './effects-manager';\nimport { PrettySymbols } from '../../helpers/pretty-symbols';\nimport { ActiveVariable } from '../../helpers/active-variable';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n  /** Is initialized. */\n  private isInit: boolean;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The scene used for event display. */\n  private scene: Scene;\n  /** Object used to display the information of the selected 3D object. */\n  private selectedObject: { name: string; attributes: any[] };\n  /** The currently selected object which is observable for changes. */\n  private activeObject = new ActiveVariable('');\n  /** Objects to be ignored on hovering over the scene. */\n  private ignoreList: string[];\n\n  // Post processing\n  /** Outline pass for highlighting the hovered over event display elements. */\n  private outlinePass: OutlinePass;\n  /** Manager for managing three.js event display effects like outline pass and unreal bloom. */\n  private effectsManager: EffectsManager;\n\n  /** Service for logging data to the information panel. */\n  private infoLogger: InfoLogger;\n  /** Performance mode value before enabling selection. */\n  private preSelectionAntialias: boolean;\n\n  /**\n   * Constructor for the selection manager.\n   */\n  constructor() {\n    this.isInit = false;\n    this.ignoreList = [\n      new AmbientLight().type,\n      new DirectionalLight().type,\n      new AxesHelper().type,\n    ];\n  }\n\n  /**\n   * Initialize the selection manager.\n   * @param camera The camera inside the scene.\n   * @param scene The scene used for event display.\n   * @param effectsManager Manager for managing three.js event display effects\n   * like outline pass and unreal bloom.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public init(\n    camera: Camera,\n    scene: Scene,\n    effectsManager: EffectsManager,\n    infoLogger: InfoLogger,\n  ) {\n    this.camera = camera;\n    this.scene = scene;\n    this.isInit = true;\n    this.infoLogger = infoLogger;\n    this.effectsManager = effectsManager;\n    this.outlinePass = this.effectsManager.addOutlinePassForSelection();\n  }\n\n  /**\n   * Set the currently selected object.\n   * @param selectedObject The currently selected object.\n   */\n  public setSelectedObject(selectedObject: {\n    name: string;\n    attributes: any[];\n  }) {\n    this.selectedObject = selectedObject;\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.activeObject;\n  }\n\n  /**\n   * Set if selecting is to be enabled or disabled.\n   * @param enable If selecting is to be enabled or disabled.\n   */\n  public setSelecting(enable: boolean) {\n    if (this.isInit) {\n      enable ? this.enableSelecting() : this.disableSelecting();\n    }\n  }\n\n  /**\n   * Enable selecting of event display elements and set mouse move and click events.\n   */\n  private enableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .addEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('touchstart', this.onTouchDown);\n    this.preSelectionAntialias = this.effectsManager.antialiasing;\n    this.effectsManager.setAntialiasing(false);\n  }\n\n  /**\n   * Disable selecting of event display elements and remove mouse move and click events.\n   */\n  private disableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('touchstart', this.onTouchDown);\n    this.outlinePass.selectedObjects = [];\n    this.effectsManager.setAntialiasing(this.preSelectionAntialias);\n  }\n\n  /**\n   * Function to call on mouse move when object selection is enabled.\n   */\n  private onTouchMove = (event: any) => {\n    const intersectedObject = this.intersectObject(event);\n    if (intersectedObject) {\n      if (this.ignoreList.includes(intersectedObject.type)) {\n        return;\n      }\n      this.outlinePass.selectedObjects = [intersectedObject];\n    }\n  };\n\n  /**\n   * Function to call on mouse click when object selection is enabled.\n   */\n  private onDocumentMouseDown = () => {\n    const intersectedObject = this.outlinePass.selectedObjects[0];\n    if (intersectedObject) {\n      this.selectedObject.name = intersectedObject.name;\n      this.selectedObject.attributes.splice(\n        0,\n        this.selectedObject.attributes.length,\n      );\n\n      this.activeObject.update(intersectedObject.uuid);\n\n      const prettyParams = PrettySymbols.getPrettyParams(\n        intersectedObject.userData,\n      );\n\n      for (const key of Object.keys(prettyParams)) {\n        this.selectedObject.attributes.push({\n          attributeName: key,\n          attributeValue: prettyParams[key],\n        });\n      }\n\n      // Process properties of the selected object\n      const props = Object.keys(intersectedObject.userData)\n        .map((key) => {\n          // Only take properties that are a string or number (no arrays or objects)\n          if (\n            ['string', 'number'].includes(\n              typeof intersectedObject.userData[key],\n            )\n          ) {\n            return key + '=' + intersectedObject.userData[key];\n          }\n        })\n        .filter((val) => val);\n      // Build the log text and add to the logger\n      const log =\n        intersectedObject.name +\n        (props.length > 0 ? ' with ' + props.join(', ') : '');\n      if (log) {\n        this.infoLogger.add(log, 'Clicked');\n      }\n    }\n  };\n\n  /**\n   * Function to call on touch when object selection is enabled.\n   * @param event Event containing touch data.\n   */\n  private onTouchDown = (event: TouchEvent) => {\n    event.preventDefault();\n    this.onTouchMove(event.targetTouches[0]);\n    this.onDocumentMouseDown();\n  };\n\n  /**\n   * Check if any object intersects on mouse move.\n   * @param event Event containing data of the mouse move.\n   * @returns Intersected or hovered over object.\n   */\n  private intersectObject(event: any): Object3D {\n    event.preventDefault?.();\n    const mouse = new Vector2();\n    const rendererElement = this.effectsManager.composer.renderer.domElement;\n    mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera(mouse, this.camera);\n    raycaster.params.Line.threshold = 3;\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n    if (intersects.length > 0) {\n      // We want the closest one\n      return intersects[0].object;\n    }\n  }\n\n  /**\n   * Enable highlighting of the objects.\n   */\n  public enableHighlighting() {\n    this.preSelectionAntialias = this.effectsManager.antialiasing;\n    this.effectsManager.setAntialiasing(false);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param objectsGroup Group of objects to be traversed for finding the object\n   * with the given uuid.\n   */\n  public highlightObject(uuid: string, objectsGroup: Object3D) {\n    const object = objectsGroup.getObjectByProperty('uuid', uuid);\n    if (object) {\n      this.outlinePass.selectedObjects = [object];\n      this.activeObject.update(object.uuid);\n    }\n  }\n\n  /**\n   * Disable highlighting of objects.\n   */\n  public disableHighlighting() {\n    this.outlinePass.selectedObjects = [];\n    this.effectsManager.setAntialiasing(this.preSelectionAntialias);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                State of the particle.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dir\n                            \n                            \n                                maxStepSize\n                            \n                            \n                                p\n                            \n                            \n                                pathLength\n                            \n                            \n                                pos\n                            \n                            \n                                q\n                            \n                            \n                                stepSize\n                            \n                            \n                                unitC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dir\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Vector3\n\n                    \n                \n                \n                    \n                        Default value : new Vector3(0, 0, 0)\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:170\n                        \n                    \n\n            \n                \n                    Direction.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxStepSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:180\n                        \n                    \n\n            \n                \n                    Max step size.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:172\n                        \n                    \n\n            \n                \n                    Momentum.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:182\n                        \n                    \n\n            \n                \n                    Path length..\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Vector3\n\n                    \n                \n                \n                    \n                        Default value : new Vector3(0, 0, 0)\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:168\n                        \n                    \n\n            \n                \n                    Position.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        q\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:174\n                        \n                    \n\n            \n                \n                    Charge.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stepSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:178\n                        \n                    \n\n            \n                \n                    Step size.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unitC\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3.3333\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:176\n                        \n                    \n\n            \n                \n                    Unit.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6),\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6),\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true,\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StateManager.html":{"url":"classes/StateManager.html","title":"class - StateManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StateManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/state-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A singleton manager for managing the scene's state.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeCamera\n                            \n                            \n                                clippingEnabled\n                            \n                            \n                                eventDisplay\n                            \n                            \n                                eventMetadata\n                            \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                openingClippingAngle\n                            \n                            \n                                phoenixMenuRoot\n                            \n                            \n                                startClippingAngle\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                getOpeningClippingAngle\n                            \n                            \n                                getStartClippingAngle\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                saveStateAsJSON\n                            \n                            \n                                setCamera\n                            \n                            \n                                setClippingEnabled\n                            \n                            \n                                setEventDisplay\n                            \n                            \n                                setOpeningClippingAngle\n                            \n                            \n                                setPhoenixMenuRoot\n                            \n                            \n                                setStartClippingAngle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/state-manager.ts:29\n                            \n                        \n\n                \n                    \n                            Create the state manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        activeCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:22\n                        \n                    \n\n            \n                \n                    The active camera.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clippingEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(false)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:16\n                        \n                    \n\n            \n                \n                    Whether the clipping is enabled or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventDisplay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventDisplay\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:24\n                        \n                    \n\n            \n                \n                    The event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    runNumber: '000',\n    eventNumber: '000',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:26\n                        \n                    \n\n            \n                \n                    Current loaded event's metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StateManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:12\n                        \n                    \n\n            \n                \n                    Instance of the state manager.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openingClippingAngle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(0)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:20\n                        \n                    \n\n            \n                \n                    Opening angle of the clipping.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoenixMenuRoot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:14\n                        \n                    \n\n            \n                \n                    Root node of the phoenix menu.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startClippingAngle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(0)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:18\n                        \n                    \n\n            \n                \n                    Starting angle of the clipping.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                        \n                    getInstance()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:46\n                        \n                    \n\n\n            \n                \n                        Get the instance of state manager.\n\n\n                        \n                            Returns :         StateManager\n\n                        \n                            \n                                The state manager instance.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOpeningClippingAngle\n                        \n                    \n                \n            \n            \n                \ngetOpeningClippingAngle()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:179\n                        \n                    \n\n\n            \n                \n                        Get the opening angle of clipping.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                The opening angle of clipping.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStartClippingAngle\n                        \n                    \n                \n            \n            \n                \ngetStartClippingAngle()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:163\n                        \n                    \n\n\n            \n                \n                        Get the start clipping angle of clipping.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                The starting angle of clipping.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadStateFromJSON\n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:104\n                        \n                    \n\n\n            \n                \n                        Load the state from JSON.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        string | literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JSON for state.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveStateAsJSON\n                        \n                    \n                \n            \n            \n                \nsaveStateAsJSON()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:80\n                        \n                    \n\n\n            \n                \n                        Save the state of the event display as JSON.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCamera\n                        \n                    \n                \n            \n            \n                \nsetCamera(camera: Camera)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:187\n                        \n                    \n\n\n            \n                \n                        Set the scene camera for state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The camera.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setClippingEnabled\n                        \n                    \n                \n            \n            \n                \nsetClippingEnabled(clipping: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:147\n                        \n                    \n\n\n            \n                \n                        Set the state of clipping.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                clipping\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Whether the clipping is enabled or not.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEventDisplay\n                        \n                    \n                \n            \n            \n                \nsetEventDisplay(eventDisplay: EventDisplay)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:195\n                        \n                    \n\n\n            \n                \n                        Set the event display.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventDisplay\n                                            \n                                                            EventDisplay\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event display.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setOpeningClippingAngle\n                        \n                    \n                \n            \n            \n                \nsetOpeningClippingAngle(angle: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:171\n                        \n                    \n\n\n            \n                \n                        Set the opening angle of clipping.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                angle\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Angle for clipping.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPhoenixMenuRoot\n                        \n                    \n                \n            \n            \n                \nsetPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:54\n                        \n                    \n\n\n            \n                \n                        Set the root node of Phoenix menu.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                phoenixMenuRoot\n                                            \n                                                            PhoenixMenuNode\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Phoenix menu root node.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setStartClippingAngle\n                        \n                    \n                \n            \n            \n                \nsetStartClippingAngle(angle: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:155\n                        \n                    \n\n\n            \n                \n                        Set the start clipping angle of clipping.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                angle\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Angle for clipping.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDisplay } from '../event-display';\nimport { Camera } from 'three';\nimport { PhoenixMenuNode } from './ui-manager/phoenix-menu/phoenix-menu-node';\nimport { loadFile, saveFile } from '../helpers/file';\nimport { ActiveVariable } from '../helpers/active-variable';\n\n/**\n * A singleton manager for managing the scene's state.\n */\nexport class StateManager {\n  /** Instance of the state manager. */\n  private static instance: StateManager;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether the clipping is enabled or not. */\n  clippingEnabled = new ActiveVariable(false);\n  /** Starting angle of the clipping. */\n  startClippingAngle = new ActiveVariable(0);\n  /** Opening angle of the clipping. */\n  openingClippingAngle = new ActiveVariable(0);\n  /** The active camera. */\n  activeCamera: Camera;\n  /** The event display. */\n  eventDisplay: EventDisplay;\n  /** Current loaded event's metadata. */\n  eventMetadata: { runNumber: string; eventNumber: string } = {\n    runNumber: '000',\n    eventNumber: '000',\n  };\n\n  /**\n   * Create the state manager.\n   * @returns The state manager instance.\n   */\n  constructor() {\n    if (StateManager.instance === undefined) {\n      StateManager.instance = this;\n    }\n    return StateManager.instance;\n  }\n\n  /**\n   * Get the instance of state manager.\n   * @returns The state manager instance.\n   */\n  static getInstance(): StateManager {\n    return StateManager.instance;\n  }\n\n  /**\n   * Set the root node of Phoenix menu.\n   * @param phoenixMenuRoot Phoenix menu root node.\n   */\n  setPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuRoot;\n\n    if (this.phoenixMenuRoot) {\n      // Add save and load config buttons to the root node\n      this.phoenixMenuRoot\n        .addConfig('button', {\n          label: 'Save state',\n          onClick: () => {\n            this.saveStateAsJSON();\n          },\n        })\n        .addConfig('button', {\n          label: 'Load state',\n          onClick: () => {\n            loadFile((data) => {\n              this.loadStateFromJSON(JSON.parse(data));\n            });\n          },\n        });\n    }\n  }\n\n  /**\n   * Save the state of the event display as JSON.\n   */\n  saveStateAsJSON() {\n    const state: { [key: string]: any } = {\n      phoenixMenu: this.phoenixMenuRoot.getNodeState(),\n      eventDisplay: {\n        cameraPosition: this.activeCamera.position.toArray(),\n        startClippingAngle: this.clippingEnabled.value\n          ? this.startClippingAngle.value\n          : null,\n        openingClippingAngle: this.clippingEnabled.value\n          ? this.openingClippingAngle.value\n          : null,\n      },\n    };\n\n    saveFile(\n      JSON.stringify(state),\n      `run${this.eventMetadata.runNumber}_evt${this.eventMetadata.eventNumber}.json`,\n    );\n  }\n\n  /**\n   * Load the state from JSON.\n   * @param json JSON for state.\n   */\n  loadStateFromJSON(json: string | { [key: string]: any }) {\n    const jsonData: { [key: string]: any } =\n      typeof json === 'string' ? JSON.parse(json) : json;\n\n    if (jsonData['phoenixMenu'] && this.phoenixMenuRoot) {\n      this.phoenixMenuRoot.loadStateFromJSON(jsonData['phoenixMenu']);\n      this.phoenixMenuRoot.configActive = false;\n    }\n\n    if (jsonData['eventDisplay']) {\n      this.activeCamera.position.fromArray(\n        jsonData['eventDisplay']?.['cameraPosition'],\n      );\n\n      const startAngle = jsonData['eventDisplay']?.['startClippingAngle'];\n      const openingAngle = jsonData['eventDisplay']?.['openingClippingAngle'];\n\n      if (startAngle || openingAngle) {\n        this.setClippingEnabled(true);\n        this.eventDisplay.getUIManager().setClipping(true);\n\n        if (startAngle) {\n          this.eventDisplay\n            .getUIManager()\n            .rotateStartAngleClipping(\n              jsonData['eventDisplay']['startClippingAngle'],\n            );\n        }\n        if (openingAngle) {\n          this.eventDisplay\n            .getUIManager()\n            .rotateOpeningAngleClipping(\n              jsonData['eventDisplay']['openingClippingAngle'],\n            );\n        }\n      }\n    }\n  }\n\n  /**\n   * Set the state of clipping.\n   * @param clipping Whether the clipping is enabled or not.\n   */\n  setClippingEnabled(clipping: boolean) {\n    this.clippingEnabled.update(clipping);\n  }\n\n  /**\n   * Set the start clipping angle of clipping.\n   * @param angle Angle for clipping.\n   */\n  setStartClippingAngle(angle: number) {\n    this.startClippingAngle.update(angle);\n  }\n\n  /**\n   * Get the start clipping angle of clipping.\n   * @returns The starting angle of clipping.\n   */\n  getStartClippingAngle(): number {\n    return this.startClippingAngle.value;\n  }\n\n  /**\n   * Set the opening angle of clipping.\n   * @param angle Angle for clipping.\n   */\n  setOpeningClippingAngle(angle: number) {\n    this.openingClippingAngle.update(angle);\n  }\n\n  /**\n   * Get the opening angle of clipping.\n   * @returns The opening angle of clipping.\n   */\n  getOpeningClippingAngle(): number {\n    return this.openingClippingAngle.value;\n  }\n\n  /**\n   * Set the scene camera for state.\n   * @param camera The camera.\n   */\n  setCamera(camera: Camera) {\n    this.activeCamera = camera;\n  }\n\n  /**\n   * Set the event display.\n   * @param eventDisplay The event display.\n   */\n  setEventDisplay(eventDisplay: EventDisplay) {\n    this.eventDisplay = eventDisplay;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TracksMaterial.html":{"url":"classes/TracksMaterial.html","title":"class - TracksMaterial","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TracksMaterial\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/tracks.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom material for the tracks.\n\n            \n\n            \n                Extends\n            \n            \n                        ShaderMaterial\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isTracksMaterial\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params)\n                    \n                \n                        \n                            \n                                Defined in src/loaders/objects/tracks.ts:230\n                            \n                        \n\n                \n                    \n                            Create the tracks material.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Params for creating the tracks material.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isTracksMaterial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:230\n                        \n                    \n\n            \n                \n                    If the material is of track.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BufferGeometry,\n  BufferAttribute,\n  ShaderMaterial,\n  ShaderChunk,\n  Vector2,\n  Vector3,\n  Color,\n  ColorRepresentation,\n} from 'three';\n\n/**\n * Custom mesh for tracks.\n */\nexport class TracksMesh extends BufferGeometry {\n  /** ID of the next track. */\n  next_track_id: number;\n  /** Positions. */\n  positions: number[];\n  /** Previous. */\n  previous: number[];\n  /** Next. */\n  next: number[];\n  /** Colors. */\n  colors: number[];\n  /** Counter. */\n  counter: number[];\n  /** Track ID. */\n  track_id: any[];\n  /** Side. */\n  side: any[];\n  /** Indices. */\n  indices_array: any[];\n  /** Attributes. */\n  _attributes: any;\n\n  /**\n   * Create the tracks mesh.\n   */\n  constructor() {\n    super();\n    (this.type as string) = 'TracksMesh';\n    this.positions = [];\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.counter = [];\n    this.track_id = [];\n    this.colors = [];\n    this.indices_array = [];\n    this.next_track_id = 0;\n  }\n\n  /**\n   * Add a track to the tracks mesh.\n   * @param points Points for constructing the track.\n   * @param color Color of the track.\n   * @returns ID of the track.\n   */\n  addTrack(points: Vector3[], color: ColorRepresentation) {\n    const id = this.next_track_id++;\n\n    const col = new Color(color);\n\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n\n    for (let i = 0; i  0) {\n        this.next.push(p.x, p.y, p.z);\n        this.next.push(p.x, p.y, p.z);\n      }\n    }\n\n    const i = points.length - 1;\n    this.next.push(points[i].x, points[i].y, points[i].z);\n    this.next.push(points[i].x, points[i].y, points[i].z);\n\n    //this.process()\n    return id;\n  }\n\n  /**\n   * Process the track mesh.\n   */\n  process() {\n    if (\n      !this._attributes ||\n      this._attributes.position.count !== this.positions.length\n    ) {\n      this._attributes = {\n        position: new BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new BufferAttribute(new Float32Array(this.previous), 3),\n        next: new BufferAttribute(new Float32Array(this.next), 3),\n        side: new BufferAttribute(new Float32Array(this.side), 1),\n        track_id: new BufferAttribute(new Int32Array(this.track_id), 1),\n        color: new BufferAttribute(new Float32Array(this.colors), 3),\n        counter: new BufferAttribute(new Float32Array(this.counter), 1),\n        index: new BufferAttribute(new Uint32Array(this.indices_array), 1),\n      };\n    } else {\n      (this._attributes.position as BufferAttribute).copyArray(\n        new Float32Array(this.positions),\n      );\n      this._attributes.position.needsUpdate = true;\n      (this._attributes.previous as BufferAttribute).copyArray(\n        new Float32Array(this.previous),\n      );\n      this._attributes.previous.needsUpdate = true;\n      (this._attributes.next as BufferAttribute).copyArray(\n        new Float32Array(this.next),\n      );\n      this._attributes.next.needsUpdate = true;\n      (this._attributes.side as BufferAttribute).copyArray(\n        new Float32Array(this.side),\n      );\n      this._attributes.side.needsUpdate = true;\n      (this._attributes.track_id as BufferAttribute).copyArray(\n        new Int32Array(this.track_id),\n      );\n      this._attributes.track_id.needsUpdate = true;\n      (this._attributes.color as BufferAttribute).copyArray(\n        new Float32Array(this.colors),\n      );\n      this._attributes.color.needsUpdate = true;\n      (this._attributes.counter as BufferAttribute).copyArray(\n        new Float32Array(this.counter),\n      );\n      this._attributes.counter.needsUpdate = true;\n      (this._attributes.index as BufferAttribute).copyArray(\n        new Uint32Array(this.indices_array),\n      );\n      this._attributes.index.needsUpdate = true;\n    }\n\n    this.setAttribute('position', this._attributes.position);\n    this.setAttribute('previous', this._attributes.previous);\n    this.setAttribute('next', this._attributes.next);\n    this.setAttribute('side', this._attributes.side);\n    this.setAttribute('track_id', this._attributes.track_id);\n    this.setAttribute('color', this._attributes.color);\n    this.setAttribute('counter', this._attributes.counter);\n\n    this.setIndex(this._attributes.index as BufferAttribute);\n\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n}\n\n/** Custom vertex shader for tracks. */\nShaderChunk['tracks_vert'] = [\n  'attribute vec3 previous;',\n  'attribute vec3 next;',\n  'attribute int track_id;',\n  'attribute float side;',\n  'attribute vec3 color;',\n  'attribute float counter;',\n\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n\n  'uniform vec2 resolution;',\n  'uniform float lineWidth;',\n  'void main() {',\n  '  vec2 aspect = vec2(resolution.x / resolution.y, 1.0);',\n  '',\n  '  v_color = color;',\n  '  v_counter = counter;',\n  '  v_track_id = track_id;',\n  '',\n  '  mat4 m = projectionMatrix * modelViewMatrix;',\n  '  vec4 finalPosition = m * vec4(position, 1.0);',\n  '  vec4 prevPos = m * vec4(previous, 1.0);',\n  '  vec4 nextPos = m * vec4(next, 1.0);',\n  '',\n  '  vec2 curP = finalPosition.xy / finalPosition.w * aspect;',\n  '  vec2 prevP = prevPos.xy / prevPos.w * aspect;',\n  '  vec2 nextP = nextPos.xy / nextPos.w * aspect;',\n  '',\n  '  vec2 dir;',\n  '  if (curP == prevP) dir = normalize(nextP - curP);',\n  '  else if (curP == nextP) dir = normalize(curP - prevP);',\n  '  else dir = normalize(curP - prevP);',\n  '',\n  '  vec2 normal = vec2(-dir.y, dir.x);',\n  '  normal.xy *= .5 * lineWidth;',\n  '  normal.x /= aspect.x;',\n  '  normal.xy *= finalPosition.w * 0.001;',\n\n  '  finalPosition.xy += normal.xy * side;',\n  '  gl_Position = finalPosition;',\n  '}',\n].join('\\n');\n\n/** Custom fragment shadre for track. */\nShaderChunk['tracks_frag'] = [\n  'uniform float progress;',\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n  'void main() {',\n  '  if (v_counter > progress) discard;',\n  '  gl_FragColor = vec4(v_color, 1.0);',\n  '}',\n].join('\\n');\n\n/**\n * Custom material for the tracks.\n */\nexport class TracksMaterial extends ShaderMaterial {\n  /** If the material is of track. */\n  isTracksMaterial: boolean;\n\n  /**\n   * Create the tracks material.\n   * @param params Params for creating the tracks material.\n   */\n  constructor(params) {\n    super({\n      uniforms: Object.assign(\n        {},\n        {\n          lineWidth: { value: 1 },\n          resolution: { value: new Vector2(1, 1) },\n          progress: { value: 1 },\n        },\n      ),\n      vertexShader: ShaderChunk['tracks_vert'],\n      fragmentShader: ShaderChunk['tracks_vert'],\n    });\n    this.isTracksMaterial = true;\n    this.type = 'TracksMaterial';\n\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.lineWidth.value;\n        },\n        set: function (value) {\n          this.uniforms.lineWidth.value = value;\n        },\n      },\n      resolution: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.resolution.value;\n        },\n        set: function (value) {\n          this.uniforms.resolution.value.copy(value);\n        },\n      },\n      progress: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.progress.value;\n        },\n        set: function (value) {\n          this.uniforms.progress.value = value;\n        },\n      },\n    });\n\n    this.setValues(params);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TracksMesh.html":{"url":"classes/TracksMesh.html","title":"class - TracksMesh","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TracksMesh\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/tracks.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom mesh for tracks.\n\n            \n\n            \n                Extends\n            \n            \n                        BufferGeometry\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _attributes\n                            \n                            \n                                colors\n                            \n                            \n                                counter\n                            \n                            \n                                indices_array\n                            \n                            \n                                next\n                            \n                            \n                                next_track_id\n                            \n                            \n                                positions\n                            \n                            \n                                previous\n                            \n                            \n                                side\n                            \n                            \n                                track_id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addTrack\n                            \n                            \n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/objects/tracks.ts:35\n                            \n                        \n\n                \n                    \n                            Create the tracks mesh.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _attributes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:35\n                        \n                    \n\n            \n                \n                    Attributes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:25\n                        \n                    \n\n            \n                \n                    Colors.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:27\n                        \n                    \n\n            \n                \n                    Counter.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        indices_array\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:33\n                        \n                    \n\n            \n                \n                    Indices.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:23\n                        \n                    \n\n            \n                \n                    Next.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next_track_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:17\n                        \n                    \n\n            \n                \n                    ID of the next track.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        positions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:19\n                        \n                    \n\n            \n                \n                    Positions.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        previous\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:21\n                        \n                    \n\n            \n                \n                    Previous.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        side\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:31\n                        \n                    \n\n            \n                \n                    Side.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        track_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:29\n                        \n                    \n\n            \n                \n                    Track ID.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addTrack\n                        \n                    \n                \n            \n            \n                \naddTrack(points: Vector3[], color: ColorRepresentation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/objects/tracks.ts:60\n                        \n                    \n\n\n            \n                \n                        Add a track to the tracks mesh.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                points\n                                            \n                                                        Vector3[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Points for constructing the track.\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                        ColorRepresentation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Color of the track.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                ID of the track.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        process\n                        \n                    \n                \n            \n            \n                \nprocess()\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/objects/tracks.ts:102\n                        \n                    \n\n\n            \n                \n                        Process the track mesh.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BufferGeometry,\n  BufferAttribute,\n  ShaderMaterial,\n  ShaderChunk,\n  Vector2,\n  Vector3,\n  Color,\n  ColorRepresentation,\n} from 'three';\n\n/**\n * Custom mesh for tracks.\n */\nexport class TracksMesh extends BufferGeometry {\n  /** ID of the next track. */\n  next_track_id: number;\n  /** Positions. */\n  positions: number[];\n  /** Previous. */\n  previous: number[];\n  /** Next. */\n  next: number[];\n  /** Colors. */\n  colors: number[];\n  /** Counter. */\n  counter: number[];\n  /** Track ID. */\n  track_id: any[];\n  /** Side. */\n  side: any[];\n  /** Indices. */\n  indices_array: any[];\n  /** Attributes. */\n  _attributes: any;\n\n  /**\n   * Create the tracks mesh.\n   */\n  constructor() {\n    super();\n    (this.type as string) = 'TracksMesh';\n    this.positions = [];\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.counter = [];\n    this.track_id = [];\n    this.colors = [];\n    this.indices_array = [];\n    this.next_track_id = 0;\n  }\n\n  /**\n   * Add a track to the tracks mesh.\n   * @param points Points for constructing the track.\n   * @param color Color of the track.\n   * @returns ID of the track.\n   */\n  addTrack(points: Vector3[], color: ColorRepresentation) {\n    const id = this.next_track_id++;\n\n    const col = new Color(color);\n\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n\n    for (let i = 0; i  0) {\n        this.next.push(p.x, p.y, p.z);\n        this.next.push(p.x, p.y, p.z);\n      }\n    }\n\n    const i = points.length - 1;\n    this.next.push(points[i].x, points[i].y, points[i].z);\n    this.next.push(points[i].x, points[i].y, points[i].z);\n\n    //this.process()\n    return id;\n  }\n\n  /**\n   * Process the track mesh.\n   */\n  process() {\n    if (\n      !this._attributes ||\n      this._attributes.position.count !== this.positions.length\n    ) {\n      this._attributes = {\n        position: new BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new BufferAttribute(new Float32Array(this.previous), 3),\n        next: new BufferAttribute(new Float32Array(this.next), 3),\n        side: new BufferAttribute(new Float32Array(this.side), 1),\n        track_id: new BufferAttribute(new Int32Array(this.track_id), 1),\n        color: new BufferAttribute(new Float32Array(this.colors), 3),\n        counter: new BufferAttribute(new Float32Array(this.counter), 1),\n        index: new BufferAttribute(new Uint32Array(this.indices_array), 1),\n      };\n    } else {\n      (this._attributes.position as BufferAttribute).copyArray(\n        new Float32Array(this.positions),\n      );\n      this._attributes.position.needsUpdate = true;\n      (this._attributes.previous as BufferAttribute).copyArray(\n        new Float32Array(this.previous),\n      );\n      this._attributes.previous.needsUpdate = true;\n      (this._attributes.next as BufferAttribute).copyArray(\n        new Float32Array(this.next),\n      );\n      this._attributes.next.needsUpdate = true;\n      (this._attributes.side as BufferAttribute).copyArray(\n        new Float32Array(this.side),\n      );\n      this._attributes.side.needsUpdate = true;\n      (this._attributes.track_id as BufferAttribute).copyArray(\n        new Int32Array(this.track_id),\n      );\n      this._attributes.track_id.needsUpdate = true;\n      (this._attributes.color as BufferAttribute).copyArray(\n        new Float32Array(this.colors),\n      );\n      this._attributes.color.needsUpdate = true;\n      (this._attributes.counter as BufferAttribute).copyArray(\n        new Float32Array(this.counter),\n      );\n      this._attributes.counter.needsUpdate = true;\n      (this._attributes.index as BufferAttribute).copyArray(\n        new Uint32Array(this.indices_array),\n      );\n      this._attributes.index.needsUpdate = true;\n    }\n\n    this.setAttribute('position', this._attributes.position);\n    this.setAttribute('previous', this._attributes.previous);\n    this.setAttribute('next', this._attributes.next);\n    this.setAttribute('side', this._attributes.side);\n    this.setAttribute('track_id', this._attributes.track_id);\n    this.setAttribute('color', this._attributes.color);\n    this.setAttribute('counter', this._attributes.counter);\n\n    this.setIndex(this._attributes.index as BufferAttribute);\n\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n}\n\n/** Custom vertex shader for tracks. */\nShaderChunk['tracks_vert'] = [\n  'attribute vec3 previous;',\n  'attribute vec3 next;',\n  'attribute int track_id;',\n  'attribute float side;',\n  'attribute vec3 color;',\n  'attribute float counter;',\n\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n\n  'uniform vec2 resolution;',\n  'uniform float lineWidth;',\n  'void main() {',\n  '  vec2 aspect = vec2(resolution.x / resolution.y, 1.0);',\n  '',\n  '  v_color = color;',\n  '  v_counter = counter;',\n  '  v_track_id = track_id;',\n  '',\n  '  mat4 m = projectionMatrix * modelViewMatrix;',\n  '  vec4 finalPosition = m * vec4(position, 1.0);',\n  '  vec4 prevPos = m * vec4(previous, 1.0);',\n  '  vec4 nextPos = m * vec4(next, 1.0);',\n  '',\n  '  vec2 curP = finalPosition.xy / finalPosition.w * aspect;',\n  '  vec2 prevP = prevPos.xy / prevPos.w * aspect;',\n  '  vec2 nextP = nextPos.xy / nextPos.w * aspect;',\n  '',\n  '  vec2 dir;',\n  '  if (curP == prevP) dir = normalize(nextP - curP);',\n  '  else if (curP == nextP) dir = normalize(curP - prevP);',\n  '  else dir = normalize(curP - prevP);',\n  '',\n  '  vec2 normal = vec2(-dir.y, dir.x);',\n  '  normal.xy *= .5 * lineWidth;',\n  '  normal.x /= aspect.x;',\n  '  normal.xy *= finalPosition.w * 0.001;',\n\n  '  finalPosition.xy += normal.xy * side;',\n  '  gl_Position = finalPosition;',\n  '}',\n].join('\\n');\n\n/** Custom fragment shadre for track. */\nShaderChunk['tracks_frag'] = [\n  'uniform float progress;',\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n  'void main() {',\n  '  if (v_counter > progress) discard;',\n  '  gl_FragColor = vec4(v_color, 1.0);',\n  '}',\n].join('\\n');\n\n/**\n * Custom material for the tracks.\n */\nexport class TracksMaterial extends ShaderMaterial {\n  /** If the material is of track. */\n  isTracksMaterial: boolean;\n\n  /**\n   * Create the tracks material.\n   * @param params Params for creating the tracks material.\n   */\n  constructor(params) {\n    super({\n      uniforms: Object.assign(\n        {},\n        {\n          lineWidth: { value: 1 },\n          resolution: { value: new Vector2(1, 1) },\n          progress: { value: 1 },\n        },\n      ),\n      vertexShader: ShaderChunk['tracks_vert'],\n      fragmentShader: ShaderChunk['tracks_vert'],\n    });\n    this.isTracksMaterial = true;\n    this.type = 'TracksMaterial';\n\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.lineWidth.value;\n        },\n        set: function (value) {\n          this.uniforms.lineWidth.value = value;\n        },\n      },\n      resolution: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.resolution.value;\n        },\n        set: function (value) {\n          this.uniforms.resolution.value.copy(value);\n        },\n      },\n      progress: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.progress.value;\n        },\n        set: function (value) {\n          this.uniforms.progress.value = value;\n        },\n      },\n    });\n\n    this.setValues(params);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/URLOptionsManager.html":{"url":"classes/URLOptionsManager.html","title":"class - URLOptionsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  URLOptionsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/url-options-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A manager for managing options given through URL.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                urlOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applyEmbedOption\n                            \n                            \n                                    Public\n                                applyEventOptions\n                            \n                            \n                                    Public\n                                applyHideWidgetsOptions\n                            \n                            \n                                    Public\n                                applyOptions\n                            \n                            \n                                    Public\n                                getURLOptions\n                            \n                            \n                                    Private\n                                    Async\n                                handleJiveXMLEvent\n                            \n                            \n                                    Private\n                                    Async\n                                handleJSONEvent\n                            \n                            \n                                    Private\n                                    Async\n                                handleZipFileEvents\n                            \n                            \n                                    Private\n                                hideIdsWithURLOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventDisplay: EventDisplay, configuration: Configuration)\n                    \n                \n                        \n                            \n                                Defined in src/managers/url-options-manager.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor for the URL options manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        eventDisplay\n                                                  \n                                                        \n                                                                        EventDisplay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Phoenix event display.\n\n                                                        \n                                                \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        Configuration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Configuration of the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        urlOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     URLSearchParams\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/url-options-manager.ts:24\n                        \n                    \n\n            \n                \n                    Variable containing all URL search parameters.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        applyEmbedOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyEmbedOption()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:227\n                        \n                    \n\n\n            \n                \n                        Hide all overlay widgets and enable embed menu if \"hideWidgets\" option from the URL is true.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        applyEventOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyEventOptions(defaultEventPath?: string, defaultEventType?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:59\n                        \n                    \n\n\n            \n                \n                        Initialize the event display with event data and configuration from URL.\n(Only JiveXML and JSON)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                defaultEventPath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Default event path to fallback to if none in URL.\n\n                                            \n                                        \n                                        \n                                                defaultEventType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Default event type to fallback to if none in URL.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        applyHideWidgetsOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyHideWidgetsOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:209\n                        \n                    \n\n\n            \n                \n                        Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        applyOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:43\n                        \n                    \n\n\n            \n                \n                        Initialize and apply all URL options on page load.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getURLOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getURLOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:268\n                        \n                    \n\n\n            \n                \n                        Get options from URL set through query parameters.\n\n\n                        \n                            Returns :     URLSearchParams\n\n                        \n                            \n                                URL options.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleJiveXMLEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJiveXMLEvent(fileURL: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:143\n                        \n                    \n\n\n            \n                \n                        Handle JiveXML event from file URL.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fileURL\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    URL to the XML file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An empty promise. ;(\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleJSONEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJSONEvent(fileURL: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:158\n                        \n                    \n\n\n            \n                \n                        Handle JSON event from file URL.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fileURL\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    URL to the JSON file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An empty promise. ;(\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleZipFileEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleZipFileEvents(fileURL: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:169\n                        \n                    \n\n\n            \n                \n                        Handle zip containing event data files.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fileURL\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    URL to the zip file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An empty promise. ;(\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hideIdsWithURLOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    hideIdsWithURLOption(urlOptionWithIds: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:252\n                        \n                    \n\n\n            \n                \n                        Hide element with IDs based on a URL option.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                urlOptionWithIds\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    IDs to hide with keys as the URL option and its array value as IDs.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JiveXMLLoader } from '../loaders/jivexml-loader';\nimport { PhoenixLoader } from '../loaders/phoenix-loader';\nimport { Configuration } from '../lib/types/configuration';\nimport { EventDisplay } from '../event-display';\nimport { StateManager } from './state-manager';\nimport { readZipFile } from '../helpers/zip';\n\n/**\n * Model for Phoenix URL options.\n */\nexport const phoenixURLOptions = {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n  embed: false,\n};\n\n/**\n * A manager for managing options given through URL.\n */\nexport class URLOptionsManager {\n  /** Variable containing all URL search parameters. */\n  private urlOptions: URLSearchParams;\n\n  /**\n   * Constructor for the URL options manager.\n   * @param eventDisplay The Phoenix event display.\n   * @param configuration Configuration of the event display.\n   */\n  constructor(\n    private eventDisplay: EventDisplay,\n    private configuration: Configuration,\n  ) {\n    this.urlOptions = new URLSearchParams(\n      window.location.href.substr(window.location.href.lastIndexOf('?')),\n    );\n  }\n\n  /**\n   * Initialize and apply all URL options on page load.\n   */\n  public applyOptions() {\n    // Initialize event with data from URL if there is any\n    this.applyEventOptions(\n      this.configuration.defaultEventFile?.eventFile,\n      this.configuration.defaultEventFile?.eventType,\n    );\n    this.applyHideWidgetsOptions();\n    this.applyEmbedOption();\n  }\n\n  /**\n   * Initialize the event display with event data and configuration from URL.\n   * (Only JiveXML and JSON)\n   * @param defaultEventPath Default event path to fallback to if none in URL.\n   * @param defaultEventType Default event type to fallback to if none in URL.\n   */\n  public applyEventOptions(\n    defaultEventPath?: string,\n    defaultEventType?: string,\n  ) {\n    if (!('fetch' in window)) {\n      return;\n    }\n\n    let file: string, type: string;\n\n    if (\n      (!this.urlOptions.get('file') && this.urlOptions.get('type')) ||\n      (this.urlOptions.get('file') && !this.urlOptions.get('type'))\n    ) {\n      console.log(\n        'WARNING - if you set one of type or file, then you need to set both!',\n      );\n      console.log('WARNING - reverting to defaults!');\n    }\n\n    if (!this.urlOptions.get('file') || !this.urlOptions.get('type')) {\n      console.log('Setting and config from defaults');\n      file = defaultEventPath;\n      type = defaultEventType;\n    } else {\n      console.log('Setting and config from urlOptions');\n      file = this.urlOptions.get('file');\n      type = this.urlOptions.get('type').toLowerCase();\n    }\n\n    console.log('Loading ', file, 'of type', type);\n    // Load config from URL\n    const loadConfig = () => {\n      if (this.urlOptions.get('config')) {\n        this.eventDisplay.getLoadingManager().addLoadableItem('url_config');\n        fetch(this.urlOptions.get('config'))\n          .then((res) => res.json())\n          .then((jsonState) => {\n            const stateManager = new StateManager();\n            stateManager.loadStateFromJSON(jsonState);\n          })\n          .finally(() => {\n            this.eventDisplay.getLoadingManager().itemLoaded('url_config');\n          });\n      }\n    };\n\n    const processEventFile = (fileURL: string) => {\n      if (type === 'jivexml') {\n        console.log('Opening JiveXML');\n        return this.handleJiveXMLEvent(fileURL);\n      } else if (type === 'zip') {\n        console.log('Opening zip file');\n        return this.handleZipFileEvents(fileURL);\n      } else {\n        return this.handleJSONEvent(fileURL);\n      }\n    };\n\n    // Load event file from URL\n    if (file && type) {\n      this.eventDisplay.getLoadingManager().addLoadableItem('url_event');\n      processEventFile(file)\n        .catch((error) => {\n          this.eventDisplay\n            .getInfoLogger()\n            .add('Could not find the file specified in URL.', 'Error');\n          console.error('Could not find the file specified in URL.', error);\n        })\n        .finally(() => {\n          // Load config from URL after loading the event\n          loadConfig();\n          this.eventDisplay.getLoadingManager().itemLoaded('url_event');\n        });\n    } else {\n      loadConfig();\n    }\n  }\n\n  /**\n   * Handle JiveXML event from file URL.\n   * @param fileURL URL to the XML file.\n   * @returns An empty promise. ;(\n   */\n  private async handleJiveXMLEvent(fileURL: string) {\n    const fileData = await (await fetch(fileURL)).text();\n    const loader = new JiveXMLLoader();\n    this.configuration.eventDataLoader = loader;\n    // Parse the XML to extract events and their data\n    loader.process(fileData);\n    const eventData = loader.getEventData();\n    this.eventDisplay.buildEventDataFromJSON(eventData);\n  }\n\n  /**\n   * Handle JSON event from file URL.\n   * @param fileURL URL to the JSON file.\n   * @returns An empty promise. ;(\n   */\n  private async handleJSONEvent(fileURL: string) {\n    const fileData = await (await fetch(fileURL)).json();\n    this.configuration.eventDataLoader = new PhoenixLoader();\n    this.eventDisplay.parsePhoenixEvents(fileData);\n  }\n\n  /**\n   * Handle zip containing event data files.\n   * @param fileURL URL to the zip file.\n   * @returns An empty promise. ;(\n   */\n  private async handleZipFileEvents(fileURL: string) {\n    const fileBuffer = await (await fetch(fileURL)).arrayBuffer();\n    const allEventsObject = {};\n    let filesWithData: { [fileName: string]: string };\n\n    // Using a try catch block to catch any errors in Promises\n    try {\n      filesWithData = await readZipFile(fileBuffer);\n    } catch (error) {\n      console.error('Error while reading zip', error);\n      this.eventDisplay.getInfoLogger().add('Could not read zip file', 'Error');\n      return;\n    }\n\n    // JSON event data\n    Object.keys(filesWithData)\n      .filter((fileName) => fileName.endsWith('.json'))\n      .forEach((fileName) => {\n        Object.assign(allEventsObject, JSON.parse(filesWithData[fileName]));\n      });\n\n    // JiveXML event data\n    const jiveloader = new JiveXMLLoader();\n    Object.keys(filesWithData)\n      .filter((fileName) => {\n        return fileName.endsWith('.xml') || fileName.startsWith('JiveXML');\n      })\n      .forEach((fileName) => {\n        jiveloader.process(filesWithData[fileName]);\n        const eventData = jiveloader.getEventData();\n        Object.assign(allEventsObject, { [fileName]: eventData });\n      });\n    // For some reason the above doesn't pick up JiveXML_XXX_YYY.zip\n\n    this.eventDisplay.parsePhoenixEvents(allEventsObject);\n  }\n\n  /**\n   * Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n   */\n  public applyHideWidgetsOptions() {\n    const hideWidgetsOptions = {\n      hideWidgets: [\n        'mainLogo', // Main logo\n        'uiMenu', // UI menu\n        'experimentInfo', // Experiment info\n        'phoenixMenu', // Phoenix menu\n        'statsElement', // Stats at the bottom left\n        'gui', // dat.GUI menu\n      ],\n    };\n\n    this.hideIdsWithURLOption(hideWidgetsOptions);\n  }\n\n  /**\n   * Hide all overlay widgets and enable embed menu if \"hideWidgets\" option from the URL is true.\n   */\n  public applyEmbedOption() {\n    if (this.urlOptions.get('embed') === 'true') {\n      const hideWidgetsOptions = {\n        embed: [\n          'mainLogo', // Main logo\n          'uiMenu', // UI menu\n          'experimentInfo', // Experiment info\n          'phoenixMenu', // Phoenix menu\n          'statsElement', // Stats at the bottom left\n          'gui', // dat.GUI menu\n        ],\n      };\n\n      this.hideIdsWithURLOption(hideWidgetsOptions);\n\n      document\n        .getElementById('embedMenu')\n        ?.style.setProperty('display', 'block');\n    }\n  }\n\n  /**\n   * Hide element with IDs based on a URL option.\n   * @param urlOptionWithIds IDs to hide with keys as the URL option and its array value as IDs.\n   */\n  private hideIdsWithURLOption(urlOptionWithIds: { [key: string]: string[] }) {\n    Object.entries(urlOptionWithIds).forEach(([urlOption, idsToHide]) => {\n      if (this.urlOptions.get(urlOption) === 'true') {\n        idsToHide.forEach((singleId) => {\n          document\n            .getElementById(singleId)\n            ?.style.setProperty('display', 'none');\n        });\n      }\n    });\n  }\n\n  /**\n   * Get options from URL set through query parameters.\n   * @returns URL options.\n   */\n  public getURLOptions() {\n    return this.urlOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VRManager.html":{"url":"classes/VRManager.html","title":"class - VRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/xr/vr-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                VR manager for VR related operations.\n\n            \n\n            \n                Extends\n            \n            \n                            XRManager\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                controller1\n                            \n                            \n                                    Private\n                                controller2\n                            \n                            \n                                    Private\n                                controllerGrip1\n                            \n                            \n                                    Private\n                                controllerGrip2\n                            \n                            \n                                    Private\n                                onControllerSelectEnd\n                            \n                            \n                                    Private\n                                onControllerSelectStart\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                moveInDirection\n                            \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Private\n                                setupVRControls\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:28\n                            \n                        \n\n                \n                    \n                            Create the VR manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controller1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:17\n                        \n                    \n\n            \n                \n                    The VR controller for movement.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controller2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:19\n                        \n                    \n\n            \n                \n                    The VR controller for movement.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controllerGrip1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:21\n                        \n                    \n\n            \n                \n                    The VR controller representation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controllerGrip2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:23\n                        \n                    \n\n            \n                \n                    The VR controller representation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onControllerSelectEnd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:28\n                        \n                    \n\n            \n                \n                    Listener for when the \"Select Start\" button is released.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onControllerSelectStart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:26\n                        \n                    \n\n            \n                \n                    Listener for when the \"Select Start\" button is pushed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        SESSION_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'immersive-vr'\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:15\n                        \n                    \n\n            \n                \n                    Session type to use for VR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:36\n\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:32\n\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:34\n\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:30\n\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:28\n\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:26\n\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:38\n\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        moveInDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveInDirection(direction: Vector3, stepDistance: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/vr-manager.ts:149\n                        \n                    \n\n\n            \n                \n                        Move the camera in the given direction.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                        Vector3\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Direction to move towards.\n\n                                            \n                                        \n                                        \n                                                stepDistance\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Distance to move by.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                        \n                    onXRSessionEnded()\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:61\n\n                        \n                    \n\n\n            \n                \n                        Callback when the VR session ends.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setupVRControls\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupVRControls()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/vr-manager.ts:77\n                        \n                    \n\n\n            \n                \n                        Set up VR controls for moving around the event display.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:48\n\n                        \n                    \n\n\n            \n                \n                        Set and configure the VR session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderer\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Renderer to set the VR session for.\n\n                                            \n                                        \n                                        \n                                                onSessionStarted\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Callback to call when the VR session starts.\n\n                                            \n                                        \n                                        \n                                                onSessionEnded\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Callback to call when the VR session ends.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    endXRSession()\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:99\n\n                        \n                    \n\n\n            \n                \n                        End the current XR session.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:109\n\n                        \n                    \n\n\n            \n                \n                        Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Camera which is to be cloned for XR use.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Group\n\n                        \n                            \n                                The camera group used in XR mode.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                        \n                    getXRCamera()\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:135\n\n                        \n                    \n\n\n            \n                \n                        Get the camera used by XR.\n\n\n                        \n                            Returns :     Camera\n\n                        \n                            \n                                The camera used by XR.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                        \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:78\n\n                        \n                    \n\n\n            \n                \n                        Callback for when the XR session is started.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The XR session.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Vector3, BufferGeometry, Line } from 'three';\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';\nimport { XRManager, XRSessionType } from './xr-manager';\n\n// NOTE: This was created on 29/08/2020\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 20/06/2021\n\n/**\n * VR manager for VR related operations.\n */\nexport class VRManager extends XRManager {\n  /** Session type to use for VR. */\n  static readonly SESSION_TYPE: string = 'immersive-vr';\n  /** The VR controller for movement. */\n  private controller1: any;\n  /** The VR controller for movement. */\n  private controller2: any;\n  /** The VR controller representation */\n  private controllerGrip1: any;\n  /** The VR controller representation */\n  private controllerGrip2: any;\n\n  /** Listener for when the \"Select Start\" button is pushed. */\n  private onControllerSelectStart: () => void;\n  /** Listener for when the \"Select Start\" button is released. */\n  private onControllerSelectEnd: () => void;\n\n  /**\n   * Create the VR manager.\n   * @override\n   */\n  constructor() {\n    super(XRSessionType.VR);\n    this.sessionInit = () => ({\n      optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking'],\n    });\n  }\n\n  /**\n   * Set and configure the VR session.\n   * @param renderer Renderer to set the VR session for.\n   * @param onSessionStarted Callback to call when the VR session starts.\n   * @param onSessionEnded Callback to call when the VR session ends.\n   * @override\n   */\n  public setXRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void,\n  ) {\n    super.setXRSession(renderer, onSessionStarted, onSessionEnded);\n    this.setupVRControls();\n  }\n\n  /**\n   * Callback when the VR session ends.\n   * @override\n   */\n  protected onXRSessionEnded() {\n    super.onXRSessionEnded();\n\n    this.controller1?.removeEventListener(\n      'selectstart',\n      this.onControllerSelectStart,\n    );\n    this.controller1?.removeEventListener(\n      'selectend',\n      this.onControllerSelectEnd,\n    );\n  }\n\n  /**\n   * Set up VR controls for moving around the event display.\n   */\n  private setupVRControls() {\n    // Get the controllers\n    this.controller1 = this.renderer.xr.getController(0);\n    this.getCameraGroup().add(this.controller1);\n    this.controller2 = this.renderer.xr.getController(1);\n    this.getCameraGroup().add(this.controller2);\n\n    const controllerModelFactory = new XRControllerModelFactory();\n    this.controllerGrip1 = this.renderer.xr.getControllerGrip(0);\n    this.controllerGrip1.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip1),\n    );\n    this.getCameraGroup().add(this.controllerGrip1);\n\n    this.controllerGrip2 = this.renderer.xr.getControllerGrip(1);\n    this.controllerGrip2.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip2),\n    );\n    this.getCameraGroup().add(this.controllerGrip2);\n\n    const geometry = new BufferGeometry().setFromPoints([\n      new Vector3(0, 0, 0),\n      new Vector3(0, 0, -1),\n    ]);\n\n    const line = new Line(geometry);\n    line.name = 'line';\n    line.scale.z = 50;\n\n    this.controller1.add(line.clone());\n    this.controller2.add(line.clone());\n\n    // Set up movement\n\n    // Distance for a single step\n    const stepDistance = 30;\n    // Unit vector in camera direction\n    const direction = new Vector3();\n    // Interval ID for the movement interval\n    let intervalId: NodeJS.Timeout;\n\n    this.onControllerSelectStart = () => {\n      console.log(\n        'Select: c1 position ' + this.controller1.position.toArray().join(', '),\n      );\n      console.log(\n        'Select: CG position ' + this.cameraGroup.position.toArray().join(', '),\n      );\n\n      // Start movement in camera direction\n      intervalId = setInterval(() => {\n        this.moveInDirection(direction, stepDistance);\n      }, 20);\n    };\n\n    this.onControllerSelectEnd = () => {\n      // Stop the movement\n      clearInterval(intervalId);\n    };\n\n    this.controller1.addEventListener(\n      'selectstart',\n      this.onControllerSelectStart,\n    );\n    this.controller1.addEventListener('selectend', this.onControllerSelectEnd);\n  }\n\n  /**\n   * Move the camera in the given direction.\n   * @param direction Direction to move towards.\n   * @param stepDistance Distance to move by.\n   */\n  private moveInDirection(direction: Vector3, stepDistance: number) {\n    // Get the direction the controller is facing\n    //! this.controller.getWorldDirection(direction);\n\n    // Get direction the camera is facing\n    this.xrCamera?.getWorldDirection(direction);\n\n    // Move the camera in the given direction\n    this.cameraGroup.position.addScaledVector(direction, stepDistance);\n    this.xrCamera.position.addScaledVector(direction, stepDistance);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-display.ts\n        \n\n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            EventDisplay\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { httpRequest } from 'jsroot';\nimport { settings as jsrootSettings } from 'jsroot';\nimport { build } from 'jsroot/geom';\nimport { openFile } from 'jsroot/io';\nimport { ThreeManager } from './managers/three-manager';\nimport { UIManager } from './managers/ui-manager';\nimport { InfoLogger } from './helpers/info-logger';\nimport { Configuration } from './lib/types/configuration';\nimport { StateManager } from './managers/state-manager';\nimport { LoadingManager } from './managers/loading-manager';\nimport { URLOptionsManager } from './managers/url-options-manager';\nimport { ActiveVariable } from './helpers/active-variable';\nimport { AnimationPreset } from './managers/three-manager/animations-manager';\nimport { XRSessionType } from './managers/three-manager/xr/xr-manager';\nimport { getLabelTitle } from './helpers/labels';\nimport { PhoenixLoader } from './loaders/phoenix-loader';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Phoenix event display class for managing detector geometries and event data.\n */\nexport class EventDisplay {\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n  /** Three manager for three.js operations. */\n  private graphicsLibrary: ThreeManager;\n  /** Info logger for storing event display logs. */\n  private infoLogger: InfoLogger;\n  /** UI manager for UI menu. */\n  private ui: UIManager;\n  /** Loading manager for loadable resources */\n  private loadingManager: LoadingManager;\n  /** State manager for managing event display state. */\n  private stateManager: StateManager;\n  /** URL manager for managing options given through URL. */\n  private urlOptionsManager: URLOptionsManager;\n\n  /**\n   * Create the Phoenix event display and intitialize all the elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  constructor(configuration?: Configuration) {\n    this.loadingManager = new LoadingManager();\n    this.infoLogger = new InfoLogger();\n    this.graphicsLibrary = new ThreeManager(this.infoLogger);\n    this.ui = new UIManager(this.graphicsLibrary);\n    if (configuration) {\n      this.init(configuration);\n    }\n  }\n\n  /**\n   * Initialize all the Phoenix event display elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n\n    // Initialize the three manager with configuration\n    this.graphicsLibrary.init(configuration);\n    // Initialize the UI with configuration\n    this.ui.init(configuration);\n    // Set up for the state manager\n    this.getStateManager().setEventDisplay(this);\n\n    // Animate loop\n    const uiLoop = () => {\n      this.ui.updateUI();\n    };\n    this.graphicsLibrary.setAnimationLoop(uiLoop);\n\n    // Process and apply URL options\n    this.urlOptionsManager = new URLOptionsManager(this, configuration);\n    if (configuration.allowUrlOptions !== false) {\n      this.urlOptionsManager.applyOptions();\n    }\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n    // Allow keyboard controls\n    this.enableKeyboardControls();\n  }\n\n  /**\n   * Initialize XR.\n   * @param xrSessionType Type of the XR session. Either AR or VR.\n   * @param onSessionEnded Callback when the XR session ends.\n   */\n  public initXR(xrSessionType: XRSessionType, onSessionEnded?: () => void) {\n    this.graphicsLibrary.initXRSession(xrSessionType, onSessionEnded);\n  }\n\n  /**\n   * End VR and remove VR settings.\n   * @param xrSessionType Type of the XR session. Either AR or VR.\n   */\n  public endXR(xrSessionType: XRSessionType) {\n    this.graphicsLibrary.endXRSession(xrSessionType);\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    if (typeof this.configuration.eventDataLoader === 'undefined') {\n      this.configuration.eventDataLoader = new PhoenixLoader();\n    }\n    const eventKeys =\n      this.configuration.eventDataLoader.getEventsList(eventsData);\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach((callback) => callback(eventKeys));\n\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Reset labels\n    this.resetLabels();\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    this.ui.addLabelsFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.eventDataLoader.buildEventData(\n      eventData,\n      this.graphicsLibrary,\n      this.ui,\n      this.infoLogger,\n    );\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n    // Reload the event data state in Phoenix menu\n    this.ui.loadEventFolderPhoenixMenuState();\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  /**\n   * Get the three manager responsible for three.js functions.\n   * @returns The three.js manager.\n   */\n  public getThreeManager() {\n    return this.graphicsLibrary;\n  }\n\n  /**\n   * Get the UI manager responsible for UI related functions.\n   * @returns The UI manager.\n   */\n  public getUIManager() {\n    return this.ui;\n  }\n\n  /**\n   * Get the info logger containing event display logs.\n   * @returns The info logger instance being used by the event display.\n   */\n  public getInfoLogger() {\n    return this.infoLogger;\n  }\n\n  /**\n   * Get the loading manager for managing loadable items.\n   * @returns The loading manager.\n   */\n  public getLoadingManager() {\n    return this.loadingManager;\n  }\n\n  /**\n   * Get the state manager that manages event display's state.\n   * @returns The state manager.\n   */\n  public getStateManager() {\n    if (!this.stateManager) {\n      this.stateManager = new StateManager();\n    }\n\n    return this.stateManager;\n  }\n\n  /**\n   * Get the URL options manager that manages options given through URL.\n   * @returns The URL options manager.\n   */\n  public getURLOptionsManager() {\n    return this.urlOptionsManager;\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param doubleSided If true, render both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   * @param setFlat Whether object should be flat-shaded or not. Default `true`.\n   * @returns Promise for loading the geometry.\n   */\n  public async loadOBJGeometry(\n    filename: string,\n    name: string,\n    color: any,\n    menuNodeName?: string,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n    setFlat: boolean = true,\n  ): Promise {\n    this.loadingManager.addLoadableItem(`obj_geom_${name}`);\n\n    const { object } = await this.graphicsLibrary.loadOBJGeometry(\n      filename,\n      name,\n      color,\n      doubleSided,\n      initiallyVisible,\n      setFlat,\n    );\n    this.ui.addGeometry(object, menuNodeName);\n\n    this.loadingManager.itemLoaded(`obj_geom_${name}`);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   */\n  public parseOBJGeometry(\n    content: string,\n    name: string,\n    menuNodeName?: string,\n    initiallyVisible: boolean = true,\n  ) {\n    this.loadingManager.addLoadableItem(`parse_obj_${name}`);\n    const { object } = this.graphicsLibrary.parseOBJGeometry(\n      content,\n      name,\n      initiallyVisible,\n    );\n    this.ui.addGeometry(object, menuNodeName);\n    this.loadingManager.itemLoaded(`parse_obj_${name}`);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   * @returns Promise for loading the geometry.\n   */\n  public async parsePhoenixDisplay(input: any): Promise {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      this.ui.addLabelsFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n\n      this.loadingManager.addLoadableItem(`parse_phnx_${name}`);\n      await this.graphicsLibrary.parsePhnxScene(phoenixScene.scene);\n      this.loadingManager.itemLoaded(`parse_phnx_${name}`);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input Data of the GLTF (.gltf) file.\n   * @param name Name given to the geometry. If empty Name will be taken from the geometry itself\n   * @returns Promise for loading the geometry.\n   */\n  public async parseGLTFGeometry(\n    input: string | ArrayBuffer,\n    name: string,\n  ): Promise {\n    this.loadingManager.addLoadableItem(`parse_gltf_${name}`);\n\n    const allGeometriesUIParameters =\n      await this.graphicsLibrary.parseGLTFGeometry(input, name);\n    for (const { object } of allGeometriesUIParameters) {\n      this.ui.addGeometry(object);\n    }\n\n    this.loadingManager.itemLoaded(`parse_gltf_${name}`);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   * @returns Promise for loading the geometry.\n   */\n  public async loadGLTFGeometry(\n    url: any,\n    name: string | undefined,\n    menuNodeName?: string,\n    scale?: number,\n    initiallyVisible: boolean = true,\n  ): Promise {\n    this.loadingManager.addLoadableItem(`gltf_geom_${name}`);\n\n    const allGeometriesUIParameters =\n      await this.graphicsLibrary.loadGLTFGeometry(\n        url,\n        name,\n        menuNodeName,\n        scale,\n        initiallyVisible,\n      );\n    for (const { object, menuNodeName } of allGeometriesUIParameters) {\n      this.ui.addGeometry(object, menuNodeName);\n    }\n\n    this.loadingManager.itemLoaded(`gltf_geom_${name}`);\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   * @returns Promise for loading the geometry.\n   */\n  public async loadJSONGeometry(\n    json: string | { [key: string]: any },\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n  ): Promise {\n    this.loadingManager.addLoadableItem(`json_geom_${name}`);\n\n    const { object } = await this.graphicsLibrary.loadJSONGeometry(\n      json,\n      name,\n      scale,\n      doubleSided,\n      initiallyVisible,\n    );\n    this.ui.addGeometry(object, menuNodeName);\n\n    this.loadingManager.itemLoaded(`json_geom_${name}`);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n  }\n\n  /**\n   * Load JSON geometry from JSRoot.\n   * @param url URL of the JSRoot geometry file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   */\n  public async loadRootJSONGeometry(\n    url: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n  ) {\n    this.loadingManager.addLoadableItem('root_json_geom');\n\n    const object = await httpRequest(url, 'object');\n    await this.loadJSONGeometry(\n      build(object, { dflt_colors: true }).toJSON(),\n      name,\n      menuNodeName,\n      scale,\n      doubleSided,\n      initiallyVisible,\n    );\n\n    this.loadingManager.itemLoaded('root_json_geom');\n  }\n\n  /**\n   * Load ROOT geometry from JSRoot.\n   * @param url URL of the JSRoot file.\n   * @param objectName Name of the object inside the \".root\" file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   */\n  public async loadRootGeometry(\n    url: string,\n    objectName: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n  ) {\n    this.loadingManager.addLoadableItem('root_geom');\n    // See https://github.com/root-project/jsroot/blob/19ce116b68701ab45e0a092c673119bf97ede0c2/modules/core.mjs#L241.\n    jsrootSettings.UseStamp = false;\n\n    const file = await openFile(url);\n    const obj = await file.readObject(objectName);\n\n    await this.loadJSONGeometry(\n      build(obj, { dflt_colors: true }).toJSON(),\n      name,\n      menuNodeName,\n      scale,\n      doubleSided,\n      initiallyVisible,\n    );\n\n    this.loadingManager.itemLoaded('root_geom');\n  }\n\n  /**\n   * Build Geometry from thr passed parameters, where\n   * @param parameters\n   */\n  public buildGeometryFromParameters(parameters: any): void {\n    this.graphicsLibrary.addGeometryFromParameters(parameters);\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: {\n    eventData: { [key: string]: any };\n    geometries: any[];\n  }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      this.ui.addEventDataTypeFolder(objectType);\n\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection(objectType, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.eventDataLoader.getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.eventDataLoader.getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    return this.configuration.eventDataLoader.getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (\n        filename: string,\n        name: string,\n        colour: any,\n        menuNodeName: string,\n        doubleSided: boolean,\n      ) => {\n        this.loadOBJGeometry(filename, name, colour, menuNodeName, doubleSided);\n      },\n      loadJSONGeometry: (\n        json: string | { [key: string]: any },\n        name: string,\n        menuNodeName: string,\n        scale?: number,\n        doubleSided?: boolean,\n        initiallyVisible: boolean = true,\n      ) => {\n        this.loadJSONGeometry(\n          json,\n          name,\n          menuNodeName,\n          scale,\n          doubleSided,\n          initiallyVisible,\n        );\n      },\n      buildGeometryFromParameters: (parameters: { [key: string]: any }) =>\n        this.buildGeometryFromParameters(parameters),\n      scene: this.getThreeManager().getSceneManager().getScene(),\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string; attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   * @param detector whether the function is for detector objects or event data.\n   */\n  public lookAtObject(uuid: string, detector: boolean = false) {\n    if (detector == true) {\n      this.graphicsLibrary.lookAtObject(uuid, true);\n      this.graphicsLibrary.highlightObject(uuid, true);\n    } else {\n      this.graphicsLibrary.lookAtObject(uuid);\n      this.graphicsLibrary.highlightObject(uuid);\n    }\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param detector whether the function is for detector objects or event data.\n   */\n  public highlightObject(uuid: string, detector: boolean = false) {\n    if (detector == true) {\n      this.graphicsLibrary.highlightObject(uuid, true);\n    } else {\n      this.graphicsLibrary.highlightObject(uuid, false);\n    }\n  }\n\n  /**\n   * Enable highlighting of the objects.\n   */\n  public enableHighlighting() {\n    this.graphicsLibrary.enableHighlighting();\n  }\n\n  /**\n   * Disable highlighting of the objects.\n   */\n  public disableHighlighting() {\n    this.graphicsLibrary.disableHighlighting();\n  }\n\n  /**\n   * Enable keyboard controls for the event display.\n   */\n  public enableKeyboardControls() {\n    this.ui.enableKeyboardControls();\n    this.graphicsLibrary.enableKeyboardControls();\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void,\n  ) {\n    this.graphicsLibrary.animateThroughEvent(\n      startPos,\n      tweenDuration,\n      onAnimationEnd,\n    );\n  }\n\n  /**\n   * Animate scene by animating camera through the scene and animating event collision.\n   * @param animationPreset Preset for animation including positions to go through and\n   * event collision animation options.\n   * @param onEnd Function to call when the animation ends.\n   */\n  public animatePreset(animationPreset: AnimationPreset, onEnd?: () => void) {\n    this.graphicsLibrary.animatePreset(animationPreset, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void,\n  ) {\n    this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Add label to a 3D object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @param uuid UUID of the three.js object.\n   */\n  public addLabelToObject(\n    label: string,\n    collection: string,\n    indexInCollection: number,\n    uuid: string,\n  ) {\n    const labelId = this.configuration.eventDataLoader.addLabelToEventObject(\n      label,\n      collection,\n      indexInCollection,\n    );\n\n    // Remove the label if the string is empty\n    if (!label) {\n      this.ui.removeLabel(labelId, true);\n      return;\n    }\n\n    this.ui.addLabel(labelId);\n    this.graphicsLibrary.addLabelToObject(label, uuid, labelId);\n  }\n\n  /**\n   * Reset/remove all labels.\n   */\n  public resetLabels() {\n    // labelsObject[EventDataType][Collection][Index]\n    const labelsObject = this.configuration.eventDataLoader.getLabelsObject();\n    for (const eventDataType in labelsObject) {\n      for (const collection in labelsObject[eventDataType]) {\n        for (const index in labelsObject[eventDataType][collection]) {\n          const labelId = getLabelTitle(eventDataType, collection, index);\n          this.ui.removeLabel(labelId, true);\n\n          delete labelsObject[eventDataType][collection][index];\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XRManager.html":{"url":"classes/XRManager.html","title":"class - XRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/xr/xr-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                XR manager for XR related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionType: XRSessionType)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:38\n                            \n                        \n\n                \n                    \n                            Create the XR manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sessionType\n                                                  \n                                                        \n                                                                        XRSessionType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Type of the session, either AR or VR.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:36\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:32\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:34\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:30\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:28\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:26\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:38\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    endXRSession()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/xr-manager.ts:99\n                        \n                    \n\n\n            \n                \n                        End the current XR session.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/xr-manager.ts:109\n                        \n                    \n\n\n            \n                \n                        Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Camera which is to be cloned for XR use.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Group\n\n                        \n                            \n                                The camera group used in XR mode.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                        \n                    getXRCamera()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/xr-manager.ts:135\n                        \n                    \n\n\n            \n                \n                        Get the camera used by XR.\n\n\n                        \n                            Returns :     Camera\n\n                        \n                            \n                                The camera used by XR.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                        \n                    onXRSessionEnded()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/xr-manager.ts:88\n                        \n                    \n\n\n            \n                \n                        Callback when the XR session ends.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                        \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/xr-manager.ts:78\n                        \n                    \n\n\n            \n                \n                        Callback for when the XR session is started.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The XR session.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/xr-manager.ts:53\n                        \n                    \n\n\n            \n                \n                        Set and configure the XR session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderer\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Renderer to set the XR session for.\n\n                                            \n                                        \n                                        \n                                                onSessionStarted\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Callback to call when the XR session starts.\n\n                                            \n                                        \n                                        \n                                                onSessionEnded\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Callback to call when the XR session ends.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArrayCamera,\n  Camera,\n  Group,\n  PerspectiveCamera,\n  Vector3,\n  WebGLRenderer,\n} from 'three';\n\n// NOTE: This was created on 28/06/2021\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 29/06/2021\n\n/** Type of the XR session. */\nexport enum XRSessionType {\n  VR = 'VR',\n  AR = 'AR',\n}\n\n/**\n * XR manager for XR related operations.\n */\nexport class XRManager {\n  /** Whether the XR is currently active or not. */\n  protected xrActive: boolean = false;\n  /** Returns required and optional features when requesting an XR session. */\n  protected sessionInit: () => { [key: string]: any };\n  /** Renderer to set the XR session for. */\n  protected renderer: WebGLRenderer;\n  /** Currently active XR session. */\n  protected currentXRSession: any = null;\n  /** Callback to call when the XR session ends. */\n  protected onSessionEnded: () => void;\n  /** Group containing the the camera for XR. */\n  public cameraGroup: Group;\n  /** The camera used by XR. */\n  public xrCamera: Camera;\n\n  /**\n   * Create the XR manager.\n   * @param sessionType Type of the session, either AR or VR.\n   * @param sessionInit Other options for the session like optional features.\n   */\n  constructor(private sessionType: XRSessionType) {}\n\n  /**\n   * Set and configure the XR session.\n   * @param renderer Renderer to set the XR session for.\n   * @param onSessionStarted Callback to call when the XR session starts.\n   * @param onSessionEnded Callback to call when the XR session ends.\n   */\n  public setXRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void,\n  ) {\n    this.renderer = renderer;\n    this.onSessionEnded = onSessionEnded;\n    const webXR = (navigator as any)?.xr;\n    const xrType = this.sessionType === XRSessionType.VR ? 'vr' : 'ar';\n\n    webXR\n      ?.requestSession(`immersive-${xrType}`, this.sessionInit?.())\n      .then((session: any) => {\n        this.onXRSessionStarted.bind(this)(session);\n        onSessionStarted?.();\n      })\n      .catch((error: any) => {\n        console.error(`${xrType.toUpperCase()} Error:`, error);\n      });\n  }\n\n  /**\n   * Callback for when the XR session is started.\n   * @param session The XR session.\n   */\n  protected async onXRSessionStarted(session: any) {\n    this.xrActive = true;\n    session.addEventListener('end', this.onXRSessionEnded.bind(this));\n    await this.renderer.xr.setSession(session);\n    this.currentXRSession = session;\n  }\n\n  /**\n   * Callback when the XR session ends.\n   */\n  protected onXRSessionEnded() {\n    this.xrActive = false;\n    this.currentXRSession.removeEventListener('end', this.onXRSessionEnded);\n    this.currentXRSession = null;\n    this.cameraGroup = undefined;\n    this.onSessionEnded?.();\n  }\n\n  /**\n   * End the current XR session.\n   */\n  public endXRSession() {\n    this.currentXRSession?.end();\n  }\n\n  /**\n   * Get the group containing the camera for XR.\n   * XR camera works by adding a Group with Camera to the scene.\n   * @param camera Camera which is to be cloned for XR use.\n   * @returns The camera group used in XR mode.\n   */\n  public getCameraGroup(camera?: Camera): Group {\n    // Set up the camera position in the XR - Adding a group with camera does it\n    if (!this.cameraGroup) {\n      this.cameraGroup = new Group();\n    }\n    if (camera && this.xrActive) {\n      this.xrCamera = this.renderer.xr\n        .getCamera()\n        .copy(new ArrayCamera([camera.clone() as PerspectiveCamera]));\n      this.xrCamera.name = 'XR_CAMERA';\n\n      const cameraPosition =\n        this.sessionType === XRSessionType.VR\n          ? this.xrCamera.position\n          : new Vector3(0, 0, 0.1);\n      this.cameraGroup.position.copy(cameraPosition);\n      this.cameraGroup.add(this.xrCamera);\n    }\n\n    return this.cameraGroup;\n  }\n\n  /**\n   * Get the camera used by XR.\n   * @returns The camera used by XR.\n   */\n  public getXRCamera() {\n    return this.xrCamera;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n2.16.0 (2024-03-21)\nNote: Version bump only for package phoenix-event-display\n2.15.0 (2024-03-21)\nNote: Version bump only for package phoenix-event-display\n2.14.1 (2023-05-14)\nBug Fixes\n\nconfigure git when trying to release (fc4ae96)\n\n2.14.0 (2023-03-22)\nNote: Version bump only for package phoenix-event-display\n2.13.0 (2023-03-02)\nReverts\n\nRevert \"Updated versions to try to reduce yarn warnings\" (477845f)\n\n2.12.0 (2023-01-13)\nBug Fixes\n\nevent-display: allowing geometry name to be undefined (9ffb5e2)\nevent-display: make side and length optional in calo cell params (448eb4f)\n\nFeatures\n\nevent-display: adding side and length variables for the calo cell/cluster (29beae7)\n\n2.11.4 (2022-10-27)\nBug Fixes\n\nevent-display: An argument for 'camera' was not provided (dcb4c88)\nlinting (f97e615)\n\n2.11.2 (2022-10-03)\nReverts\n\nRevert \"Simple angular 14 fix\" (f40beac)\nRevert \"Improve scripts after removing phoenix-event-display from phoenix-ng 'paths'\" (24ecd77)\n\n2.11.1 (2022-09-29)\nNote: Version bump only for package phoenix-event-display\n2.11.0 (2022-09-13)\nFeatures\n\napp: add e2e tests for phoenix app (69544e6)\nevent-display: add root geometry loading to loading manager (6c92e33)\nevent-display: load root geometry in io options correctly (ff77aaa)\nevent-display: remove loadJSRootScripts function from script loader (e152933)\nevent-display: update jsroot usage in JSRootEventLoader (4791f53)\nevent-display: use full path for object names to make them unique (3d1f91c)\nevent-display: use jsroot 7 to load root json geometry (5518a3e)\nevent-display: use url inside of objects for loading jsroot geometries (a54d302)\n\n2.10.0 (2022-07-21)\nBug Fixes\n\nevent-display: fixed handling of event properties (6ace2f6)\n\n2.9.0 (2022-06-17)\nBug Fixes\n\nevent-display: fix clipping angle not being applied from menu config (62bf178)\nevent-display: fix geometry not being loaded correctly in menu (7e0870b)\nevent-display: fix opacity not being set for LHCb geometry (65e657b)\n\nFeatures\n\napp: add component to periodically cycle through events (05ae1d6)\nupdate all packages (9276ef9)\napp: make sure all volumes are transparent in LHCb (7e36462)\n\n2.8.0 (2022-05-16)\nNote: Version bump only for package phoenix-event-display\n2.7.0 (2022-04-05)\nFeatures\n\napp: add object clipping for upper and lower geometry (1788560)\napp: add start clipping angle and opening angle for object clipping (9bc48e0)\napp: add start clipping angle and opening angle for object clipping (12b1754)\napp: add start clipping angle and opening angle for object clipping (4c5fac9)\napp: add start clipping angle and opening angle for object clipping (a8336ae)\napp: add start clipping angle and opening angle for object clipping (3255a65)\nevent-display: add 'start' clipping angle as well as opening angle (d2c02d5)\nevent-display: add docs to phoenix ui implementations (0c48b27)\nevent-display: add function to get event data type folder of each menu (c91aa0e)\nevent-display: add interface for Phoenix UI (aaed8f5)\nevent-display: implement phoenix-ui interface for phoenix menu (d4866ea)\nevent-display: implement PhoenixUI interface for dat.GUI menu (a4e8aaa)\nevent-display: update calls to ui-manager (473a39c)\nevent-display: update phoenix loader UI manager for PhoenixUI interface (f2376cc)\nevent-display: use generic menus in ui-manager (7a42b65)\n\n2.6.0 (2022-02-28)\nBug Fixes\n\napp: fix types in templates (545c956)\napp: use workaround for phoenix menu config types in templates (9d109e5)\n\nFeatures\n\nupdate packages (f2ed0a3)\n\n2.5.2 (2022-01-15)\nNote: Version bump only for package phoenix-event-display\n2.5.0 (2021-12-20)\nBug Fixes\n\nevent-display: fix jets disappearing on scaling to 0 (14cdc8f)\n\nFeatures\n\nupdate packages (26444f1)\nevent-display: externalize three.js dependency in webpack bundle (6a7e82f)\nevent-display: improve JiveXML loader (34a783c), closes #364\nevent-display: simplify phoenix menu node types (c60b3c1)\n\n2.4.0 (2021-10-28)\nBug Fixes\n\nevent-display: handle AR and VR permission errors (dfbc6a2)\nevent-display: update three.js imports (4e41f72)\nevent-display: use proper error handling for local storage (55cad7c)\n\nFeatures\n\nupdate all packages (c0af497)\nevent-display: remove labels on event load (75f829a)\n\n2.3.2 (2021-09-28)\nBug Fixes\n\nevent-display: remove XRSessionInit type from xr-manager (608f529)\n\n2.3.1 (2021-09-28)\nBug Fixes\n\nevent-display: add @types/three package as a dev dependency (10244f7)\n\nFeatures\n\nevent-display: function to get url options from url options manager (0ba5097)\n\n2.3.0 (2021-09-20)\nBug Fixes\n\nevent-display: do not apply Phoenix menu node toggle if undefined in config (bf98a24)\nevent-display: fix cuts not displaying for tracks in collections info (14d5f3a)\nevent-display: fix error in adding labels for electrons (98c7055)\nevent-display: fix opacity for tracks (094261c)\n\nFeatures\n\nUpgrade all packages (4698ea4)\n\n2.2.0 (2021-08-03)\nBug Fixes\n\nevent-display: fix AR not working in playground (7f35fdb)\nevent-display: fix bug in jive xml loader (39241a4)\nevent-display: fix collection color not working with load state (4603dbc)\nevent-display: fix load state throwing error (16ea0df)\nevent-display: fix tests (7e9c733)\nevent-display: increase max cut value for jets (9f4cf7c), closes #336\nevent-display: use coneR, if available, to determine jet width (d4b62c2)\nFix linting issues and update code (dc7d74a)\n\nFeatures\n\nevent-display: add option to scale vertices (08c8e00)\nevent-display: improve handling of scale option and add it for vertices (34d9b2c)\nupdate all packages including Angular (9a88331)\nupdate packages except Angular (26eff0e)\nupgrade all packages (36486b8)\napp: option to start AR with or without DOM overlay (9a6c243)\nevent-display: JiveXML, load coneR (set default if missing). (867d28a)\nevent-display: make background transparent in AR mode (46b8aee)\nevent-display: use dom overlay for AR (c897ab3)\nevent-display: use DOM overlay for AR (a5eaa34)\n\n2.1.0 (2021-06-28)\nBug Fixes\n\napp: clean packages not used in phoenix-ng (037af62)\nevent-display: bug when handling out-of-bounds theta (717304e)\nevent-display: cuts to match pT values (62ae417)\nevent-display: fix pt scale of compound objects for JiveXML (a821e42)\nevent-display: handle track pT as p (scale correctly) (7b839e3)\nevent-display: simplify handling of compound objs needing a track extrapolation (3daabc5)\nevent-display: since can scale jets, no longer limit length (bb41683)\n\nFeatures\n\nevent-display: add AR manager (3017ca9)\nevent-display: add docs to AR manager (5334996)\nevent-display: add scene to window EventDisplay object (07d8633)\nevent-display: combine repeating code for VR and AR into XR (50fc5f7)\nevent-display: create a common xr-manager (2700aaf)\nevent-display: extend ARManager from XRManager (ae76d4a)\nevent-display: extend VRManager from XRManager (15dd07c)\nevent-display: handle camera position differently for AR (5894cac)\nevent-display: refactor to make general getCompound from getMuon (dfe8e8d)\nevent-display: setup AR with event display (8e7396f)\nevent-display: use new extrapolationLimit of RKHelper and better debug output (14e4cbb)\nevent-display: use workaround to manage scale in AR (a5481e1)\nevent-display: working AR setup in event display (fdd492a)\n\n2.0.0 (2021-06-08)\nBug Fixes\n\nevent-display: add energy cut, refactor (000ab78)\nevent-display: attempt to improve robustness of tracks (689da29)\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fix collision animation (3e5d80d)\nevent-display: fix eta calculation for JiveXML (6dbd797)\nevent-display: fix phoenix menu node types (1af6ae2)\nevent-display: fix too many params for hits (8b994a7)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: persist cuts when collection is toggled (1dd0431)\nevent-display: properly display the PlanarCalorimeters (f41920b)\nevent-display: random colors for collections and fix color by vertex (303187a)\nevent-display: use line animation for line hit (df425ee)\nfix misc errors and improve styles (124a272)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\napp: improve background colors (2c97f5c)\napp: setup for preset scene animations (6e919e1)\nevent-display: add a sample animation preset (e07725a)\nevent-display: add color by vertex options (d2e0547)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add function to animate scene (a411631)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: add types for Phoenix menu configs (68f3d45)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: complete types for phoenix menu node (cc04d5a)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: improve preset animation (2371f75)\nupdate all packages (7d2eb64)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: improve color manager code (3839578)\nevent-display: only show selected color by options (3041166)\nevent-display: type changes for phoenix menu (9a79692)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\nevent-dosplay: improve processing of PlanarCaloCells in Phoenix loader (5a8fe9f)\n\n1.9.0 (2021-05-16)\nBug Fixes\n\nevent-display: add energy cut, refactor (000ab78)\nevent-display: attempt to improve robustness of tracks (689da29)\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fix eta calculation for JiveXML (6dbd797)\nevent-display: fix phoenix menu node types (1af6ae2)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: properly display the PlanarCalorimeters (f41920b)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\nevent-display: add color by vertex options (d2e0547)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: add types for Phoenix menu configs (68f3d45)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: complete types for phoenix menu node (cc04d5a)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: improve color manager code (3839578)\nevent-display: only show selected color by options (3041166)\nevent-display: type changes for phoenix menu (9a79692)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\nevent-dosplay: improve processing of PlanarCaloCells in Phoenix loader (5a8fe9f)\n\n1.8.0 (2021-05-01)\nBug Fixes\n\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\n\n1.7.0 (2021-04-21)\nBug Fixes\n\nevent-display: attempt to improve the output of the track extension by removing close hits (5bdc562)\nevent-display: fix drawing of hits (db3ca8b)\nevent-display: handle older json hit format again (edcd567)\n\n1.6.0 (2021-04-18)\nBug Fixes\n\napp: add sphericalToCartesian method (bbea6b0)\nevent-display: add back in geometrical limits for clusters (0b95e5b)\nevent-display: add eta and phi cuts for tracks (f8a0080)\nevent-display: add missing docs (c9781e5)\nevent-display: add missing documentation (236bdf4)\nevent-display: calocluster eta position was wrong. (66cbbc0)\nevent-display: cleanup JixeXML loader (6a834e8)\nevent-display: prettier fixes (7528ee0)\nevent-display: run prettier (again) (f279898)\nevent-display: use BufferGeometry for CMS objects with new three.js update (b8e88b8)\n\nFeatures\n\napp: bind clipping state with UI menu (40bbba0)\napp: complete dialog for share link and embed (50c2584)\napp: setup link share form (b10bb7a)\nevent-display: ability to remove geometry in Phoenix menu (7d90d72)\nevent-display: ability to scale CaloClusters (ff666e2)\nevent-display: add ability to scale clusters in just one direction (5a562ab), closes #257\nevent-display: add coordinate helper (57e438f)\nevent-display: add guidelines and simplify some coordinate transformations (56f94f0)\nevent-display: Add missing energy (6ef17d0)\nevent-display: add opacity and wireframe for CaloClusters (85d4a14)\nevent-display: add support for HitLines (455f536)\nevent-display: add types for dat.GUI (7632a18)\nevent-display: create an active observable variable (854e543)\nevent-display: improve grid lines (ca3cc2f)\nevent-display: improve handling of UI menus in UI manager (b7a324a)\nevent-display: introduce new URL options and improve handling them (f7cd6b4)\nevent-display: JiveXML : add support for more hit types (bbcdf0c)\nevent-display: keep state of event data folder on event switch (b52282f)\nevent-display: make Phoenix available in browser without a namespace (5389282)\nevent-display: move opacity and wireframing to collection level (6486982)\nevent-display: options for CaloClusters (68cd7ad)\nevent-display: Remove LineHits and use hits to extend tracks (30b5160)\nevent-display: restructure phoenix-event-display (2e16371)\nevent-display: separate dat.GUI UI menu (29093a2)\nevent-display: separate Phoenix menu UI from UI manager (5743adc)\nevent-display: split dat.GUI menu options (45a0123)\nevent-display: start splitting UI manager (56ff275)\nevent-display: use run and event number and file name for config json (03a1de4)\nupgrade all packages except three.js (8e2eff4)\nupgrade three.js except for CMSObjects (0b2dd8a)\n\n1.5.0 (2021-03-24)\nBug Fixes\n\nevent-display: catch VR request session error (d2874b8)\nevent-display: fix jsroot loading root file (8cbcaa5)\nevent-display: handle tracks with no positions (3b1991c)\nevent-display: improve renderer init (a8f8353)\nevent-display: remove optimize controls function (266af04)\nevent-display: remove redundant import (359d353)\nevent-display: use per physics object color and not collection color (ac0c4f1)\nremove JSROOT source files from repo (7bcd7ba)\n\nFeatures\n\napp: ability to import ig archive in CMS (9540af5)\napp: Add more realistic geometry for ATLAS (d207bad)\nevent-display: allow resize and improve tests and drop improving CPU usage (a474af2)\nevent-display: resize canvas with window resize (5ea04f1)\nevent-display: update to use CDN for JSROOT (2fa310f)\nevent-display: use latest version of JSROOT (fbd584e)\n\n1.4.0 (2021-02-16)\nBug Fixes\n\nevent-display: disable keyboard controls when typing (4f80bd6)\nevent-display: improve object selection from uuid and label input (3475836)\nevent-display: persist toggle state of phoenix menu node children (e96136b)\nevent-display: remove rollup config and fix globalThis usage (e6f69a0)\n\nFeatures\n\nevent-display: ability to add 3D label text (c9d4880)\nevent-display: add labels configuration to dat.GUI menu (d677089)\nevent-display: add labels to UI configuration (d90e3a6)\nevent-display: add size and color options for labels (3ce675f)\nevent-display: better handling of labels object (e10a68d)\nevent-display: complete setup with webpack for browser (3f6367f)\nevent-display: complete support to save and load labels (2219a3e)\nevent-display: create a url options manager for url options (fe0b2e6)\nevent-display: create generic function for getting object position (8d7b160)\nevent-display: delete label on empty value and change add label icon (3756330)\nevent-display: make label always look at camera (0837334)\nevent-display: set up add label to object functions (db261a6)\nevent-display: setup webpack for browser bundle (dc05ed9)\nevent-display: support to hide widgets through URL (cb2ec40)\nevent-display: use optional chaining for hide widgets url option (c991e54)\nevent-display: Use types for phoenix menu configuration (79e6d7c)\nevent-display: working labels object (60269f7)\nUpdate Angular and all packages to latest (f4c2e31)\n\n1.3.0 (2021-01-16)\nBug Fixes\n\nevent-display: assign the right name to geometry (b7e8da0)\nevent-display: code improvements (f94c0e4)\nevent-display: fix parsing of GLTF geometry (dc5d489)\nevent-display: improve code for hiding tube tracks (e9f1bc9)\nevent-display: minor script fix (5139c6e)\nevent-display: remove color from obj file userdata (8ba94e7)\nevent-display: revert jasmine spec files (dc140dd)\nevent-display: try fixing CMSLoader tests (789da8b)\n\nFeatures\n\nevent-display: display size on selection (6943f79)\nevent-display: hide tube tracks on zoom (7d606b2)\n\n1.2.0 (2020-12-06)\nBug Fixes\n\nevent-display: add Edward's controller set up (a6a1c19)\nevent-display: changes to animation loop for VR (37df19f)\nevent-display: finally fix VR completely (4764196)\nevent-display: fix applying multiple cuts at the same time (8f3e8e1)\nevent-display: fix applying state for range slider (c36a222)\nevent-display: fix loading and add default view to experiments (ab8feb4)\nevent-display: initialize cuts with correct values (e297c98)\nevent-display: make it possible to flat shade (dcf6cec)\nevent-display: optimal animation loop set up (da3ead5)\nevent-display: optimal render for effects manager (1975d70)\nevent-display: reset clipping on init (029d526)\nevent-display: stop animation loop on home (c39ecd3)\nevent-display: update configuration in tests (18f8db2)\n\nFeatures\n\napp: add toggle for screenshot mode (22a1ec8)\napp: make loader generic (ff10477)\napp: set up performance mode with selection (947f6bf)\napp: use event display loader in Angular component (25b2a9d)\nevent-display: ability to add geometry to a menu folder (30b0383)\nevent-display: ability to initialize event display without init (69d3f75)\nevent-display: add ability to add parametrised geometry (04dc545)\nevent-display: add and set up loading manager (5f0f942)\nevent-display: handle loading better (9474565)\nevent-display: make loading functions return Promise for async await (4262a1b)\nevent-display: performance mode and antialias support (d3920c4)\nevent-display: support for toggling antialiasing (48130b2)\nevent-display: use object to simplify configuration (4b10452)\n\n1.1.0 (2020-11-07)\nBug Fixes\n\napp: cut filter failed if value return was zero (0a26fea)\napp: cut should be pT, not mom (73b7c27)\napp: fix attribute pipe (0980379)\napp: fix tests (f87c587)\napp: pT should always be positive (3918159)\nevent-display: add optional chaining to CMS event info (fixes tests) (5283e9a)\nevent-display: fix geometry too big in overlay view (c7a35db)\nevent-display: fix URL event not working with hash routes (9eb21f5)\nevent-display: Formatted correctly (b46c49f)\nevent-display: use optional chaining in CMS loader (cfb1b6a)\nVR: Fix bugged scene in VR mode (9efd9ca)\n\nFeatures\n\napp: Option to load config from URL in ATLAS (1906976)\napp: phoenix-ui-components library (17909eb)\napp: yet another MAJOR refactoring (1261358)\nevent-display: add defaultView to configuration (612205c)\nevent-display: implicitly load event data from URL (9e3dc20)\nevent-display: state manager for managing event display state for save and load (7d1ca22)\n\n1.0.2 (2020-10-05)\n\nComplete deployment set up (399ac77)\n\n1.0.1 (2020-10-05)\nNote: Version bump only for package phoenix-event-display\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/event-display.ts\n            \n            class\n            EventDisplay\n            \n                100 %\n                (59/59)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/active-variable.ts\n            \n            class\n            ActiveVariable\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/helpers/browser-storage.ts\n            \n            variable\n            getFromLocalStorage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/browser-storage.ts\n            \n            variable\n            setToLocalStorage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/constants.ts\n            \n            variable\n            EVENT_DATA_TYPE_COLORS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/coordinate-helper.ts\n            \n            class\n            CoordinateHelper\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            loadFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            saveFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/info-logger.ts\n            \n            class\n            InfoLogger\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/helpers/labels.ts\n            \n            variable\n            getLabelTitle\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/pretty-symbols.ts\n            \n            class\n            PrettySymbols\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/rk-helper.ts\n            \n            class\n            RKHelper\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            Field\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            RungeKutta\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            State\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/helpers/zip.ts\n            \n            variable\n            readZipFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/lib/models/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/lib/types/configuration.ts\n            \n            interface\n            Configuration\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                100 %\n                (35/35)\n            \n        \n        \n            \n                \n                src/loaders/edm4hep-json-loader.ts\n            \n            class\n            Edm4hepJsonLoader\n            \n                100 %\n                (43/43)\n            \n        \n        \n            \n                \n                src/loaders/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (45/45)\n            \n        \n        \n            \n                \n                src/loaders/jsroot-event-loader.ts\n            \n            class\n            JSRootEventLoader\n            \n                100 %\n                (30/30)\n            \n        \n        \n            \n                \n                src/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/loaders/objects/tracks.ts\n            \n            class\n            TracksMaterial\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/loaders/objects/tracks.ts\n            \n            class\n            TracksMesh\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            class\n            ScriptLoader\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (30/30)\n            \n        \n        \n            \n                \n                src/managers/loading-manager.ts\n            \n            class\n            LoadingManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/state-manager.ts\n            \n            class\n            StateManager\n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                src/managers/three-manager/animations-manager.ts\n            \n            class\n            AnimationsManager\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/managers/three-manager/animations-manager.ts\n            \n            interface\n            AnimationPreset\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/managers/three-manager/color-manager.ts\n            \n            class\n            ColorManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/managers/three-manager/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/managers/three-manager/effects-manager.ts\n            \n            class\n            EffectsManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/managers/three-manager/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/managers/three-manager/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/managers/three-manager/index.ts\n            \n            class\n            ThreeManager\n            \n                100 %\n                (96/96)\n            \n        \n        \n            \n                \n                src/managers/three-manager/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/three-manager/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (54/54)\n            \n        \n        \n            \n                \n                src/managers/three-manager/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (25/25)\n            \n        \n        \n            \n                \n                src/managers/three-manager/xr/ar-manager.ts\n            \n            class\n            ARManager\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/managers/three-manager/xr/vr-manager.ts\n            \n            class\n            VRManager\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/managers/three-manager/xr/xr-manager.ts\n            \n            class\n            XRManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/color-options.ts\n            \n            class\n            ColorOptions\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/dat-gui-ui.ts\n            \n            class\n            DatGUIMenuUI\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/index.ts\n            \n            class\n            UIManager\n            \n                100 %\n                (48/48)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/index.ts\n            \n            variable\n            defaultAnimationPresets\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n            \n            class\n            PhoenixMenuNode\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts\n            \n            class\n            PhoenixMenuUI\n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-ui.ts\n            \n            interface\n            PhoenixUI\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            class\n            URLOptionsManager\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            variable\n            phoenixURLOptions\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @babel/core : ^7.24.3\n        \n            @tweenjs/tween.js : ^23.1.1\n        \n            dat.gui : ^0.7.9\n        \n            html2canvas : ^1.4.1\n        \n            jsroot : ^7.6.0\n        \n            jszip : ^3.10.1\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.162.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            jspdf : *\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClippingSetting   (src/.../preset-view.model.ts)\n                        \n                        \n                            ColorByOptionKeys   (src/.../color-options.ts)\n                        \n                        \n                            XRSessionType   (src/.../xr-manager.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/preset-view.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ClippingSetting\n                    \n                \n                    \n                        \n                            Preset view settings for clipping\n\n                        \n                    \n                        \n                            \n                                 NotForced\n                            \n                        \n                        \n                            \n                                 On\n                            \n                        \n                        \n                            \n                                 Off\n                            \n                        \n            \n        \n\n    src/managers/ui-manager/color-options.ts\n    \n        \n            \n                \n                    \n                        \n                        ColorByOptionKeys\n                    \n                \n                    \n                        \n                            Keys for options available for coloring event data by.\n\n                        \n                    \n                        \n                            \n                                 CHARGE\n                            \n                        \n                        \n                            \n                                Value : charge\n                            \n                        \n                        \n                            \n                                 MOM\n                            \n                        \n                        \n                            \n                                Value : mom\n                            \n                        \n                        \n                            \n                                 VERTEX\n                            \n                        \n                        \n                            \n                                Value : vertex\n                            \n                        \n            \n        \n\n    src/managers/three-manager/xr/xr-manager.ts\n    \n        \n            \n                \n                    \n                        \n                        XRSessionType\n                    \n                \n                    \n                        \n                            Type of the XR session.\n\n                        \n                    \n                        \n                            \n                                 VR\n                            \n                        \n                        \n                            \n                                Value : VR\n                            \n                        \n                        \n                            \n                                 AR\n                            \n                        \n                        \n                            \n                                Value : AR\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPhoenix event display\n\n\n\nA highly modular and API driven experiment independent event display that uses three.js for processing and presenting detector geometry and event data.\nTo use in your application, install the package.\nExample :npm install phoenix-event-display\n# or\nyarn add phoenix-event-displayUsage\nAs a module\nTo create a simple event display.\nExample :// Import required classes\nimport { EventDisplay, PhoenixLoader } from 'phoenix-event-display';\n\n// Create the event display\nconst eventDisplay = new EventDisplay();\n\n// Define the configuration\nconst configuration = {\n  elementId: '',\n  eventDataLoader: new PhoenixLoader(), // or some other event data loader\n  // ... other configuration options\n};\n\n// Initialize the event display with the configuration\neventDisplay.init(configuration);\n\n// Load and parse event data in Phoenix format and display it\nfetch('path/to/event-data.json')\n  .then((res) => res.json())\n  .then((res) => {\n    eventDisplay.parsePhoenixEvents(res);\n  });\n\n// Load detector geometry\neventDisplay.loadOBJGeometry(\n  'path/to/geometry.obj',\n  'Detector OBJ',\n  0x8c8c8c /* color */,\n);As a standalone bundle\nPhoenix can be bundled and used directly in the HTML as a script along with three.js. You can either use the CDN or build from source.\nTo build Phoenix as a bundle.\nExample :yarn build:bundleThis will generate a file phoenix.min.js in the ./dist/bundle directory which can be included in your HTML code.\nWithout building, you can include the bundle directly from CDN.\nExample :\n  \n    ...\n  \n\n  \n    \n\n    \n    \n\n    \n      // Create the event display\n      const eventDisplay = new EventDisplay();\n\n      // Define the configuration\n      const configuration = {\n        elementId: 'eventDisplay',\n        eventDataLoader: new PhoenixLoader(), // or some other event data loader\n        // ... other configuration options\n      };\n\n      // Initialize the event display with the configuration\n      eventDisplay.init(configuration);\n\n      // ... other event display functions\n    \n  \nExamples\n\nUsage in Angular (as a service)\nUsage in React\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    43 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 2.16.0\n        \n            Description : API for web-based experiment independent event display.\n        \n            Homepage : http://github.com/HSF/phoenix/tree/main/packages/phoenix-event-display#readme\n        \n            License : Apache-2.0\n        \n            Repository : git://github.com/HSF/phoenix.git\n        \n            Author : Phoenix contributors (https://github.com/HSF/phoenix/graphs/contributors)\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CallbackFunction   (src/.../active-variable.ts)\n                        \n                        \n                            ColorByOption   (src/.../color-options.ts)\n                        \n                        \n                            ConfigButton   (src/.../config-types.ts)\n                        \n                        \n                            ConfigCheckbox   (src/.../config-types.ts)\n                        \n                        \n                            ConfigColor   (src/.../config-types.ts)\n                        \n                        \n                            ConfigLabel   (src/.../config-types.ts)\n                        \n                        \n                            ConfigRangeSlider   (src/.../config-types.ts)\n                        \n                        \n                            ConfigSelect   (src/.../config-types.ts)\n                        \n                        \n                            ConfigSlider   (src/.../config-types.ts)\n                        \n                        \n                            GeometryUIParameters   (src/.../geometry-ui-parameters.ts)\n                        \n                        \n                            PhoenixMenuConfigs   (src/.../config-types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/active-variable.ts\n    \n    \n        \n            \n                \n                    \n                    CallbackFunction\n                \n            \n            \n                \n                    Callback function type.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/managers/ui-manager/color-options.ts\n    \n    \n        \n            \n                \n                    \n                    ColorByOption\n                \n            \n            \n                \n                    Type for a single color by option.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/managers/ui-manager/phoenix-menu/config-types.ts\n    \n    \n        \n            \n                \n                    \n                    ConfigButton\n                \n            \n            \n                \n                    Type for Phoenix menu node \"button\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigCheckbox\n                \n            \n            \n                \n                    Type for Phoenix menu node \"checkbox\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigColor\n                \n            \n            \n                \n                    Type for Phoenix menu node \"color\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigLabel\n                \n            \n            \n                \n                    Type for Phoenix menu node \"label\" config.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigRangeSlider\n                \n            \n            \n                \n                    Type for Phoenix menu node \"rangeSlider\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigSelect\n                \n            \n            \n                \n                    Type for Phoenix menu node \"select\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigSlider\n                \n            \n            \n                \n                    Type for Phoenix menu node \"slider\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PhoenixMenuConfigs\n                \n            \n            \n                \n                    Type for all Phoenix menu mode configuration options.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/lib/types/geometry-ui-parameters.ts\n    \n    \n        \n            \n                \n                    \n                    GeometryUIParameters\n                \n            \n            \n                \n                    Parameters used when adding geometry to UI menus.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            defaultAnimationPresets   (src/.../index.ts)\n                        \n                        \n                            EVENT_DATA_TYPE_COLORS   (src/.../constants.ts)\n                        \n                        \n                            getFromLocalStorage   (src/.../browser-storage.ts)\n                        \n                        \n                            getLabelTitle   (src/.../labels.ts)\n                        \n                        \n                            loadFile   (src/.../file.ts)\n                        \n                        \n                            phoenixURLOptions   (src/.../url-options-manager.ts)\n                        \n                        \n                            readZipFile   (src/.../zip.ts)\n                        \n                        \n                            saveFile   (src/.../file.ts)\n                        \n                        \n                            setToLocalStorage   (src/.../browser-storage.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/managers/ui-manager/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultAnimationPresets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AnimationPreset[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    name: 'Cavern to ID',\n    positions: [\n      {\n        position: [66388.95051168812, 5264.228603228927, -46910.7848593543],\n        duration: 1000,\n      },\n      {\n        position: [12834.18729094943, 677.7571205763458, 135.68755273443463],\n        duration: 2000,\n      },\n      {\n        position: [312.02688693297375, 25.884223757326, 270.10019006776236],\n        duration: 3500,\n      },\n      {\n        position: [263.3640855132258, 19.874838262525053, -318.16541790248885],\n        duration: 3000,\n      },\n      {\n        position: [5534.140362338047, 234.03507981484574, -2933.619479808285],\n        duration: 2000,\n      },\n      {\n        position: [2681.277288705242, 646.5795158318147, 5628.5248735111745],\n        duration: 1000,\n      },\n      {\n        position: [-6062.586283740076, 790.5876682946184, 1381.1675900848818],\n        duration: 1000,\n      },\n      {\n        position: [-1766.7693725879053, 1007.1048030984678, -5928.901341784575],\n        duration: 1000,\n      },\n      {\n        position: [12814.982506255355, 2516.987185037266, -22891.902734328327],\n        duration: 1000,\n      },\n    ],\n    animateEventAfterInterval: 5000,\n    collisionDuration: 6000,\n  },\n]\n                    \n                \n\n            \n                \n                    If animation presets not passed in configuration, we will use this.\n\n                \n            \n\n        \n    \n\n    src/helpers/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EVENT_DATA_TYPE_COLORS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Hits: new Color(0xff0000),\n  Tracks: new Color(0xff0000),\n  Jets: new Color(0x2194ce),\n  CaloClusters: new Color(0xffd166),\n  MuonChambers: new Color(0xff0000),\n  Vertices: new Color(0xffd166),\n  MissingEnergy: new Color(0xffffff),\n  PlanarCaloCells: new Color(0xfff69a),\n}\n                    \n                \n\n            \n                \n                    Colors of different event data types.\n\n                \n            \n\n        \n    \n\n    src/helpers/browser-storage.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getFromLocalStorage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (item: string) => {\n  try {\n    return localStorage.getItem(item);\n  } catch (exception) {\n    console.warn('Exception in localStorage', exception);\n  }\n}\n                    \n                \n\n            \n                \n                    Get an item from local storage.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setToLocalStorage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (item: string, value: string) => {\n  try {\n    localStorage.setItem(item, value);\n  } catch (exception) {\n    console.warn('Exception in localStorage', exception);\n  }\n}\n                    \n                \n\n            \n                \n                    Set item to local storage.\n\n                \n            \n\n        \n    \n\n    src/helpers/labels.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLabelTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  eventDataType: string,\n  collection: string,\n  index: string | number,\n) => `${eventDataType} > ${collection} > ${index}`\n                    \n                \n\n            \n                \n                    Get title of the label.\n\n                \n            \n\n        \n    \n\n    src/helpers/file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  onFileRead: (data: string) => void,\n  contentType: string = 'application/json',\n) => {\n  // Create a mock input file element and use that to read the file\n  let inputFile = document.createElement('input');\n  inputFile.type = 'file';\n  inputFile.accept = contentType;\n  inputFile.onchange = (e: any) => {\n    const configFile = e.target?.files[0];\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      onFileRead?.(e.target.result.toString());\n\n      inputFile.remove();\n      inputFile = null;\n    };\n    reader.readAsText(configFile);\n  };\n  inputFile.click();\n  setTimeout(() => {\n    console.log('Let us just wait a second');\n  }, 1000);\n}\n                    \n                \n\n            \n                \n                    Load a file from user by mocking an input element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  data: string,\n  fileName: string,\n  contentType: string = 'application/json',\n) => {\n  const blob = new Blob([data], { type: contentType });\n  const tempAnchor = document.createElement('a');\n  tempAnchor.style.display = 'none';\n  tempAnchor.href = URL.createObjectURL(blob);\n  tempAnchor.download = fileName;\n  tempAnchor.click();\n  tempAnchor.remove();\n}\n                    \n                \n\n            \n                \n                    Save and download file with the given data.\n\n                \n            \n\n        \n    \n\n    src/managers/url-options-manager.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        phoenixURLOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n  embed: false,\n}\n                    \n                \n\n            \n                \n                    Model for Phoenix URL options.\n\n                \n            \n\n        \n    \n\n    src/helpers/zip.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        readZipFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (file: File | ArrayBuffer) => {\n  const archive = new JSZip();\n  const filesWithData: { [fileName: string]: string } = {};\n\n  await archive.loadAsync(file);\n  for (const filePath in archive.files) {\n    const fileData = await archive.file(filePath).async('string');\n    filesWithData[filePath] = fileData;\n  }\n\n  return filesWithData;\n}\n                    \n                \n\n            \n                \n                    Read a zip file and return its contents as an object.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
