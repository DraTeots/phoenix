var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ARManager.html",[0,0.255,1,2.374]],["body/classes/ARManager.html",[0,0.251,1,3.202,2,0.363,3,0.241,4,0.213,5,0.159,6,2.514,7,5.326,8,1.084,9,0.437,10,4.343,11,1.449,12,1.781,13,2.024,14,3.202,15,3.968,16,0.159,17,0.587,18,2.36,19,5.391,20,1.677,21,5.391,22,4.048,23,4.582,24,1.4,25,3.552,26,5.238,27,3.552,28,3.924,29,2.974,30,3.552,31,3.552,32,3.552,33,0.541,34,4.352,35,2.84,36,3.552,37,4.73,38,4.048,39,3.552,40,4.048,41,3.552,42,0.751,43,3.458,44,2.222,45,2.688,46,4.926,47,0.737,48,2.597,49,0.964,50,0.581,51,0.024,52,0.474,53,0.268,54,0.544,55,2.183,56,1.099,57,0.815,58,0.694,59,0.964,60,2.939,61,2.465,62,2.923,63,4.048,64,3.332,65,4.73,66,1.314,67,4.73,68,3.552,69,1.02,70,4.73,71,1.236,72,4.73,73,2.318,74,2.597,75,2.923,76,2.691,77,3.716,78,4.73,79,1.482,80,0.79,81,4.02,82,2.939,83,4.011,84,2.642,85,2.866,86,5.836,87,2.939,88,1.314,89,4.011,90,1.48,91,2.939,92,2.318,93,2.163,94,1.181,95,2.939,96,3.144,97,2.642,98,3.582,99,3.332,100,2.939,101,1.246,102,2.939,103,0.567,104,2.341,105,2.341,106,2.597,107,0.904,108,2.939,109,2.939,110,2.052,111,3.458,112,0.907,113,3.552,114,3.458,115,2.923,116,4.73,117,0.945,118,3.458,119,2.939,120,2.137,121,1.302,122,2.597,123,2.939,124,2.597,125,1.822,126,2.03,127,2.597,128,1.967,129,2.939,130,2.597,131,3.552,132,3.458,133,2.597,134,2.137,135,0.617,136,0.618,137,1.967,138,2.137,139,2.341,140,2.137,141,2.939,142,2.597,143,2.597,144,1.224,145,2.597,146,2.597,147,2.597,148,1.695,149,1.695,150,2.137,151,3.458,152,0.27,153,0.503,154,4.582,155,2.597,156,3.458,157,4.73,158,3.458,159,5.391,160,3.458,161,2.597,162,0.395,163,3.458,164,2.939,165,3.458,166,1.822,167,2.597,168,3.458,169,1.482,170,2.341,171,3.458,172,5.391,173,3.458,174,2.597,175,3.458,176,1.967,177,3.458,178,3.458,179,3.458,180,2.939,181,2.597,182,3.458,183,2.939,184,3.458,185,3.458,186,0.016,187,0.016]],["title/classes/ActiveVariable.html",[0,0.255,188,1.995]],["body/classes/ActiveVariable.html",[0,0.34,2,0.492,3,0.327,4,0.289,5,0.215,9,0.454,16,0.215,17,0.716,20,1.632,24,1.419,33,0.659,42,1.019,47,0.701,49,1.175,50,0.597,51,0.024,52,0.488,53,0.261,54,0.58,57,0.63,58,0.83,93,2.979,94,1.175,96,3.192,97,3.336,103,0.5,112,0.904,126,1.767,150,4.207,152,0.45,153,0.542,186,0.019,187,0.019,188,3.28,189,5.112,190,3.522,191,3.72,192,4.901,193,5.767,194,3.564,195,5.767,196,5.021,197,5.767,198,4.207,199,4.691,200,5.23,201,4.691,202,4.33,203,6.244,204,5.785,205,4.691,206,4.691,207,5.767,208,4.691,209,4.901,210,5.767,211,4.691,212,6.514,213,0.835,214,4.691,215,4.691,216,4.691,217,4.691,218,4.691]],["title/interfaces/AnimationPreset.html",[219,1.321,220,1.995]],["body/interfaces/AnimationPreset.html",[0,0.17,3,0.164,4,0.145,5,0.108,6,0.942,8,0.736,9,0.164,11,1.203,12,1.346,13,1.005,16,0.108,17,0.444,20,1.264,24,1.198,29,2.121,42,0.776,44,1.787,45,2.213,49,0.478,51,0.024,52,0.428,53,0.225,54,0.42,55,1.346,58,0.268,59,0.882,69,1.277,71,1.264,73,1.15,77,2.033,79,2.078,80,0.723,84,1.15,85,1.634,88,0.652,90,1.005,92,1.15,93,1.074,94,1.061,96,2.551,97,2.879,98,2.674,101,0.543,103,0.31,107,1.264,112,0.927,117,1.071,120,1.451,121,0.884,134,2.674,135,0.595,136,0.42,137,1.336,148,1.15,149,1.751,152,0.279,153,0.604,162,0.268,169,1.718,170,1.589,174,3.25,186,0.012,187,0.012,194,1.451,209,1.995,213,0.977,219,0.884,220,2.462,221,1.336,222,1.589,223,4.31,224,2.033,225,4.845,226,4.66,227,3.288,228,2.42,229,3.424,230,0.953,231,4.61,232,5.01,233,1.346,234,6.14,235,2.462,236,5.898,237,3.574,238,1.883,239,1.995,240,4.328,241,1.751,242,2.227,243,3.037,244,2.033,245,2.348,246,5.876,247,1.883,248,2.42,249,3.574,250,3.275,251,2.209,252,2.348,253,1.265,254,2.121,255,2.348,256,1.995,257,2.121,258,1.419,259,3.037,260,1.451,261,0.831,262,2.348,263,2.348,264,3.574,265,2.348,266,1.995,267,2.033,268,2.348,269,2.033,270,1.451,271,2.348,272,0.963,273,2.348,274,3.25,275,2.348,276,3.25,277,2.348,278,3.909,279,2.348,280,2.348,281,4.281,282,1.15,283,2.209,284,3.037,285,5.847,286,3.678,287,1.995,288,2.033,289,2.348,290,2.348,291,2.42,292,1.336,293,1.763,294,2.348,295,1.779,296,2.348,297,2.348,298,2.348,299,3.678,300,2.348,301,3.574,302,1.995,303,2.209,304,2.209,305,1.995,306,1.15,307,2.348,308,2.348,309,2.348,310,2.348,311,2.348,312,2.348,313,2.348,314,4.424,315,4.424,316,5.732,317,3.909,318,4.424,319,5.876,320,2.752,321,2.348,322,3.574,323,2.348,324,2.348,325,1.336,326,4.328,327,2.348,328,3.574,329,2.348,330,4.328,331,4.838,332,2.348,333,1.763,334,2.348,335,5.484,336,2.348,337,1.434,338,2.42,339,3.574,340,4.838,341,3.217,342,2.348,343,1.15,344,1.852,345,3.574,346,4.838,347,1.336,348,4.838,349,2.348,350,1.995,351,1.995,352,3.574,353,4.838,354,1.589,355,3.574,356,3.574,357,2.348,358,3.574,359,3.574,360,3.574,361,3.574,362,2.348,363,2.348,364,1.995,365,1.15,366,1.995,367,2.348,368,3.574,369,2.348,370,2.348,371,2.348,372,1.763,373,2.348,374,2.348,375,2.348,376,2.348,377,1.995,378,1.995,379,1.995,380,3.574,381,2.348,382,2.348,383,2.348,384,3.574,385,2.348,386,1.451,387,2.348,388,2.348,389,2.752,390,3.037,391,2.348,392,2.348,393,2.348,394,2.348,395,2.348,396,2.348,397,1.589,398,2.42,399,2.348,400,2.348,401,2.348,402,2.348,403,2.348,404,3.574,405,1.763,406,2.348,407,2.348,408,2.348,409,2.348,410,2.348,411,2.348,412,3.574,413,2.348,414,2.348,415,2.348,416,2.348,417,2.348,418,2.348,419,2.348,420,2.348,421,2.348,422,2.348,423,2.348,424,2.348,425,2.348,426,2.348,427,2.348,428,2.348,429,2.348,430,2.348,431,3.574,432,4.328,433,2.348,434,2.348,435,2.348,436,1.995,437,2.348,438,1.589,439,2.348,440,3.171,441,4.994,442,4.328,443,3.574,444,3.037,445,3.574,446,2.348,447,2.348,448,4.838,449,1.995,450,2.348,451,2.42,452,4.328,453,1.589,454,2.348,455,1.237,456,3.574,457,3.574,458,2.348,459,2.348,460,2.348,461,2.348,462,2.348,463,2.348,464,2.348,465,1.995,466,1.451,467,3.574,468,2.348,469,1.005,470,1.589,471,2.348,472,1.995,473,5.876,474,4.118,475,3.574,476,1.15,477,4.328,478,2.348,479,4.328,480,2.348,481,3.037,482,1.995,483,2.348,484,2.348,485,3.574,486,3.574,487,2.209,488,3.574,489,2.348,490,3.574,491,2.348,492,2.348,493,2.348,494,2.348,495,2.348,496,2.348,497,2.348,498,2.348,499,2.348,500,2.348,501,2.348,502,2.348,503,3.678,504,3.574,505,2.348,506,2.348,507,2.348,508,4.838,509,2.348,510,2.348,511,2.348,512,1.763,513,1.451,514,3.574,515,2.348,516,1.995,517,2.348,518,1.995,519,2.348,520,1.995,521,2.348,522,3.574,523,2.548,524,2.209,525,3.574,526,2.348,527,1.451,528,2.348,529,2.348,530,2.348,531,3.574,532,2.348,533,2.348,534,2.348,535,3.037,536,2.348,537,3.574,538,2.348,539,2.348,540,2.348,541,2.348,542,2.348]],["title/classes/CMSObjects.html",[0,0.255,543,2.374]],["body/classes/CMSObjects.html",[0,0.332,2,0.479,3,0.319,4,0.281,5,0.21,9,0.396,16,0.21,18,2.324,24,0.931,33,0.649,47,0.479,50,0.635,51,0.024,52,0.357,53,0.175,54,0.397,59,1.156,68,3.432,69,1.674,80,0.763,85,2.595,103,0.492,117,0.711,135,0.649,136,0.817,144,2.009,152,0.357,153,0.397,162,0.523,169,1.778,170,3.842,186,0.019,187,0.019,213,1.012,230,0.822,241,2.78,243,4.822,244,3.228,247,3.251,248,3.842,257,2.78,272,0.908,291,3.094,304,2.824,344,2.428,397,3.842,487,3.507,543,3.842,544,4.822,545,3.884,546,3.507,547,2.428,548,4.822,549,4.261,550,4.822,551,5.674,552,5.674,553,4.57,554,3.507,555,6.764,556,6.764,557,6.172,558,4.57,559,5.674,560,5.674,561,5.674,562,3.432,563,4.57,564,3.884,565,5.674,566,4.57,567,4.57,568,4.57,569,4.57,570,4.57,571,4.57,572,5.674,573,6.172,574,6.172,575,5.674,576,6.172,577,6.172,578,3.432,579,5.674,580,6.172,581,6.172,582,5.674,583,6.172,584,6.172,585,5.674,586,3.884,587,5.674,588,3.884,589,3.432,590,5.674,591,4.57,592,4.57,593,4.57,594,4.57,595,4.57,596,4.57,597,3.432,598,2.824,599,4.57,600,2.824,601,4.57,602,6.172,603,3.884,604,4.57,605,4.57,606,5.674,607,4.57,608,4.57,609,3.884,610,4.57,611,4.57,612,4.57,613,4.57,614,4.57]],["title/classes/ColorManager.html",[0,0.255,615,2.374]],["body/classes/ColorManager.html",[0,0.289,2,0.418,3,0.278,4,0.245,5,0.183,6,2.619,8,1.25,9,0.455,11,1.537,12,1.96,16,0.183,24,1.39,33,0.595,42,0.866,44,2.046,47,0.668,49,1.06,50,0.609,51,0.024,52,0.548,53,0.244,54,0.552,55,2.312,56,0.813,58,0.702,69,1.811,76,2.96,80,1.165,85,2.379,94,1.18,101,1.203,103,0.533,112,0.922,117,0.621,135,0.595,136,0.713,137,3.783,152,0.312,153,0.585,155,2.995,169,2.271,186,0.017,187,0.017,230,0.889,253,1.842,257,3.341,258,1.419,261,1.842,272,0.924,337,2.087,343,2.55,453,2.7,455,3.051,609,3.389,615,3.522,616,4.035,617,4.155,618,3.215,619,5.203,620,5.791,621,5.203,622,3.988,623,3.988,624,3.907,625,5.203,626,2.995,627,4.155,628,3.234,629,2.797,630,3.503,631,5.203,632,3.907,633,5.203,634,3.988,635,3.907,636,3.988,637,5.216,638,6.138,639,4.422,640,2.995,641,5.203,642,3.215,643,5.203,644,3.907,645,5.203,646,3.215,647,5.203,648,3.988,649,5.203,650,3.522,651,3.907,652,3.988,653,3.988,654,3.988,655,3.988,656,3.988,657,3.907,658,5.203,659,3.907,660,3.907,661,3.907,662,5.203,663,5.203,664,5.203,665,3.988,666,3.988,667,3.988,668,3.988,669,3.988,670,5.203,671,5.203,672,3.988,673,3.389,674,3.988,675,3.988,676,3.988,677,3.988,678,3.988,679,3.988,680,3.988]],["title/classes/ColorOptions.html",[0,0.255,681,2.374]],["body/classes/ColorOptions.html",[0,0.187,2,0.27,3,0.18,4,0.159,5,0.118,9,0.378,11,1.058,12,1.443,16,0.118,17,0.476,20,1.886,33,0.438,42,0.832,47,0.71,49,0.781,50,0.601,51,0.024,52,0.51,53,0.254,54,0.44,55,1.443,56,0.525,57,0.79,58,0.785,59,1.104,61,1.753,66,1.271,69,1.943,71,1.643,73,1.262,76,2.884,80,0.948,85,2.093,88,1.064,92,2.484,103,0.56,107,0.673,112,0.91,117,0.713,126,0.97,135,0.58,136,0.685,152,0.299,153,0.51,162,0.58,169,2.278,186,0.013,187,0.013,230,0.894,235,2.18,257,2.484,258,1.453,261,1.794,272,0.681,295,1.715,306,1.262,337,1.537,343,2.243,347,1.465,455,3.099,513,2.368,524,1.592,615,3.982,616,4.222,617,3.098,618,3.133,629,2.278,630,2.411,635,1.934,639,3.257,650,3.432,681,2.595,682,3.11,683,1.744,684,2.217,685,4.577,686,4.577,687,3.889,688,4.577,689,4.577,690,4.577,691,5.069,692,5.069,693,5.069,694,3.833,695,3.833,696,5.069,697,5.069,698,5.069,699,5.069,700,3.833,701,2.576,702,5.069,703,2.992,704,5.069,705,4.417,706,2.576,707,2.18,708,1.002,709,3.257,710,4.827,711,2.642,712,4.308,713,3.887,714,3.833,715,3.125,716,3.833,717,4.132,718,3.833,719,4.827,720,3.944,721,5.069,722,3.833,723,3.833,724,3.257,725,3.833,726,2.576,727,3.257,728,6.285,729,2.576,730,3.635,731,2.576,732,2.576,733,3.098,734,2.595,735,2.576,736,1.724,737,2.243,738,5.418,739,3.889,740,2.484,741,3.833,742,2.576,743,3.833,744,2.576,745,3.432,746,3.668,747,2.576,748,2.576,749,2.576,750,3.833,751,2.576,752,3.432,753,3.833,754,3.437,755,4.605,756,4.605,757,4.577,758,5.418,759,4.577,760,3.833,761,2.576,762,5.418,763,2.484,764,2.576,765,2.576,766,2.576,767,2.576,768,2.878,769,3.833,770,6.044,771,2.576,772,3.833,773,3.833,774,1.465,775,1.934,776,1.744,777,1.465,778,1.592,779,1.934,780,3.668,781,5.069,782,2.576,783,2.576,784,2.576,785,4.577,786,2.278,787,2.576,788,1.753,789,4.605,790,2.576,791,2.576,792,1.934,793,2.576,794,2.189,795,2.576,796,2.576,797,2.576,798,2.576,799,2.576,800,2.576,801,2.576,802,3.833,803,5.68,804,2.576,805,2.576,806,2.576,807,3.833,808,3.833,809,2.576,810,2.576,811,2.576,812,2.576,813,3.833,814,2.576,815,4.577,816,4.577,817,3.833,818,1.744,819,1.744,820,2.189,821,1.934,822,1.744,823,2.189,824,2.189,825,2.576,826,2.576,827,2.576,828,2.576,829,2.576,830,4.577,831,3.833,832,3.833,833,2.189,834,3.833,835,3.833,836,3.833,837,2.576,838,2.576,839,2.576,840,2.576,841,2.576,842,1.262,843,2.576,844,2.189,845,2.576,846,2.576,847,2.576,848,2.576,849,3.833,850,3.257,851,2.576]],["title/interfaces/Configuration.html",[219,1.321,852,1.168]],["body/interfaces/Configuration.html",[3,0.316,4,0.279,5,0.208,9,0.316,11,1.047,16,0.208,17,0.701,45,2.423,51,0.024,53,0.271,54,0.627,56,1.376,57,0.906,59,1.15,61,2.943,62,3.488,66,1.567,80,1.106,117,0.957,135,0.736,144,1.998,152,0.354,166,2.973,186,0.019,187,0.019,219,1.706,220,3.661,221,2.578,222,3.068,224,3.661,230,1.028,233,2.126,258,1.53,624,4.238,684,1.769,703,3.39,736,2.493,737,3.012,777,2.578,852,2.143,853,3.851,854,2.389,855,6.435,856,6.435,857,5.468,858,4.356,859,6.435,860,4.276,861,4.832,862,6.435,863,6.435,864,4.238,865,3.39,866,2.126,867,4.238,868,3.211,869,5.644,870,2.264,871,3.821,872,3.211,873,3.211,874,3.239,875,3.821,876,3.211,877,4.832,878,6.435,879,4.356,880,4.531,881,4.531,882,4.531,883,3.402,884,2.387,885,3.402,886,4.531,887,4.531]],["title/classes/CoordinateHelper.html",[0,0.255,888,2.167]],["body/classes/CoordinateHelper.html",[0,0.271,2,0.392,3,0.261,4,0.23,5,0.171,9,0.447,16,0.171,18,2.661,24,1.27,33,0.684,47,0.672,50,0.644,51,0.024,52,0.487,53,0.239,54,0.541,56,0.762,71,1.466,103,0.59,117,1.13,135,0.428,136,0.668,152,0.292,153,0.577,162,0.733,186,0.016,187,0.016,213,0.928,242,2.801,272,0.879,274,4.494,276,4.212,278,4.212,288,3.404,293,2.807,295,1.781,299,5.78,303,4.203,305,3.177,372,4.494,386,3.467,397,3.375,449,5.449,642,3.081,818,3.375,842,1.832,888,3.081,889,5.563,890,2.807,891,3.375,892,4.494,893,4.986,894,4.986,895,5.984,896,5.61,897,4.986,898,4.767,899,4.986,900,3.739,901,4.799,902,3.739,903,4.986,904,4.986,905,4.237,906,4.986,907,4.835,908,3.739,909,5.61,910,3.739,911,6.733,912,4.237,913,4.986,914,4.986,915,3.375,916,4.237,917,2.836,918,3.739,919,5.337,920,3.739,921,5.984,922,4.986,923,5.984,924,5.984,925,5.984,926,6.412,927,4.986,928,5.984,929,6.906,930,4.986,931,3.739,932,6.65,933,4.494,934,5.984,935,5.984,936,5.984,937,5.984,938,3.739,939,3.739,940,4.986,941,3.739,942,4.986,943,3.739,944,3.739,945,3.739,946,4.237,947,3.744,948,4.986,949,5.086,950,4.986,951,4.986,952,3.739,953,3.739,954,5.984,955,4.986,956,3.739,957,4.986,958,3.739,959,3.739,960,3.739,961,3.177,962,3.739,963,3.739,964,3.739,965,3.739,966,3.739,967,3.739]],["title/classes/Cut.html",[0,0.255,968,1.847]],["body/classes/Cut.html",[0,0.269,2,0.389,3,0.259,4,0.228,5,0.17,9,0.346,16,0.17,17,0.616,20,1.803,24,1.443,33,0.567,42,1.077,47,0.735,49,1.011,50,0.571,51,0.024,52,0.51,53,0.267,54,0.518,56,1.451,57,0.932,58,0.812,59,1.434,71,1.296,80,0.996,93,2.269,103,0.589,112,0.809,117,1.106,152,0.29,153,0.555,162,0.424,186,0.016,187,0.016,230,1.019,254,2.738,258,1.626,306,3.135,343,2.923,470,4.039,476,2.738,642,3.066,755,5.772,756,5.772,905,4.216,968,3.742,969,3.153,970,3.153,971,3.71,972,4.348,973,5.589,974,5.589,975,5.589,976,5.589,977,4.21,978,6.534,979,5.552,980,6.534,981,5.552,982,4.961,983,6.218,984,6.218,985,3.64,986,3.71,987,4.961,988,3.066,989,5.589,990,6.792,991,5.589,992,3.454,993,6.398,994,6.398,995,4.804,996,3.71,997,5.437,998,5.966,999,4.216,1000,3.71,1001,3.71,1002,3.71,1003,3.71,1004,3.71,1005,3.71,1006,3.71,1007,3.71,1008,4.961,1009,3.71,1010,2.613,1011,4.961,1012,3.71,1013,5.966,1014,4.961,1015,3.71,1016,3.71,1017,4.961,1018,4.961,1019,4.961,1020,4.961,1021,5.589,1022,4.961,1023,4.961,1024,3.71]],["title/classes/DatGUIMenuUI.html",[0,0.255,1025,2.633]],["body/classes/DatGUIMenuUI.html",[0,0.291,2,0.218,3,0.145,4,0.128,5,0.095,9,0.414,11,1.206,12,2.126,13,1.94,16,0.149,17,0.404,20,1.804,24,1.403,33,0.372,42,0.451,44,1.421,47,0.698,49,0.817,50,0.555,51,0.024,52,0.511,53,0.266,54,0.504,55,1.707,56,1.064,57,0.701,58,0.713,59,1.151,66,0.577,68,1.56,69,1.953,71,0.85,73,1.018,77,2.279,79,1.769,80,1.136,88,1.449,90,2.416,94,0.817,101,0.752,103,0.534,107,0.543,112,0.903,117,0.624,126,1.853,135,0.597,136,1.038,137,2.969,152,0.162,153,0.558,162,0.518,167,1.56,169,2.075,181,1.56,186,0.011,187,0.011,213,0.713,230,1.006,241,1.018,244,1.85,247,2.874,253,1.605,258,1.616,261,1.847,269,1.182,272,0.933,274,3.404,276,3.404,278,3.695,291,3.533,292,2.579,293,4.239,295,1.449,325,1.85,337,2.093,344,2.754,347,1.85,389,2.969,398,2.201,469,2.106,476,1.593,487,1.284,513,3.8,527,2.009,547,1.391,589,1.56,618,2.802,629,2.382,630,2.593,651,1.56,657,3.404,659,2.442,660,1.56,682,3.06,684,1.635,707,4.024,708,1.709,736,2.612,740,2.557,786,2.427,788,2.812,822,1.406,852,1.509,858,2.201,870,2.093,871,3.069,872,1.85,873,3.692,912,2.763,915,3.533,968,2.593,979,1.765,981,1.765,988,2.009,992,1.284,1025,2.442,1026,5.686,1027,5.305,1028,1.406,1029,2.009,1030,2.494,1031,2.763,1032,2.279,1033,3.405,1034,3.405,1035,4.007,1036,3.405,1037,4.007,1038,4.007,1039,4.007,1040,3.009,1041,3.404,1042,2.442,1043,2.442,1044,3.404,1045,2.442,1046,2.442,1047,3.919,1048,2.442,1049,2.442,1050,3.252,1051,3.252,1052,2.802,1053,2.763,1054,1.85,1055,2.579,1056,1.765,1057,2.077,1058,2.969,1059,1.765,1060,3.252,1061,3.378,1062,1.56,1063,2.077,1064,5.219,1065,2.077,1066,5.219,1067,2.077,1068,2.077,1069,1.56,1070,4.163,1071,2.077,1072,3.404,1073,2.476,1074,3.442,1075,2.077,1076,2.201,1077,2.442,1078,3.695,1079,2.442,1080,2.077,1081,3.695,1082,2.442,1083,4.533,1084,2.077,1085,2.442,1086,3.404,1087,2.442,1088,2.077,1089,2.442,1090,3.695,1091,2.077,1092,3.069,1093,2.802,1094,2.201,1095,2.579,1096,2.442,1097,1.765,1098,3.009,1099,2.442,1100,2.077,1101,2.201,1102,2.201,1103,2.442,1104,2.077,1105,2.442,1106,5.219,1107,2.077,1108,3.252,1109,2.077,1110,1.56,1111,1.56,1112,1.018,1113,2.077,1114,2.077,1115,2.077,1116,2.077,1117,2.077,1118,1.765,1119,1.284,1120,1.765,1121,2.077,1122,4.435,1123,4.182,1124,4.798,1125,1.765,1126,2.077,1127,2.077,1128,2.077,1129,2.077,1130,2.442,1131,3.919,1132,4.533,1133,2.077,1134,3.252,1135,5.455,1136,4.933,1137,2.077,1138,2.763,1139,1.765,1140,3.252,1141,1.765,1142,2.077,1143,2.077,1144,2.077,1145,1.765,1146,1.284,1147,1.765,1148,2.077,1149,2.077,1150,3.252,1151,2.442,1152,2.077,1153,4.798,1154,2.077,1155,3.252,1156,4.533,1157,2.077,1158,4.007,1159,3.252,1160,1.765,1161,5.219,1162,2.077,1163,2.077,1164,2.077,1165,1.765,1166,2.077,1167,4.007,1168,3.252,1169,1.765,1170,2.077,1171,2.077,1172,2.077,1173,2.077,1174,2.077,1175,2.077,1176,3.252,1177,2.077,1178,4.007,1179,2.077,1180,3.252,1181,2.077,1182,2.077,1183,3.252,1184,2.077,1185,2.077,1186,2.077,1187,1.182,1188,2.077,1189,2.077,1190,2.077,1191,2.077,1192,1.765,1193,1.765,1194,2.077,1195,1.018,1196,2.077,1197,2.077,1198,2.077,1199,4.007,1200,3.252,1201,1.765,1202,2.077,1203,2.077,1204,1.765,1205,2.077,1206,1.765,1207,3.852,1208,2.077,1209,2.077,1210,1.765,1211,2.077,1212,2.077,1213,2.077,1214,3.252,1215,2.077,1216,3.252,1217,1.765,1218,4.533,1219,2.077,1220,4.007,1221,1.765,1222,1.765,1223,1.765,1224,2.077,1225,2.077,1226,2.077,1227,2.077,1228,4.533,1229,2.077,1230,2.077,1231,2.077,1232,3.252,1233,2.763,1234,2.763,1235,2.077,1236,3.252,1237,2.077,1238,2.763,1239,2.077,1240,2.077,1241,2.077,1242,1.56,1243,1.765,1244,1.765,1245,2.763,1246,2.763,1247,2.077,1248,2.077,1249,1.765,1250,3.252,1251,3.252,1252,4.533,1253,2.077,1254,2.077,1255,2.077,1256,2.077,1257,2.077,1258,2.077,1259,2.077,1260,2.077,1261,2.077,1262,2.077,1263,4.533,1264,2.077,1265,2.077,1266,2.077,1267,2.077,1268,1.765,1269,1.765,1270,1.765,1271,1.765,1272,2.077,1273,2.077,1274,2.077,1275,1.765,1276,1.765,1277,2.077,1278,1.765,1279,2.077,1280,2.077,1281,1.56,1282,1.56,1283,2.077,1284,2.077,1285,2.077]],["title/classes/EffectsManager.html",[0,0.255,1286,2.374]],["body/classes/EffectsManager.html",[0,0.25,2,0.362,3,0.241,4,0.212,5,0.158,6,2.754,8,1.081,9,0.437,11,1.339,16,0.158,17,0.586,20,1.814,24,1.432,29,3.199,33,0.54,42,1.169,44,2.285,45,2.734,47,0.715,50,0.58,51,0.024,52,0.474,53,0.259,54,0.526,55,2.181,56,1.236,57,0.908,58,0.395,59,0.962,61,2.648,71,0.902,94,1.18,99,3.579,101,1.245,103,0.543,110,2.372,112,0.878,135,0.694,136,0.617,152,0.27,153,0.575,162,0.395,186,0.016,187,0.016,213,0.838,230,1.01,253,1.672,272,0.634,333,4.348,338,3.92,469,2.021,628,3.439,640,2.591,715,2.314,854,2.468,1095,2.687,1286,3.197,1287,5.834,1288,5.12,1289,4.348,1290,5.926,1291,4.013,1292,4.013,1293,5.628,1294,6.865,1295,5.385,1296,4.721,1297,5.791,1298,4.723,1299,4.723,1300,4.723,1301,4.723,1302,4.723,1303,4.013,1304,4.013,1305,5.791,1306,2.919,1307,3.92,1308,4.348,1309,2.132,1310,5.385,1311,2.591,1312,6.7,1313,5.385,1314,2.932,1315,3.546,1316,3.546,1317,4.815,1318,2.591,1319,3.45,1320,4.921,1321,4.921,1322,4.348,1323,5.548,1324,4.723,1325,3.45,1326,4.723,1327,3.45,1328,4.723,1329,2.932,1330,4.723,1331,2.932,1332,3.45,1333,2.336,1334,4.723,1335,3.45,1336,3.45,1337,3.45,1338,4.723,1339,3.45,1340,4.576,1341,4.013,1342,3.45,1343,3.45,1344,3.45,1345,2.132,1346,4.723,1347,5.385,1348,4.723,1349,4.723,1350,3.45,1351,3.45,1352,3.45,1353,3.45,1354,3.45,1355,2.932,1356,3.45,1357,3.45,1358,3.45,1359,3.45,1360,3.45,1361,3.45,1362,3.45]],["title/interfaces/EventDataLoader.html",[219,1.321,860,2.167]],["body/interfaces/EventDataLoader.html",[3,0.397,4,0.238,5,0.177,9,0.439,11,1.496,16,0.261,33,0.583,47,0.692,50,0.58,51,0.024,52,0.474,53,0.242,54,0.526,69,2.117,80,1.188,88,1.86,103,0.611,112,0.738,117,0.888,121,1.919,125,2.684,135,0.652,152,0.302,153,0.588,186,0.017,187,0.017,219,1.454,221,2.197,228,3.449,230,1.048,233,1.454,235,2.898,257,3.282,258,1.621,325,3.243,546,3.148,549,3.825,628,2.684,629,2.835,630,2.684,632,4.552,650,3.449,708,1.584,711,2.439,754,3.825,763,2.496,778,3.746,786,2.718,822,3.449,854,1.803,860,3.148,870,2.044,874,2.684,883,2.9,885,2.9,917,2.898,1030,2.959,1052,3.746,1054,3.892,1055,3.448,1058,2.898,1061,3.681,1093,3.148,1195,2.496,1363,5.692,1364,2.9,1365,5.094,1366,5.094,1367,5.701,1368,5.701,1369,5.094,1370,5.151,1371,5.151,1372,5.094,1373,6.062,1374,3.862,1375,5.151,1376,3.862,1377,3.862,1378,5.151,1379,4.552,1380,3.81,1381,3.862,1382,5.499,1383,4.329,1384,5.094,1385,5.094,1386,4.329,1387,3.825,1388,4.329,1389,5.094,1390,3.825,1391,5.094,1392,3.859,1393,3.825,1394,4.329,1395,3.862,1396,4.329,1397,4.329,1398,3.862,1399,3.449,1400,4.104,1401,4.329,1402,5.499,1403,3.862,1404,4.552,1405,3.825,1406,5.094,1407,3.862,1408,4.329,1409,4.139,1410,4.329,1411,3.825,1412,3.862,1413,2.9]],["title/classes/ExportManager.html",[0,0.255,1414,2.633]],["body/classes/ExportManager.html",[0,0.282,2,0.407,3,0.27,4,0.239,5,0.262,6,2.599,8,1.216,9,0.452,11,1.181,12,1.924,16,0.178,20,1.773,24,1.321,33,0.584,44,2.257,47,0.662,50,0.604,51,0.024,52,0.493,53,0.242,54,0.548,66,1.686,90,2.186,92,3.465,103,0.548,112,0.74,135,0.694,136,0.694,152,0.446,153,0.582,162,0.653,186,0.017,187,0.017,213,0.74,230,1.006,247,3.726,253,1.809,258,1.583,260,3.158,272,0.938,325,3.925,629,1.556,673,3.297,842,1.901,852,2.232,866,1.924,995,3.837,1058,4.091,1187,2.907,1309,2.398,1387,3.837,1414,3.837,1415,5.507,1416,5.714,1417,5.11,1418,5.11,1419,5.11,1420,5.11,1421,3.88,1422,3.88,1423,5.161,1424,4.111,1425,3.837,1426,4.343,1427,4.343,1428,6.073,1429,4.048,1430,5.11,1431,5.11,1432,3.88,1433,3.686,1434,5.11,1435,3.88,1436,5.11,1437,3.88,1438,3.837,1439,5.11,1440,5.11,1441,3.88,1442,5.11,1443,3.88,1444,2.627,1445,3.297,1446,3.88,1447,5.714,1448,3.868,1449,3.88,1450,3.88,1451,3.88,1452,5.11,1453,6.073,1454,3.88,1455,2.627,1456,2.627,1457,3.297,1458,2.913,1459,4.343,1460,3.88,1461,3.88,1462,3.297,1463,3.88,1464,3.88,1465,3.88,1466,6.073,1467,3.88,1468,6.073,1469,3.88,1470,3.297,1471,3.88,1472,3.88,1473,3.88,1474,3.88,1475,3.88,1476,3.88,1477,3.88,1478,3.88]],["title/classes/Field.html",[0,0.255,977,2.374]],["body/classes/Field.html",[0,0.409,2,0.396,3,0.263,4,0.232,5,0.173,9,0.263,13,1.616,16,0.173,17,0.469,18,2.263,33,0.574,47,0.396,50,0.361,51,0.024,52,0.295,53,0.145,54,0.328,56,0.77,57,0.507,59,1.023,71,0.987,79,2.015,88,1.049,94,0.77,103,0.558,107,0.987,117,1.077,121,1.423,135,0.432,136,0.675,144,1.777,149,1.851,152,0.295,153,0.578,162,0.574,186,0.016,187,0.016,198,2.334,213,0.547,238,1.99,242,3.059,254,1.851,267,3.208,269,2.149,272,0.923,282,1.851,283,3.485,306,3.151,320,2.149,354,4.068,365,1.851,451,3.399,476,2.763,523,1.99,713,2.856,720,3.208,740,1.851,763,2.46,819,2.557,842,3.151,977,4.068,1010,1.99,1029,2.334,1345,3.102,1448,2.557,1479,3.399,1480,2.557,1481,2.836,1482,3.777,1483,3.777,1484,3.777,1485,3.77,1486,4.613,1487,4.613,1488,2.149,1489,2.633,1490,2.836,1491,2.836,1492,2.836,1493,4.068,1494,3.713,1495,2.557,1496,2.836,1497,2.836,1498,4.235,1499,2.836,1500,2.836,1501,2.836,1502,2.836,1503,4.512,1504,4.234,1505,3.77,1506,3.77,1507,4.928,1508,5.005,1509,4.512,1510,4.068,1511,2.836,1512,2.836,1513,2.836,1514,5.066,1515,2.836,1516,2.149,1517,5.005,1518,2.836,1519,2.836,1520,4.697,1521,5.117,1522,2.836,1523,4.928,1524,2.836,1525,2.836,1526,2.836,1527,3.77,1528,2.836,1529,3.77,1530,4.234,1531,2.836,1532,2.836,1533,2.836,1534,2.836,1535,2.836,1536,2.836,1537,2.836,1538,2.836,1539,2.836,1540,2.836,1541,2.836,1542,2.836,1543,2.836,1544,2.836,1545,2.836,1546,2.836,1547,2.149,1548,2.836,1549,4.234,1550,3.77,1551,2.836,1552,4.234,1553,2.836,1554,4.234,1555,3.77,1556,2.836,1557,2.836,1558,2.836,1559,2.836,1560,2.836,1561,2.836,1562,2.836,1563,2.836,1564,2.836,1565,2.836,1566,2.836,1567,3.77,1568,3.77,1569,3.77,1570,4.234,1571,3.102,1572,4.234,1573,3.77,1574,2.557,1575,3.399,1576,2.557,1577,2.334,1578,3.102,1579,2.836,1580,2.836,1581,2.836,1582,2.836,1583,2.836,1584,2.836,1585,2.836]],["title/classes/InfoLogger.html",[0,0.255,1380,1.995]],["body/classes/InfoLogger.html",[0,0.347,2,0.501,3,0.503,4,0.294,5,0.219,9,0.406,16,0.219,17,0.724,20,1.787,33,0.667,47,0.687,50,0.457,51,0.024,52,0.373,53,0.241,54,0.414,57,0.783,58,0.667,73,2.857,80,1.142,88,1.619,103,0.546,110,2.064,112,0.691,117,0.908,126,1.798,152,0.373,153,0.506,162,0.546,186,0.019,187,0.019,230,0.691,258,1.627,628,3.071,708,1.713,740,2.857,786,2.777,854,1.69,1380,3.316,1392,4.765,1393,3.585,1400,4.628,1411,4.377,1586,5.711,1587,4.058,1588,6.293,1589,6.293,1590,6.554,1591,4.775,1592,4.954,1593,4.775,1594,5.83,1595,5.83,1596,4.377,1597,4.954,1598,5.83,1599,4.775,1600,5.83,1601,5.133,1602,4.775,1603,4.377,1604,4.377,1605,4.775,1606,4.775,1607,4.775,1608,4.775,1609,4.775]],["title/classes/LoadingManager.html",[0,0.255,1610,2.167]],["body/classes/LoadingManager.html",[0,0.251,2,0.363,3,0.241,4,0.213,5,0.159,8,1.084,9,0.447,11,1.51,16,0.159,17,0.588,18,2.031,20,1.783,24,1.462,33,0.541,42,1.171,47,0.725,49,0.964,50,0.6,51,0.024,52,0.49,53,0.263,54,0.544,57,0.862,58,0.734,66,1.498,74,3.553,80,1.154,94,1.35,96,3.432,97,3.385,103,0.567,112,1.006,117,0.999,148,3.465,152,0.27,153,0.557,162,0.396,186,0.016,187,0.016,196,4.353,233,1.303,235,2.692,253,1.225,272,0.779,295,1.498,343,2.319,438,4.741,708,1.707,711,1.481,734,4.244,788,1.582,866,2.361,870,2.736,876,3.93,985,3.566,1074,2.692,1136,4.021,1309,2.138,1318,2.598,1429,4.011,1610,3.583,1611,5.901,1612,2.941,1613,5.393,1614,5.393,1615,5.393,1616,5.393,1617,4.732,1618,4.732,1619,4.732,1620,4.732,1621,4.732,1622,4.732,1623,4.021,1624,3.46,1625,3.46,1626,4.732,1627,5.31,1628,3.46,1629,4.732,1630,3.46,1631,4.732,1632,3.46,1633,5.327,1634,4.732,1635,3.46,1636,4.732,1637,2.941,1638,5.798,1639,4.732,1640,2.598,1641,4.732,1642,4.732,1643,2.941,1644,4.732,1645,3.46,1646,5.393,1647,3.46,1648,4.732,1649,3.46,1650,3.46,1651,2.941,1652,5.393,1653,4.732,1654,3.46,1655,3.46,1656,3.46,1657,3.46,1658,4.732,1659,3.46,1660,4.732,1661,4.021,1662,4.732,1663,3.46,1664,3.46,1665,4.732,1666,3.46,1667,4.732,1668,3.46,1669,3.46,1670,3.46,1671,3.46,1672,3.46]],["title/classes/PhoenixMenuNode.html",[0,0.255,703,1.847]],["body/classes/PhoenixMenuNode.html",[0,0.177,2,0.255,3,0.17,4,0.15,5,0.112,9,0.432,16,0.112,17,0.456,20,1.453,33,0.42,42,0.798,47,0.72,49,1.133,50,0.593,51,0.024,52,0.554,53,0.268,54,0.528,56,1.328,57,0.775,58,0.763,59,1.133,66,1.792,69,1.56,71,1.156,75,3.436,76,3.008,80,1.166,88,1.02,93,2.253,94,1.315,101,0.563,103,0.579,107,1.589,112,0.897,117,0.572,121,2.403,126,2.174,135,0.278,140,2.27,152,0.19,153,0.579,162,0.66,166,1.282,169,1.386,186,0.012,187,0.012,192,3.121,194,2.27,200,3.7,213,0.352,233,1.666,270,1.504,272,0.883,295,1.228,436,2.068,469,2.652,470,2.486,524,2.27,527,2.27,578,2.758,629,0.976,661,5.218,682,3.15,684,2.042,703,3.651,708,1.288,711,1.893,717,3.045,736,2.668,737,3.562,768,4.653,777,3.918,788,1.68,821,1.827,850,3.121,852,1.978,866,1.383,884,3.628,992,1.504,1054,1.384,1095,2.089,1131,4.566,1195,1.8,1242,4.845,1433,1.384,1489,2.657,1627,4.175,1673,2.068,1674,5.733,1675,4.423,1676,4.423,1677,4.423,1678,5.065,1679,4.423,1680,4.936,1681,4.423,1682,4.423,1683,4.423,1684,3.673,1685,3.673,1686,3.673,1687,4.927,1688,3.121,1689,3.673,1690,3.673,1691,4.927,1692,2.068,1693,3.673,1694,5.049,1695,2.434,1696,2.434,1697,2.434,1698,4.187,1699,3.673,1700,2.434,1701,2.434,1702,2.434,1703,2.434,1704,2.758,1705,2.434,1706,2.434,1707,2.434,1708,2.434,1709,2.434,1710,2.434,1711,4.423,1712,2.434,1713,3.399,1714,3.673,1715,2.434,1716,3.121,1717,3.673,1718,2.434,1719,4.462,1720,4.927,1721,4.927,1722,3.673,1723,2.434,1724,2.434,1725,3.121,1726,2.434,1727,3.38,1728,2.434,1729,3.673,1730,2.434,1731,3.673,1732,2.434,1733,3.121,1734,3.673,1735,2.434,1736,3.759,1737,2.758,1738,3.673,1739,3.759,1740,2.068,1741,2.434,1742,5.288,1743,3.673,1744,3.673,1745,2.434,1746,2.434,1747,2.434,1748,3.673,1749,2.434,1750,2.434,1751,2.434,1752,2.434,1753,2.434,1754,2.434,1755,1.648,1756,2.434,1757,2.434,1758,2.434,1759,2.434,1760,2.434,1761,2.434,1762,4.927,1763,3.673,1764,3.673,1765,2.434,1766,2.434,1767,2.434,1768,4.927,1769,2.068,1770,2.434,1771,2.434,1772,2.434,1773,2.434,1774,2.434,1775,2.434,1776,4.423,1777,2.434,1778,2.068,1779,2.434,1780,2.068,1781,2.434,1782,2.434,1783,2.434,1784,3.673,1785,2.434,1786,2.434,1787,2.434,1788,2.434,1789,3.673,1790,2.434,1791,2.434,1792,2.434,1793,4.423,1794,2.068,1795,2.434,1796,2.434,1797,2.434,1798,3.673,1799,2.434,1800,4.423,1801,2.434,1802,2.434,1803,2.434,1804,2.434,1805,2.434,1806,2.434,1807,2.434,1808,2.434,1809,2.434,1810,2.434,1811,2.434,1812,4.423,1813,2.434,1814,2.434,1815,2.434,1816,2.434,1817,2.434,1818,2.434,1819,5.772,1820,2.434,1821,4.423,1822,2.434,1823,3.673,1824,2.434,1825,2.434,1826,2.434,1827,2.434,1828,2.434]],["title/classes/PhoenixMenuUI.html",[0,0.255,1829,2.633]],["body/classes/PhoenixMenuUI.html",[0,0.293,2,0.22,3,0.229,4,0.129,5,0.096,9,0.423,11,1.212,12,2.243,13,1.951,16,0.096,17,0.407,20,1.759,24,1.415,33,0.375,42,0.712,44,1.429,47,0.691,49,0.668,50,0.57,51,0.024,52,0.53,53,0.265,54,0.517,55,1.717,56,1.068,57,0.44,58,0.781,59,1.068,66,1.842,69,1.546,71,1.054,73,1.028,75,2.026,77,2.295,80,1.148,88,1.573,90,2.491,94,0.822,101,0.758,103,0.549,107,0.548,112,0.925,126,1.862,134,1.297,135,0.648,136,1.041,137,2.982,152,0.164,153,0.572,162,0.521,166,1.727,169,2.002,174,3.029,181,1.576,183,1.783,186,0.011,187,0.011,213,0.475,230,1.007,241,1.028,244,1.865,247,2.402,253,1.614,258,1.612,261,1.855,272,0.839,292,2.813,295,1.373,306,2.568,337,2.273,344,2.638,347,1.865,351,1.783,365,1.028,389,2.982,398,2.219,469,1.951,476,1.028,487,3.056,527,2.026,547,1.403,597,2.461,618,3.056,629,2.473,630,3.397,642,1.297,651,1.576,657,3.936,659,3.423,660,3.029,681,2.219,682,3.033,684,1.932,687,2.786,703,3.546,705,2.461,707,3.974,708,1.759,712,1.783,719,1.783,724,1.783,736,2.699,737,3.131,739,4.454,740,2.568,774,1.194,775,1.576,776,1.421,777,3.773,786,2.758,788,1.499,789,5.239,792,3.713,833,3.874,852,1.518,861,3.029,866,1.519,870,1.829,871,2.219,884,3.494,915,3.548,968,3.196,985,1.194,988,2.026,1028,1.421,1029,2.026,1030,2.504,1031,2.786,1032,2.295,1033,3.428,1034,3.428,1036,3.428,1040,3.029,1041,3.423,1042,2.461,1043,2.461,1044,3.423,1045,2.461,1046,2.461,1047,3.936,1048,2.461,1049,2.461,1052,2.817,1054,1.865,1055,1.865,1058,1.865,1059,1.783,1061,3.223,1062,1.576,1069,1.576,1070,4.463,1072,3.423,1073,2.817,1074,1.865,1076,2.219,1077,2.461,1078,2.461,1079,2.461,1081,3.713,1082,2.461,1085,2.461,1086,3.423,1087,2.461,1089,2.461,1090,3.713,1092,3.548,1093,2.817,1094,2.219,1095,1.865,1096,2.461,1097,1.783,1098,3.029,1099,3.936,1101,2.219,1102,2.219,1103,2.461,1105,2.461,1110,1.576,1111,1.576,1122,4.454,1123,3.874,1124,3.874,1125,1.783,1130,2.461,1138,1.783,1139,2.786,1145,1.783,1146,1.297,1147,1.783,1153,2.786,1160,1.783,1165,1.783,1169,1.783,1192,1.783,1201,1.783,1204,1.783,1206,1.783,1207,2.786,1210,1.783,1217,1.783,1221,1.783,1222,1.783,1233,3.428,1234,3.428,1238,3.428,1242,2.461,1243,2.786,1244,2.786,1245,2.786,1246,2.786,1249,2.786,1268,1.783,1269,1.783,1270,1.783,1271,1.783,1275,1.783,1276,1.783,1278,1.783,1281,1.576,1282,1.576,1388,2.786,1433,1.194,1489,1.829,1680,3.423,1704,1.576,1713,1.106,1719,1.576,1780,3.428,1829,2.461,1830,4.033,1831,4.033,1832,4.033,1833,4.559,1834,2.099,1835,3.278,1836,2.099,1837,2.099,1838,2.099,1839,2.099,1840,2.099,1841,5.666,1842,2.099,1843,2.099,1844,2.099,1845,4.203,1846,2.099,1847,2.099,1848,2.099,1849,2.099,1850,2.099,1851,2.099,1852,2.099,1853,5.823,1854,2.099,1855,2.786,1856,2.099,1857,4.033,1858,2.099,1859,2.099,1860,2.099,1861,3.278,1862,4.033,1863,3.278,1864,1.576,1865,2.099,1866,3.278,1867,2.099,1868,2.099,1869,2.099,1870,1.783,1871,2.099,1872,1.783,1873,3.278,1874,2.099,1875,2.099,1876,2.099,1877,2.099,1878,2.099,1879,2.099,1880,2.099,1881,2.786,1882,2.099,1883,3.278,1884,2.099,1885,2.099,1886,2.099,1887,2.099,1888,2.099,1889,3.278,1890,3.278,1891,3.278,1892,2.099,1893,2.099,1894,2.099,1895,2.099,1896,2.099,1897,1.783,1898,2.099,1899,2.099,1900,2.099,1901,3.278,1902,2.099,1903,2.099,1904,2.099,1905,1.783,1906,2.099,1907,2.099,1908,2.099,1909,2.099,1910,2.099,1911,2.099,1912,2.099,1913,2.099,1914,2.786,1915,2.099,1916,2.099,1917,2.099,1918,2.099,1919,2.099,1920,2.099,1921,2.099,1922,2.099,1923,2.099,1924,2.099,1925,3.278,1926,2.099,1927,2.099,1928,2.099,1929,2.099,1930,2.099,1931,2.099,1932,2.099,1933,2.099,1934,2.099,1935,2.099]],["title/interfaces/PhoenixUI.html",[219,1.321,1032,1.995]],["body/interfaces/PhoenixUI.html",[3,0.249,4,0.22,5,0.164,9,0.459,16,0.164,33,0.553,44,1.516,47,0.707,50,0.619,51,0.024,52,0.545,53,0.274,54,0.562,57,0.65,66,1.343,69,1.733,80,1.193,94,1.118,101,1.118,103,0.591,112,1.027,126,2.213,135,0.553,136,0.639,152,0.279,153,0.599,169,1.983,186,0.016,187,0.016,200,4.61,219,2.065,221,2.033,230,1.036,247,3.096,258,1.654,261,2.08,292,2.752,337,2.539,344,2.886,347,2.752,389,3.601,469,2.07,527,2.99,547,2.07,618,3.631,629,2.641,630,3.096,682,3.112,684,1.841,707,4.085,708,1.844,736,2.638,786,2.751,852,1.957,870,2.357,884,3.585,915,4.285,968,3.096,988,2.99,1028,2.42,1030,2.687,1032,2.752,1040,4.118,1041,4.412,1042,3.633,1043,3.633,1044,4.412,1045,3.633,1046,3.633,1047,4.752,1048,3.633,1049,3.633,1053,3.037,1056,3.037,1061,3.343,1062,2.684,1069,2.684,1070,4.285,1072,4.412,1073,3.389,1074,2.752,1076,3.275,1077,3.633,1078,3.633,1079,3.633,1081,4.412,1082,3.633,1085,3.633,1086,4.412,1087,3.633,1089,3.633,1090,4.412,1092,3.978,1093,3.631,1094,3.275,1095,2.752,1096,3.633,1098,3.633,1099,3.633,1101,3.275,1102,3.275,1103,3.633,1105,3.633,1111,2.684,1281,4.412,1282,3.633,1845,4.994,1936,4.111,1937,4.111,1938,3.574,1939,3.574,1940,3.574,1941,3.574,1942,3.574,1943,3.574,1944,3.574]],["title/classes/PresetView.html",[0,0.255,879,2.374]],["body/classes/PresetView.html",[0,0.299,2,0.433,3,0.288,4,0.254,5,0.189,9,0.371,16,0.189,17,0.66,24,1.468,33,0.608,42,1.155,45,2.639,47,0.72,49,1.084,50,0.395,51,0.024,52,0.547,53,0.26,54,0.358,57,0.714,58,0.711,61,2.432,79,2.128,80,1.17,101,1.437,103,0.462,110,1.883,117,1.119,144,1.883,152,0.416,153,0.54,162,0.472,186,0.017,187,0.017,224,4.023,229,3.026,295,1.477,303,4.197,440,3.739,779,3.098,865,3.276,868,4.09,877,3.098,879,3.601,1481,3.994,1510,3.601,1678,5.347,1692,3.506,1739,3.506,1740,5.002,1945,5.196,1946,3.098,1947,5.319,1948,5.319,1949,3.994,1950,5.319,1951,6.589,1952,6.792,1953,6.792,1954,6.703,1955,6.703,1956,6.218,1957,5.599,1958,5.319,1959,6.218,1960,6.218,1961,4.126,1962,4.126,1963,4.126,1964,5.284,1965,3.994,1966,4.126,1967,4.126,1968,4.126,1969,4.126,1970,3.506,1971,4.126,1972,4.126,1973,4.126,1974,4.126,1975,4.126,1976,4.126,1977,4.126,1978,4.126]],["title/classes/PrettySymbols.html",[0,0.255,774,1.995]],["body/classes/PrettySymbols.html",[0,0.313,2,0.452,3,0.301,4,0.266,5,0.198,9,0.419,16,0.198,17,0.679,18,2.605,22,4.514,24,1.225,33,0.626,47,0.63,49,0.879,50,0.648,51,0.024,52,0.428,53,0.26,54,0.475,57,0.579,58,0.493,69,2.041,80,1.144,103,0.522,152,0.337,153,0.566,162,0.687,186,0.018,187,0.018,213,0.792,233,2.381,261,1.527,267,2.454,272,0.876,282,2.114,377,3.666,546,3.382,600,2.666,646,4.12,708,1.128,711,2.705,713,3.113,720,3.113,774,3.113,776,4.513,780,3.705,824,3.666,842,2.682,844,3.666,891,2.921,901,3.705,907,3.705,919,4.11,1493,3.705,1494,3.382,1755,4.28,1979,5.372,1980,3.666,1981,7.11,1982,5.473,1983,5.473,1984,5.372,1985,5.473,1986,6.322,1987,6.322,1988,5.372,1989,6.322,1990,4.314,1991,5.473,1992,4.314,1993,6.853,1994,5.473,1995,5.473,1996,4.314,1997,6.772,1998,6.524,1999,6.011,2000,4.314,2001,4.314,2002,4.314,2003,4.314,2004,4.314,2005,6.011,2006,3.666,2007,5.473,2008,4.314,2009,4.314,2010,4.314,2011,5.473,2012,4.314,2013,4.314,2014,4.314,2015,4.314,2016,4.314,2017,3.666,2018,4.314,2019,6.322,2020,4.314,2021,4.314,2022,4.314,2023,5.473,2024,4.314,2025,4.314,2026,4.314,2027,4.314,2028,4.314,2029,4.314]],["title/classes/RKHelper.html",[0,0.255,2030,2.374]],["body/classes/RKHelper.html",[0,0.312,2,0.451,3,0.3,4,0.265,5,0.197,9,0.44,16,0.197,18,2.604,24,1.223,33,0.722,47,0.629,50,0.574,51,0.024,52,0.469,53,0.25,54,0.521,56,1.287,57,0.848,58,0.492,59,1.328,79,1.978,88,1.516,94,1.328,103,0.604,107,1.768,110,1.933,112,0.622,135,0.686,136,0.768,152,0.336,153,0.548,162,0.745,186,0.018,187,0.018,227,2.876,230,0.791,233,2.056,242,2.85,254,3.094,261,1.933,267,3.592,272,0.928,337,2.747,341,4.232,343,2.675,365,2.94,405,3.228,523,2.876,600,2.656,818,2.91,820,3.653,821,4.1,888,2.656,890,3.228,891,4.063,892,3.228,901,2.91,907,3.696,947,3.228,1010,2.876,1399,3.696,1486,2.91,1487,2.91,1488,3.849,1498,2.91,1575,4.274,1576,3.696,1577,4.027,2017,4.64,2030,3.696,2031,5.365,2032,6.001,2033,4.64,2034,5.46,2035,4.298,2036,4.298,2037,5.46,2038,5.46,2039,6.517,2040,6.313,2041,5.46,2042,4.298,2043,5.46,2044,4.64,2045,5.46,2046,5.46,2047,5.46,2048,5.46,2049,4.298,2050,6.001,2051,4.298,2052,4.298,2053,4.298,2054,5.46,2055,4.298,2056,4.298,2057,4.298,2058,4.298,2059,4.298,2060,4.298,2061,4.298,2062,4.298,2063,4.298,2064,4.298,2065,4.298,2066,4.298,2067,4.298,2068,4.298,2069,4.298,2070,4.298,2071,4.298,2072,4.298,2073,4.298,2074,4.298]],["title/classes/RendererManager.html",[0,0.255,250,2.374]],["body/classes/RendererManager.html",[0,0.196,2,0.283,3,0.188,4,0.166,5,0.124,6,2.786,8,0.844,9,0.459,11,1.334,12,1.492,16,0.216,17,0.492,20,1.78,24,1.42,29,3.561,33,0.453,42,1.02,44,1.919,45,2.426,47,0.726,49,0.807,50,0.624,51,0.024,52,0.509,53,0.258,54,0.566,55,2.306,56,1.328,57,0.696,58,0.727,59,1.056,63,2.975,64,4.305,69,1.169,71,1.036,80,0.964,90,2.362,99,4.459,101,1.507,103,0.603,107,1.228,110,1.834,112,0.944,117,0.419,121,1.015,135,0.308,136,0.708,152,0.21,153,0.58,162,0.682,167,2.023,186,0.013,187,0.013,213,0.574,223,1.665,230,0.887,250,2.682,253,1.403,260,2.449,261,1.663,272,0.853,295,1.305,320,2.254,343,2.539,440,3.225,466,3.784,469,1.695,472,3.367,547,2.217,708,1.036,715,1.941,733,4.495,854,2.044,858,3.507,868,2.254,870,2.078,871,3.507,872,2.947,985,1.533,1074,2.254,1095,2.254,1112,1.941,1119,3.568,1120,2.29,1187,2.673,1296,4.145,1306,4.068,1307,4.145,1308,4.597,1309,2.449,1311,2.023,1315,2.975,1317,2.975,1331,2.29,1355,2.29,1400,4.67,1411,3.89,1637,2.29,1640,2.023,1643,2.29,1914,3.367,2075,5.903,2076,4.699,2077,5.181,2078,5.521,2079,6.967,2080,3.962,2081,3.962,2082,5.181,2083,5.181,2084,5.181,2085,5.181,2086,2.975,2087,3.962,2088,5.181,2089,3.962,2090,3.962,2091,3.962,2092,3.962,2093,3.962,2094,3.962,2095,3.962,2096,3.962,2097,4.771,2098,2.694,2099,2.694,2100,3.962,2101,3.962,2102,3.962,2103,2.694,2104,3.962,2105,2.29,2106,3.962,2107,2.694,2108,2.694,2109,2.29,2110,2.29,2111,5.181,2112,3.962,2113,2.29,2114,3.962,2115,3.962,2116,2.694,2117,3.962,2118,2.29,2119,3.962,2120,3.962,2121,3.962,2122,2.694,2123,3.962,2124,2.694,2125,3.962,2126,3.367,2127,3.993,2128,3.993,2129,3.962,2130,3.962,2131,2.694,2132,3.962,2133,5.773,2134,2.694,2135,3.962,2136,5.181,2137,5.181,2138,5.181,2139,3.962,2140,2.694,2141,2.694,2142,2.023,2143,2.694,2144,2.694,2145,2.023,2146,2.694,2147,2.694,2148,2.694,2149,2.694,2150,2.694,2151,3.962,2152,4.699,2153,2.694,2154,2.694,2155,4.699,2156,2.694,2157,3.962,2158,2.694,2159,4.699,2160,3.962,2161,2.694,2162,3.962,2163,2.694,2164,2.694,2165,2.694,2166,2.694,2167,2.694,2168,3.962,2169,2.694,2170,3.962,2171,5.181,2172,2.694,2173,2.694,2174,2.694,2175,2.694,2176,3.962,2177,2.694,2178,2.694,2179,2.694,2180,3.962]],["title/classes/RungeKutta.html",[0,0.255,1488,1.995]],["body/classes/RungeKutta.html",[0,0.394,2,0.368,3,0.245,4,0.216,5,0.161,9,0.379,13,2.045,16,0.161,17,0.593,18,2.371,33,0.546,47,0.501,50,0.457,51,0.024,52,0.373,53,0.208,54,0.415,56,0.715,57,0.471,58,0.401,59,1.189,71,1.249,79,2.106,88,1.327,94,1.107,103,0.577,107,1.42,112,0.508,117,1.105,121,1.322,135,0.401,136,0.627,144,2.065,149,1.72,152,0.274,153,0.569,162,0.546,186,0.016,187,0.016,198,2.169,213,0.508,233,1.322,238,2.517,242,3.045,254,2.341,267,3.318,269,2.718,272,0.911,282,2.662,283,3.604,306,3.351,320,1.997,354,3.948,365,2.662,451,3.235,476,2.99,523,2.517,713,3.091,720,3.318,740,2.341,763,2.858,819,3.235,842,3.085,1010,2.517,1029,2.953,1345,3.604,1448,2.376,1479,3.678,1480,2.376,1485,4.379,1486,4.71,1487,4.71,1488,2.718,1489,2.743,1490,3.588,1491,3.588,1492,3.588,1493,4.262,1494,3.89,1495,2.376,1496,2.636,1497,2.636,1498,4.131,1499,2.636,1500,2.636,1501,2.636,1502,2.636,1503,4.379,1504,4.08,1505,3.588,1506,3.588,1507,4.837,1508,4.922,1509,4.379,1510,3.948,1511,2.636,1512,2.636,1513,2.636,1514,4.991,1515,2.636,1516,1.997,1517,4.922,1518,2.636,1519,2.636,1520,4.582,1521,5.047,1522,2.636,1523,4.837,1524,2.636,1525,2.636,1526,2.636,1527,3.588,1528,2.636,1529,3.588,1530,4.08,1531,2.636,1532,2.636,1533,2.636,1534,2.636,1535,2.636,1536,2.636,1537,2.636,1538,2.636,1539,2.636,1540,2.636,1541,2.636,1542,2.636,1543,2.636,1544,2.636,1545,2.636,1546,2.636,1547,1.997,1548,2.636,1549,4.08,1550,3.588,1551,2.636,1552,4.08,1553,2.636,1554,4.08,1555,3.588,1556,2.636,1557,2.636,1558,2.636,1559,2.636,1560,2.636,1561,2.636,1562,2.636,1563,2.636,1564,2.636,1565,2.636,1566,2.636,1567,4.582,1568,4.582,1569,4.379,1570,4.582,1571,3.604,1572,4.582,1573,4.379,1574,3.235,1575,3.948,1576,3.235,1577,3.358,1578,2.953,1579,2.636,1580,2.636,1581,2.636,1582,2.636,1583,2.636,1584,2.636,1585,2.636,2181,3.51,2182,3.51,2183,3.51]],["title/classes/ScriptLoader.html",[0,0.255,2184,2.633]],["body/classes/ScriptLoader.html",[0,0.335,2,0.484,3,0.322,4,0.284,5,0.212,9,0.398,11,1.066,16,0.212,18,2.334,24,0.94,33,0.653,47,0.484,50,0.441,51,0.024,52,0.36,53,0.177,54,0.538,57,0.62,58,0.528,59,1.163,80,1.132,103,0.495,126,1.737,135,0.528,152,0.36,153,0.538,162,0.528,186,0.019,187,0.019,213,0.826,230,0.826,258,1.497,272,0.832,295,1.281,347,2.624,708,1.206,865,3.411,866,2.506,872,3.247,874,3.007,876,3.526,972,3.527,1193,3.92,1195,2.261,1364,3.464,1429,3.684,1610,3.83,1680,4.286,2184,4.286,2185,4.85,2186,5.395,2187,6.476,2188,5.708,2189,4.85,2190,6.198,2191,4.613,2192,6.999,2193,6.476,2194,6.198,2195,4.613,2196,5.267,2197,6.198,2198,6.655,2199,5.708,2200,5.708,2201,5.708,2202,4.384,2203,3.92,2204,4.613,2205,4.613,2206,5.708,2207,4.613,2208,4.613,2209,4.613,2210,4.613,2211,4.613,2212,4.613,2213,4.613,2214,4.613,2215,4.613,2216,5.708,2217,4.613,2218,6.476,2219,6.476,2220,4.613,2221,3.92,2222,4.613,2223,4.613,2224,4.613,2225,4.613]],["title/classes/SelectionManager.html",[0,0.255,2226,2.633]],["body/classes/SelectionManager.html",[0,0.188,2,0.272,3,0.181,4,0.16,5,0.119,6,2.774,8,0.814,9,0.411,11,1.477,12,1.452,16,0.119,17,0.632,20,1.882,24,1.355,33,0.441,42,1.181,44,2.174,45,2.537,47,0.723,48,1.95,50,0.545,51,0.024,52,0.473,53,0.258,54,0.472,55,1.916,56,1.202,57,0.683,58,0.651,59,1.161,62,3.36,69,2.092,71,1.008,80,1.033,85,1.763,88,1.413,92,3.086,94,1.161,97,2.791,101,1.317,103,0.546,107,0.679,110,2.016,112,0.825,117,0.404,128,2.193,135,0.651,136,0.464,144,1.924,152,0.203,153,0.546,162,0.582,186,0.013,187,0.013,188,3.093,191,1.368,202,2.895,213,0.854,230,1.01,233,1.732,247,3.001,253,2.016,257,2.664,258,1.4,260,2.383,261,1.365,270,1.605,272,0.858,288,3.583,295,1.277,304,1.605,333,4.277,343,1.889,469,1.65,554,1.605,626,1.95,627,2.61,628,2.681,637,4.324,708,0.679,711,1.967,715,1.889,745,4.425,763,1.889,774,1.477,775,1.95,776,1.758,842,1.889,854,2.37,875,1.758,1119,3.52,1195,1.272,1286,4.465,1288,4.082,1289,4.647,1290,5.012,1291,4.62,1292,4.62,1307,4.263,1308,3.821,1320,3.276,1321,4.324,1322,4.277,1323,4.841,1333,2.61,1340,3.276,1341,2.207,1380,3.752,1392,2.61,1393,3.821,1409,3.145,1413,1.95,1596,4.277,1597,4.324,1601,3.453,1604,3.821,1661,2.207,2086,3.453,2142,2.895,2226,2.895,2227,5.878,2228,5.605,2229,4.598,2230,4.598,2231,4.598,2232,4.598,2233,4.598,2234,4.598,2235,4.598,2236,4.841,2237,5.089,2238,5.089,2239,4.324,2240,3.855,2241,3.855,2242,3.855,2243,3.855,2244,3.276,2245,2.207,2246,1.95,2247,2.207,2248,3.855,2249,3.855,2250,2.597,2251,3.855,2252,2.207,2253,6.536,2254,5.696,2255,2.597,2256,5.089,2257,2.597,2258,2.207,2259,3.855,2260,3.855,2261,1.758,2262,1.95,2263,2.597,2264,2.895,2265,5.148,2266,2.597,2267,2.597,2268,4.953,2269,3.276,2270,2.597,2271,3.276,2272,3.276,2273,3.855,2274,3.855,2275,2.597,2276,2.597,2277,3.855,2278,2.597,2279,4.598,2280,3.855,2281,3.855,2282,2.597,2283,3.855,2284,2.597,2285,4.598,2286,2.597,2287,2.597,2288,2.597,2289,2.597,2290,1.95,2291,2.61,2292,2.597,2293,4.598,2294,2.597,2295,2.597,2296,2.597,2297,2.597,2298,2.207,2299,2.597,2300,2.597,2301,2.597,2302,2.597,2303,2.597,2304,2.597,2305,2.597,2306,4.841,2307,5.696,2308,2.597,2309,3.855,2310,2.597,2311,4.598,2312,2.597,2313,3.855,2314,2.597,2315,2.597,2316,2.597,2317,2.597,2318,2.597,2319,2.597,2320,4.598,2321,2.597,2322,5.437,2323,2.597,2324,2.597,2325,2.597,2326,2.597,2327,3.855,2328,2.597,2329,2.597,2330,2.597,2331,2.597,2332,2.597,2333,2.597,2334,2.597,2335,2.597,2336,2.597,2337,2.597,2338,2.597,2339,2.597,2340,2.597,2341,2.597,2342,2.597,2343,2.597,2344,2.597,2345,3.855,2346,2.597,2347,1.95,2348,2.207,2349,2.597,2350,2.597,2351,2.597,2352,2.597,2353,2.597,2354,3.855,2355,2.597,2356,2.597,2357,2.597,2358,2.597,2359,2.597,2360,2.597,2361,2.597,2362,2.597,2363,2.597,2364,2.597,2365,2.597,2366,2.597,2367,2.597,2368,2.597,2369,2.597,2370,2.597,2371,2.597]],["title/classes/State.html",[0,0.255,1489,1.407]],["body/classes/State.html",[0,0.351,2,0.374,3,0.249,4,0.22,5,0.164,9,0.249,13,1.527,16,0.164,17,0.68,18,1.82,47,0.69,51,0.024,53,0.252,56,0.727,57,0.884,58,0.752,59,0.985,71,1.263,73,1.748,79,2.027,88,0.991,94,0.727,103,0.509,107,0.932,117,1.098,121,1.344,135,0.408,136,0.638,144,1.71,149,1.748,152,0.279,153,0.571,162,0.553,186,0.016,187,0.016,198,2.205,213,0.793,238,2.545,242,3.027,254,1.748,267,3.491,269,2.749,272,0.914,282,1.748,283,3.386,295,1.757,306,3.224,320,2.03,354,3.975,365,1.748,386,2.986,451,3.271,474,2.679,476,3.007,523,1.88,713,3.117,720,3.34,740,2.368,763,2.368,819,2.415,842,3.1,1010,1.88,1029,2.205,1345,2.986,1448,2.415,1479,4.515,1480,2.415,1485,3.628,1486,4.565,1487,4.565,1488,2.03,1489,2.675,1490,2.679,1491,2.679,1492,2.679,1493,4.282,1494,3.909,1495,2.415,1496,2.679,1497,2.679,1498,4.154,1499,2.679,1500,2.679,1501,2.679,1502,2.679,1503,4.409,1504,4.114,1505,3.628,1506,3.628,1507,4.857,1508,4.941,1509,4.409,1510,3.975,1511,2.679,1512,2.679,1513,2.679,1514,5.008,1515,2.679,1516,2.03,1517,4.941,1518,2.679,1519,2.679,1520,4.607,1521,5.063,1522,2.679,1523,4.857,1524,2.679,1525,2.679,1526,2.679,1527,3.628,1528,2.679,1529,3.628,1530,4.114,1531,2.679,1532,2.679,1533,2.679,1534,2.679,1535,2.679,1536,2.679,1537,2.679,1538,2.679,1539,2.679,1540,2.679,1541,2.679,1542,2.679,1543,2.679,1544,2.679,1545,2.679,1546,2.679,1547,2.03,1548,2.679,1549,4.114,1550,3.628,1551,2.679,1552,4.114,1553,2.679,1554,4.114,1555,3.628,1556,2.679,1557,2.679,1558,2.679,1559,2.679,1560,2.679,1561,2.679,1562,2.679,1563,2.679,1564,2.679,1565,2.679,1566,2.679,1567,3.628,1568,3.628,1569,3.628,1570,4.114,1571,3.386,1572,4.114,1573,3.628,1574,3.271,1575,3.271,1576,2.415,1577,2.205,1578,3.629,1579,2.679,1580,2.679,1581,2.679,1582,2.679,1583,2.679,1584,2.679,1585,2.679,2372,4.832,2373,4.832,2374,4.832,2375,4.832,2376,3.568,2377,3.568,2378,3.568,2379,3.568,2380,3.568,2381,3.568,2382,3.568,2383,3.568,2384,3.568,2385,3.032]],["title/classes/StateManager.html",[0,0.255,2386,2.167]],["body/classes/StateManager.html",[0,0.228,2,0.329,3,0.219,4,0.193,5,0.144,8,0.984,9,0.445,11,1.536,16,0.144,17,0.549,18,2.29,20,1.338,33,0.506,42,1.112,44,1.386,45,2.58,47,0.734,48,2.357,49,0.901,50,0.598,51,0.024,52,0.488,53,0.263,54,0.542,56,1.044,57,0.747,58,0.636,61,2.542,66,1.688,80,1.083,90,1.892,93,2.023,101,1.551,103,0.594,107,0.82,112,0.924,117,1.023,121,1.666,135,0.67,136,0.561,152,0.245,153,0.542,162,0.636,166,3.291,186,0.015,187,0.015,188,1.786,191,1.654,213,0.88,229,3.163,230,0.939,233,1.929,253,1.566,259,4.352,270,1.94,272,0.747,303,4.372,440,3.779,640,2.357,703,3.203,708,0.82,711,2.191,734,4.45,736,2.353,737,3.126,777,1.786,786,1.774,788,1.436,792,3.321,854,2.296,861,4.566,866,2.094,884,1.654,1030,1.436,1112,3.314,1307,3.764,1309,1.94,1311,2.357,1314,2.668,1318,2.357,1345,3.436,1404,3.321,1429,2.516,1433,3.163,1444,2.994,1445,2.668,1489,2.838,1623,3.759,1640,2.357,1688,3.759,1713,1.654,1725,3.759,1727,3.739,1794,2.668,1855,4.725,1881,3.759,1965,4.79,2105,2.668,2118,2.668,2246,2.357,2261,2.125,2290,2.357,2386,3.758,2387,5.966,2388,4.423,2389,5.121,2390,5.121,2391,5.56,2392,5.56,2393,5.56,2394,5.56,2395,5.56,2396,5.56,2397,4.423,2398,4.423,2399,4.423,2400,4.423,2401,4.423,2402,4.423,2403,3.139,2404,4.423,2405,5.121,2406,5.56,2407,5.121,2408,4.423,2409,5.56,2410,3.139,2411,3.139,2412,3.139,2413,4.423,2414,4.423,2415,3.139,2416,4.423,2417,3.139,2418,4.423,2419,3.139,2420,4.423,2421,3.139,2422,4.423,2423,3.139,2424,2.357,2425,5.56,2426,3.139,2427,3.139,2428,3.139,2429,3.139,2430,2.668,2431,3.139,2432,2.668,2433,3.139,2434,4.423,2435,4.423,2436,4.423,2437,3.139,2438,3.139,2439,3.139,2440,3.139,2441,3.139,2442,3.139,2443,3.139,2444,3.139,2445,3.139,2446,5.121,2447,3.139,2448,5.121,2449,3.139,2450,3.139,2451,3.139,2452,4.352,2453,3.759,2454,3.139,2455,3.139,2456,3.139,2457,3.139,2458,3.139,2459,3.139,2460,3.139,2461,3.139]],["title/classes/TracksMaterial.html",[0,0.255,2462,2.374]],["body/classes/TracksMaterial.html",[0,0.336,2,0.352,3,0.234,4,0.206,5,0.154,9,0.323,14,3.591,16,0.212,17,0.575,42,1.006,47,0.486,49,1.081,50,0.321,51,0.024,52,0.262,53,0.129,54,0.291,56,0.944,58,0.742,59,1.383,71,1.695,75,3.536,79,1.051,94,1.265,101,1.226,103,0.291,112,0.671,117,0.967,135,0.383,136,0.599,148,2.803,152,0.362,153,0.46,162,0.654,169,1.994,186,0.015,187,0.015,213,1.014,227,2.44,241,2.269,242,1.982,244,3.255,248,3.135,251,2.862,272,0.712,295,1.473,304,3.536,337,2.672,341,4.117,455,1.767,554,2.862,598,3.71,600,2.072,644,4.508,646,3.536,708,0.876,730,2.862,870,2.408,972,3.837,1146,4.007,1151,4.508,1306,2.862,1316,2.518,1333,2.27,1578,3.536,2291,2.27,2462,3.591,2463,2.518,2464,4.508,2465,4.508,2466,3.936,2467,4.631,2468,3.477,2469,2.85,2470,3.936,2471,5.102,2472,2.85,2473,5.102,2474,4.862,2475,2.85,2476,2.85,2477,2.85,2478,3.936,2479,3.936,2480,2.85,2481,2.85,2482,2.85,2483,2.85,2484,2.85,2485,2.85,2486,2.85,2487,2.85,2488,3.936,2489,3.936,2490,2.85,2491,2.85,2492,2.85,2493,2.85,2494,3.936,2495,3.936,2496,3.936,2497,3.936,2498,3.936,2499,3.936,2500,2.85,2501,3.936,2502,3.936,2503,3.936,2504,2.85,2505,3.936,2506,2.85,2507,2.85,2508,5.511,2509,3.936,2510,3.936,2511,3.936,2512,3.936,2513,3.936,2514,3.936,2515,3.936,2516,3.936,2517,3.936,2518,5.511,2519,2.85,2520,3.936,2521,2.85,2522,3.936,2523,2.85,2524,3.936,2525,2.85,2526,3.936,2527,2.85,2528,3.936,2529,2.85,2530,3.936,2531,2.85,2532,2.85,2533,2.85,2534,2.85,2535,2.85,2536,2.85,2537,2.85,2538,2.85,2539,2.85,2540,2.85,2541,2.85,2542,2.85,2543,2.85,2544,2.85,2545,2.85,2546,5.102,2547,4.508,2548,5.276,2549,5.276,2550,4.508,2551,4.862,2552,3.135,2553,4.508,2554,4.508,2555,5.511,2556,4.508,2557,4.862,2558,4.862,2559,2.85,2560,2.85,2561,2.85,2562,4.862,2563,2.85,2564,2.85,2565,4.508,2566,3.936,2567,2.85,2568,2.85,2569,2.85,2570,2.85,2571,2.85,2572,4.862,2573,3.936,2574,3.936,2575,4.862,2576,2.85,2577,2.85,2578,3.936,2579,2.85,2580,2.85,2581,2.85,2582,3.936,2583,2.85,2584,2.85,2585,4.508,2586,2.518,2587,2.85,2588,2.85,2589,2.85,2590,2.85,2591,3.936,2592,2.85,2593,2.85,2594,2.85,2595,2.85,2596,2.85,2597,2.85,2598,2.85,2599,2.85,2600,2.85,2601,2.85,2602,2.85,2603,2.85,2604,2.85,2605,2.85,2606,4.508,2607,3.936,2608,2.85,2609,2.85,2610,3.936,2611,2.85]],["title/classes/TracksMesh.html",[0,0.255,251,2.167]],["body/classes/TracksMesh.html",[0,0.323,2,0.332,3,0.221,4,0.195,5,0.145,9,0.31,14,3.481,16,0.204,17,0.552,33,0.508,42,1.117,47,0.71,49,1.048,50,0.303,51,0.024,52,0.247,53,0.255,54,0.274,56,0.645,58,0.731,59,1.369,71,1.67,75,3.869,79,0.991,94,1.242,101,1.189,103,0.446,112,0.745,117,1.054,135,0.362,136,0.565,148,2.733,152,0.347,153,0.446,162,0.638,169,2.063,186,0.015,187,0.015,213,1.007,227,3.096,241,2.52,242,2.387,244,3.636,248,3.01,251,3.178,272,0.691,295,1.428,304,3.447,337,2.641,341,4.261,455,1.666,554,3.767,598,3.95,600,1.955,644,4.413,646,2.748,708,1.162,730,3.632,870,2.564,972,3.767,1146,3.447,1151,4.413,1306,2.748,1316,2.375,1333,2.141,1578,3.447,2291,3.01,2462,3.01,2463,2.375,2464,3.779,2465,2.688,2466,2.688,2468,2.375,2469,2.688,2470,4.74,2471,5.521,2472,4.37,2473,5.432,2474,5.18,2475,3.779,2476,4.37,2477,4.37,2478,3.779,2479,3.779,2480,2.688,2481,2.688,2482,2.688,2483,2.688,2484,2.688,2485,2.688,2486,2.688,2487,2.688,2488,3.779,2489,4.74,2490,3.779,2491,3.779,2492,2.688,2493,2.688,2494,3.779,2495,3.779,2496,3.779,2497,3.779,2498,3.779,2499,3.779,2500,2.688,2501,3.779,2502,3.779,2503,3.779,2504,2.688,2505,3.779,2506,2.688,2507,2.688,2508,5.432,2509,3.779,2510,3.779,2511,3.779,2512,3.779,2513,3.779,2514,3.779,2515,3.779,2516,3.779,2517,3.779,2518,5.432,2519,2.688,2520,3.779,2521,2.688,2522,3.779,2523,2.688,2524,3.779,2525,2.688,2526,3.779,2527,2.688,2528,3.779,2529,2.688,2530,3.779,2531,2.688,2532,2.688,2533,2.688,2534,2.688,2535,2.688,2536,2.688,2537,2.688,2538,2.688,2539,2.688,2540,2.688,2541,2.688,2542,2.688,2543,2.688,2544,2.688,2545,2.688,2546,4.995,2547,4.37,2548,5.18,2549,5.18,2550,4.37,2551,4.74,2552,3.01,2553,4.37,2554,4.37,2555,5.432,2556,4.37,2557,4.74,2558,4.74,2559,2.688,2560,2.688,2561,2.688,2562,4.74,2563,2.688,2564,2.688,2565,4.37,2566,3.779,2567,2.688,2568,2.688,2569,2.688,2570,2.688,2571,2.688,2572,4.74,2573,3.779,2574,3.779,2575,4.74,2576,2.688,2577,2.688,2578,3.779,2579,2.688,2580,2.688,2581,2.688,2582,3.779,2583,2.688,2584,2.688,2585,4.37,2586,2.375,2587,2.688,2588,2.688,2589,2.688,2590,2.688,2591,3.779,2592,2.688,2593,2.688,2594,2.688,2595,2.688,2596,2.688,2597,2.688,2598,2.688,2599,2.688,2600,2.688,2601,2.688,2602,2.688,2603,2.688,2604,2.688,2605,2.688,2606,4.37,2607,3.779,2608,2.688,2609,2.688,2610,3.779,2611,2.688,2612,4.447,2613,4.447,2614,3.163,2615,3.163,2616,3.163,2617,3.163,2618,3.163,2619,3.163,2620,3.163,2621,3.163,2622,3.163,2623,3.163,2624,3.163]],["title/classes/URLOptionsManager.html",[0,0.255,2625,2.374]],["body/classes/URLOptionsManager.html",[0,0.203,2,0.294,3,0.335,4,0.172,5,0.32,8,0.877,9,0.421,11,1.296,16,0.128,17,0.506,20,1.78,24,1.372,33,0.466,35,3.324,42,1.146,47,0.681,50,0.613,51,0.024,52,0.457,53,0.266,54,0.508,57,0.709,58,0.466,59,1.193,62,2.518,64,3.261,66,1.557,80,1.161,88,1.465,101,1.22,103,0.575,107,1.065,112,0.812,126,1.535,135,0.669,144,1.443,152,0.318,153,0.537,162,0.691,176,3.436,186,0.013,187,0.013,191,2.147,213,0.812,230,1.013,233,1.535,238,2.147,253,1.443,254,1.372,258,1.431,272,0.898,282,2.586,325,2.733,372,2.103,512,4.647,523,2.147,547,1.198,586,3.463,588,3.463,684,2.186,711,1.198,715,2.748,717,2.518,736,2.331,746,4.19,752,2.759,778,2.518,852,2.187,854,2.138,865,3.794,866,2.112,867,4.21,872,2.318,873,2.318,874,2.78,876,1.593,917,2.318,1027,3.06,1030,1.864,1112,2.96,1195,1.372,1306,2.518,1409,1.73,1455,1.896,1489,1.123,1516,2.318,1547,3.19,1713,2.954,1719,3.06,1727,3.436,1949,3.06,2110,2.38,2196,3.463,2202,3.962,2221,2.38,2244,2.38,2246,3.06,2252,2.38,2306,3.463,2386,2.969,2430,3.463,2452,2.38,2625,2.759,2626,4.931,2627,5.277,2628,5.277,2629,4.805,2630,5.277,2631,5.277,2632,5.277,2633,4.075,2634,4.075,2635,4.075,2636,4.075,2637,2.8,2638,5.277,2639,4.075,2640,2.8,2641,4.484,2642,3.962,2643,4.973,2644,2.8,2645,5.607,2646,2.8,2647,5.133,2648,5.277,2649,5.277,2650,2.8,2651,4.075,2652,2.8,2653,4.075,2654,4.075,2655,4.973,2656,6.04,2657,4.083,2658,4.394,2659,4.075,2660,4.075,2661,2.8,2662,5.259,2663,3.463,2664,4.075,2665,2.8,2666,5.852,2667,4.075,2668,4.083,2669,2.8,2670,2.759,2671,2.38,2672,2.38,2673,2.103,2674,2.8,2675,2.38,2676,2.103,2677,4.075,2678,2.8,2679,2.8,2680,2.8,2681,2.8,2682,2.8,2683,2.8,2684,2.8,2685,1.73,2686,5.277,2687,4.805,2688,2.38,2689,2.8,2690,2.38,2691,2.8,2692,2.8,2693,4.075,2694,2.8,2695,2.8,2696,4.805,2697,2.8,2698,2.8,2699,2.8,2700,2.38,2701,2.38,2702,2.8,2703,2.8,2704,3.463,2705,2.8,2706,2.8,2707,4.075,2708,2.8,2709,2.8,2710,2.8,2711,2.8,2712,2.8,2713,2.38,2714,2.38,2715,2.8,2716,2.8,2717,2.8,2718,3.463,2719,2.8,2720,3.463,2721,2.8,2722,2.8,2723,2.8,2724,2.8,2725,2.8,2726,2.8,2727,2.8,2728,2.8,2729,2.8,2730,3.463,2731,3.06,2732,3.608,2733,4.075,2734,2.38,2735,2.8,2736,2.8,2737,2.8,2738,2.8,2739,2.38,2740,4.075,2741,4.075,2742,2.8,2743,4.075,2744,4.075,2745,2.8,2746,2.8,2747,2.8,2748,2.8,2749,2.8,2750,2.8,2751,2.8,2752,2.8,2753,2.8,2754,2.8,2755,2.8,2756,2.8,2757,4.075,2758,4.075,2759,4.075,2760,4.075,2761,4.075,2762,4.075,2763,3.463,2764,4.075,2765,2.8,2766,2.8,2767,4.075,2768,2.8,2769,2.8,2770,2.8,2771,2.8,2772,2.8]],["title/classes/VRManager.html",[0,0.255,2773,2.374]],["body/classes/VRManager.html",[0,0.222,2,0.321,3,0.213,4,0.188,5,0.14,6,2.653,8,0.96,9,0.405,11,1.342,12,1.637,13,1.859,14,2.942,15,3.904,16,0.14,17,0.54,18,1.903,20,1.845,22,3.793,23,4.293,24,1.373,25,3.263,26,5.125,27,3.263,28,4.2,29,3.106,30,3.263,31,3.263,32,3.263,33,0.497,34,4.129,35,2.289,36,3.263,38,3.793,39,3.263,40,3.793,41,3.793,42,1.097,44,0.96,45,2.628,47,0.738,49,0.886,50,0.526,51,0.024,52,0.43,53,0.267,54,0.504,56,0.624,57,0.678,58,0.578,60,2.602,61,1.4,71,0.8,74,2.299,79,1.362,80,0.726,81,3.693,82,2.602,83,3.97,84,2.475,85,2.758,86,5.723,87,2.602,88,1.207,89,3.924,90,1.31,91,2.602,92,2.129,93,1.987,94,1.229,95,2.602,96,3.106,97,2.845,98,3.588,99,3.588,100,2.602,101,1.465,102,2.602,103,0.56,104,2.073,105,2.073,106,2.299,107,0.8,108,2.602,109,2.602,110,1.946,112,0.958,113,2.299,115,1.892,117,0.786,119,2.602,120,1.892,121,1.153,122,2.299,123,2.602,124,2.299,125,1.613,126,1.903,127,2.299,128,1.742,129,2.602,130,2.299,131,4.36,133,3.263,134,2.686,135,0.578,136,0.547,138,1.892,139,2.073,140,1.892,142,2.299,143,2.299,144,1.946,145,2.299,146,2.299,147,2.299,148,1.5,149,1.5,150,1.892,152,0.239,153,0.504,154,4.293,161,2.299,164,2.602,180,2.602,186,0.014,187,0.014,213,0.873,229,3.303,230,0.629,241,1.5,242,2.484,272,0.78,288,3.529,295,1.403,306,1.5,344,1.31,378,3.693,386,2.686,444,4.293,466,1.892,516,2.602,524,1.892,547,2.162,854,1.538,870,1.228,949,2.602,1055,2.472,1303,2.602,1571,4.128,1633,4.673,1864,2.299,2261,2.073,2262,3.263,2385,2.602,2688,3.693,2773,2.942,2774,5.621,2775,4.412,2776,5.052,2777,5.052,2778,5.052,2779,5.052,2780,5.052,2781,5.052,2782,4.346,2783,5.498,2784,5.48,2785,6.339,2786,3.062,2787,5.498,2788,5.126,2789,4.673,2790,4.346,2791,4.346,2792,4.346,2793,6.339,2794,3.062,2795,4.346,2796,3.062,2797,3.062,2798,4.346,2799,3.062,2800,3.062,2801,4.293,2802,4.346,2803,3.062,2804,3.062,2805,3.062,2806,3.062,2807,4.346,2808,3.062,2809,3.062,2810,3.062,2811,3.062,2812,3.062,2813,4.346,2814,4.346,2815,5.052,2816,3.062,2817,5.052,2818,3.062,2819,3.062,2820,3.062,2821,3.062,2822,3.062,2823,3.062,2824,3.062,2825,3.062,2826,3.062,2827,3.062,2828,3.062,2829,3.062,2830,3.062,2831,3.062,2832,3.062,2833,3.062,2834,3.062,2835,3.062,2836,3.062,2837,3.062,2838,3.062,2839,3.062,2840,3.062,2841,3.062,2842,3.062,2843,4.346,2844,4.346,2845,3.062,2846,3.062,2847,3.062,2848,3.062,2849,3.062,2850,3.062,2851,3.062,2852,2.602,2853,3.062,2854,3.062,2855,3.062,2856,4.346,2857,3.062,2858,3.062,2859,3.062,2860,3.062]],["title/interfaces/Window.html",[219,1.321,2685,2.167]],["body/interfaces/Window.html",[0,0.202,3,0.312,4,0.105,5,0.263,9,0.119,10,1.721,11,1.517,12,1.327,13,0.732,16,0.186,17,0.346,20,1.527,24,1.416,28,2.385,29,1.365,33,0.319,35,2.66,44,1.795,45,1.529,49,0.349,50,0.337,51,0.024,52,0.542,53,0.156,55,1.529,56,1.259,57,0.731,58,0.319,59,1.305,61,2.407,62,2.177,64,2.177,66,1.65,69,2.008,71,0.447,76,0.973,77,3.585,79,0.873,80,1.162,83,2.004,84,2.474,85,0.783,88,1.65,89,2.309,92,1.365,94,0.718,96,2.742,97,2.19,98,2.177,101,0.644,103,0.536,107,0.728,110,1.582,112,0.762,117,0.939,120,1.057,121,1.683,125,1.856,135,0.707,136,0.63,138,2.761,140,1.721,144,2.068,149,0.838,152,0.134,153,0.621,162,0.668,166,1.467,169,1.272,176,3.183,186,0.009,187,0.009,188,1.585,191,0.901,194,1.057,196,2.091,213,0.731,219,1.327,220,2.004,221,0.973,222,1.158,223,3.364,224,1.585,227,0.901,228,1.886,229,0.973,230,1.011,231,2.091,232,2.645,235,1.585,236,2.993,238,0.901,253,1.437,254,0.838,257,2.19,258,1.457,260,1.057,261,1.437,266,2.367,270,1.057,272,0.881,281,3.355,282,2.474,283,2.177,284,2.367,285,4.071,286,2.993,287,1.454,288,0.973,292,1.585,314,2.367,315,2.367,316,4.625,317,2.091,318,2.367,320,0.973,325,2.004,344,2.969,365,0.838,398,3.243,438,1.158,440,0.901,441,1.454,469,1.192,474,2.091,503,2.367,513,1.057,518,1.454,520,1.454,523,2.66,546,1.721,547,1.192,549,1.285,554,1.057,598,1.057,624,2.091,627,2.385,628,1.467,629,2.383,630,0.901,632,2.091,650,1.886,684,1.582,707,1.585,708,1.527,711,2.161,715,2.19,717,1.057,734,1.158,736,2.157,737,2.347,745,2.385,754,1.285,763,0.838,778,1.057,786,2.026,788,1.274,822,1.158,852,2.098,854,2.103,864,2.091,865,3.32,866,1.529,868,2.542,873,2.004,874,1.467,876,3.183,877,1.285,883,1.285,885,2.645,917,0.973,933,1.285,970,4.071,985,0.973,995,1.285,1010,0.901,1030,2.489,1052,1.721,1054,2.309,1055,1.585,1058,2.542,1061,1.585,1073,1.057,1074,1.585,1076,1.158,1092,2.385,1094,1.886,1102,3.243,1112,2.579,1119,1.721,1146,2.509,1187,2.994,1195,0.838,1289,1.285,1296,1.886,1304,2.367,1322,2.645,1370,1.454,1371,1.454,1375,2.993,1378,1.454,1379,2.091,1380,2.309,1382,2.367,1383,1.454,1387,1.285,1392,2.748,1394,1.454,1396,1.454,1397,1.454,1399,2.748,1400,1.158,1401,2.367,1402,3.797,1404,2.091,1405,1.285,1409,2.509,1410,3.797,1413,1.285,1423,2.367,1424,3.243,1425,1.285,1426,1.454,1427,1.454,1429,2.004,1438,1.285,1455,1.158,1456,2.385,1458,3.952,1462,1.454,1470,1.454,1489,2.026,1495,2.385,1592,2.367,1596,1.285,1603,1.285,1610,2.509,1612,2.367,1716,1.454,1727,3.258,1733,1.454,1755,1.158,1897,1.454,1949,1.285,1964,1.454,2006,1.454,2097,2.091,2126,1.454,2127,1.454,2128,1.454,2145,1.285,2202,3.788,2203,1.454,2236,1.454,2239,1.454,2264,1.285,2265,1.454,2268,4.386,2269,1.454,2271,2.367,2272,1.454,2290,1.285,2291,1.158,2298,2.993,2347,2.645,2386,2.509,2453,1.454,2468,2.091,2552,1.158,2625,2.385,2658,2.091,2670,1.886,2671,1.454,2672,1.454,2685,3.121,2690,3.797,2714,1.454,2720,2.367,2731,3.355,2775,2.509,2861,1.454,2862,1.454,2863,1.711,2864,3.597,2865,2.367,2866,1.711,2867,1.711,2868,1.711,2869,1.711,2870,1.711,2871,1.711,2872,1.158,2873,1.285,2874,1.711,2875,1.711,2876,1.711,2877,3.522,2878,3.522,2879,1.711,2880,1.711,2881,1.711,2882,1.711,2883,2.785,2884,2.785,2885,1.711,2886,2.785,2887,3.522,2888,1.711,2889,3.522,2890,1.711,2891,1.711,2892,1.711,2893,1.711,2894,1.711,2895,1.711,2896,1.711,2897,1.711,2898,1.711,2899,1.711,2900,2.785,2901,1.711,2902,1.711,2903,1.711,2904,3.522,2905,1.711,2906,2.367,2907,1.711,2908,3.522,2909,1.711,2910,3.45,2911,2.785,2912,4.468,2913,4.468,2914,1.454,2915,1.711,2916,1.711,2917,1.711,2918,1.711,2919,1.711,2920,1.711,2921,2.785,2922,1.711,2923,1.711,2924,2.785,2925,1.711,2926,1.711,2927,1.711,2928,1.711,2929,1.711,2930,1.711,2931,3.522,2932,3.522,2933,1.711,2934,5.05,2935,1.711,2936,1.711,2937,1.711,2938,1.711,2939,1.711,2940,1.711,2941,1.711,2942,1.711,2943,1.711,2944,2.785,2945,2.785,2946,2.785,2947,2.785,2948,2.785,2949,1.711,2950,1.711,2951,1.711,2952,1.711,2953,1.711,2954,1.711,2955,1.711,2956,1.711,2957,1.711,2958,1.711,2959,1.711,2960,1.711,2961,3.522,2962,1.711,2963,3.522,2964,6.561,2965,4.79,2966,4.79,2967,4.79,2968,6.18,2969,4.06,2970,6.403,2971,4.79,2972,3.522,2973,1.711,2974,2.785,2975,1.711,2976,1.711,2977,4.468,2978,1.711,2979,2.785,2980,2.785,2981,4.79,2982,1.711,2983,1.711,2984,1.711,2985,1.711,2986,1.711,2987,1.711,2988,1.711,2989,2.785,2990,1.711,2991,1.711,2992,1.711,2993,1.711,2994,1.711,2995,1.711,2996,1.711,2997,1.711,2998,1.711,2999,1.711,3000,1.711,3001,1.711,3002,1.711,3003,1.454,3004,1.711,3005,4.06,3006,1.711,3007,1.711,3008,2.785,3009,2.785,3010,1.711,3011,1.711,3012,1.711,3013,3.522,3014,2.785,3015,1.711,3016,1.711,3017,1.711,3018,1.711,3019,1.711,3020,1.711,3021,3.522,3022,1.711,3023,2.785,3024,2.785,3025,1.711,3026,2.785,3027,1.711,3028,1.711,3029,1.711,3030,1.711,3031,1.711,3032,1.711,3033,1.711,3034,1.711,3035,1.711,3036,1.711,3037,1.711,3038,1.711,3039,4.071,3040,1.711,3041,3.522,3042,1.711,3043,1.711,3044,1.711,3045,3.522,3046,1.454,3047,1.711,3048,1.711,3049,1.711,3050,1.711,3051,1.711,3052,1.711,3053,1.711,3054,1.711,3055,1.711,3056,1.711,3057,1.711,3058,1.711,3059,1.711,3060,1.711,3061,1.711,3062,1.711,3063,1.711,3064,1.711,3065,1.711,3066,1.711,3067,1.711,3068,1.711,3069,1.711,3070,1.711,3071,1.711,3072,1.711,3073,1.711,3074,2.785,3075,1.711,3076,1.711,3077,1.711,3078,1.711,3079,1.711,3080,1.711,3081,1.454,3082,1.711,3083,1.711,3084,1.711,3085,1.711,3086,1.711,3087,1.454,3088,1.711,3089,1.711,3090,1.711,3091,1.711,3092,1.454,3093,1.711,3094,1.711,3095,1.711,3096,1.454,3097,1.711,3098,1.711,3099,2.785,3100,1.711,3101,1.711,3102,1.711,3103,1.711,3104,1.711,3105,1.711,3106,1.711,3107,1.711,3108,1.711,3109,1.711,3110,2.785,3111,1.711,3112,1.711,3113,1.711,3114,1.711,3115,2.785,3116,2.785,3117,1.711,3118,1.711,3119,1.711,3120,1.711]],["title/classes/XRManager.html",[0,0.255,15,1.995]],["body/classes/XRManager.html",[0,0.243,2,0.351,3,0.233,4,0.206,5,0.153,6,2.773,8,1.048,9,0.418,10,3.707,11,1.321,12,1.741,13,1.978,15,2.63,16,0.153,17,0.574,24,1.427,25,3.979,26,5.306,27,3.979,28,4.388,29,3.296,30,4.292,31,3.979,32,3.979,33,0.529,34,4.292,35,2.791,36,3.472,38,4.292,39,3.472,40,4.292,41,3.979,42,0.727,44,1.449,45,2.706,46,3.929,47,0.721,49,0.942,50,0.547,51,0.024,52,0.447,53,0.264,54,0.552,56,0.942,57,0.621,58,0.529,59,0.682,61,2.114,79,1.048,80,0.559,83,4.093,84,2.266,85,3.161,88,1.587,89,4.154,90,2.267,92,2.801,93,2.614,94,1.165,96,3.263,97,3.04,98,3.834,99,3.834,101,1.47,103,0.578,104,3.13,105,3.587,106,3.472,107,1.385,110,2.294,112,0.938,113,3.472,115,2.857,120,2.857,121,1.741,122,3.472,124,3.472,125,2.791,126,1.996,127,3.472,128,2.63,130,2.512,131,4.505,133,3.472,134,2.857,135,0.383,136,0.598,138,3.532,139,2.265,140,2.068,141,2.843,142,2.512,143,2.512,144,1.184,145,3.979,146,2.512,147,2.512,148,1.639,149,1.639,150,2.068,152,0.361,153,0.552,155,2.512,161,2.512,162,0.529,176,1.903,186,0.015,187,0.015,213,0.67,242,1.431,272,0.712,295,0.929,386,2.068,547,1.431,597,2.512,626,3.472,684,1.048,711,1.431,779,2.512,788,1.53,1329,2.843,1547,2.63,2109,2.843,2113,2.843,2245,2.843,2247,2.843,2258,2.843,2261,2.265,2262,2.512,2432,2.843,2713,2.843,2775,3.707,2872,4.68,3121,3.346,3122,5.299,3123,3.346,3124,3.346,3125,3.346,3126,3.346,3127,3.346,3128,3.346,3129,3.346,3130,4.624,3131,3.346,3132,3.346,3133,4.624,3134,4.624,3135,4.624,3136,3.346,3137,3.346,3138,3.346,3139,3.346,3140,5.299,3141,3.346,3142,3.346,3143,3.346,3144,4.624,3145,3.346,3146,3.346,3147,5.716,3148,3.346,3149,4.624,3150,3.346,3151,3.346,3152,3.346,3153,3.346,3154,3.346,3155,3.346,3156,3.346,3157,3.346,3158,3.346]],["title/changelog.html",[115,1.813,3159,2.203,3160,2.934]],["body/changelog.html",[0,0.335,1,1.069,3,0.299,4,0.097,5,0.177,10,3.592,11,1.468,15,1.484,17,0.48,29,0.774,35,0.832,42,0.724,44,1.212,45,1.255,49,0.994,51,0.011,52,0.26,53,0.148,54,0.336,55,1.613,57,0.35,58,0.381,63,2.502,64,2.391,66,1.872,69,1.767,73,2.098,76,1.484,77,2.901,79,1.044,83,0.899,84,3.283,89,1.896,93,0.722,94,0.94,101,1.179,105,4.268,110,0.559,117,0.602,125,1.374,128,2.436,135,0.49,139,2.899,148,1.633,150,0.976,162,0.298,166,2.038,169,2.14,170,1.766,176,0.899,186,0.009,187,0.009,191,0.832,194,1.612,198,3.749,202,1.186,213,0.482,219,1.457,223,3.015,224,1.896,227,0.832,228,1.069,229,2.901,230,1.07,231,1.186,235,0.899,238,0.832,241,0.774,253,0.559,257,2.259,258,1.066,261,0.923,281,1.186,282,1.278,288,0.899,295,0.439,302,1.342,303,3.592,317,1.186,337,2.403,338,2.256,341,2.849,344,2.527,350,2.217,364,1.342,365,0.774,366,1.342,379,2.217,389,2.201,390,2.832,397,3.688,438,2.256,440,3.156,453,1.766,455,1.755,465,3.287,466,0.976,469,2.331,470,1.069,476,1.278,487,2.391,512,2.502,513,1.612,543,1.069,546,0.976,547,1.973,548,3.287,564,3.639,578,1.186,589,1.186,598,1.612,603,1.342,617,2.256,627,2.619,628,0.832,629,1.957,635,1.186,642,0.976,646,1.612,661,3.462,684,2.13,707,1.896,708,1.865,715,1.278,717,0.976,720,3.008,727,1.342,730,1.612,733,1.766,736,2.515,737,2.669,740,0.774,745,1.766,746,3.781,752,2.256,763,0.774,768,1.959,780,1.069,786,1.85,788,1.193,818,1.766,823,1.342,852,1.535,854,2.613,857,1.342,864,1.186,865,3.232,866,2.189,868,1.484,873,2.436,874,2.87,875,1.766,876,2.901,888,2.059,891,2.619,892,1.959,898,1.342,901,1.069,907,1.069,916,1.342,919,2.905,933,1.186,961,1.342,968,2.256,972,0.976,985,0.899,988,0.976,992,0.976,997,1.342,999,1.342,1030,2.905,1032,1.484,1055,1.484,1058,0.899,1061,2.901,1070,3.121,1093,0.976,1101,1.766,1112,0.774,1118,1.342,1119,0.976,1130,1.186,1131,2.502,1141,1.342,1187,0.899,1195,0.774,1223,2.832,1288,1.186,1293,1.342,1296,1.069,1315,2.502,1317,1.186,1386,1.342,1390,1.959,1399,2.899,1405,1.959,1408,1.342,1409,0.976,1424,1.069,1425,1.186,1429,2.201,1433,1.484,1438,1.186,1456,1.069,1458,1.186,1459,2.217,1489,2.046,1494,0.976,1516,1.484,1547,2.201,1571,0.976,1574,2.256,1577,0.976,1601,1.186,1603,2.502,1674,1.342,1678,1.186,1694,1.342,1698,2.832,1704,1.186,1713,2.785,1727,1.896,1737,4.284,1755,1.069,1864,1.959,1872,1.342,1905,2.832,1936,1.342,1937,4.334,1965,3.462,1984,3.639,1988,2.832,2030,1.069,2033,1.342,2044,1.342,2086,2.502,2097,1.186,2142,1.959,2145,2.502,2186,1.959,2189,1.342,2202,1.069,2228,2.832,2264,1.186,2268,1.186,2348,1.342,2552,1.069,2641,2.217,2642,4.555,2647,4.493,2655,3.918,2657,1.342,2658,1.186,2663,2.217,2685,1.612,2704,1.342,2732,1.186,2734,2.217,2773,1.069,2775,3.015,2784,1.342,2801,2.217,2852,1.342,2864,3.663,2906,1.342,2910,1.342,2914,1.342,3039,1.342,3046,3.918,3087,4.334,3092,5.586,3096,1.342,3159,1.186,3161,1.58,3162,1.58,3163,1.58,3164,1.58,3165,1.58,3166,1.58,3167,2.609,3168,1.342,3169,3.332,3170,4.282,3171,1.58,3172,3.918,3173,4.282,3174,3.121,3175,1.58,3176,3.332,3177,2.609,3178,1.58,3179,1.58,3180,1.342,3181,1.58,3182,1.58,3183,1.58,3184,3.868,3185,2.609,3186,6.474,3187,1.58,3188,2.609,3189,1.58,3190,1.58,3191,1.186,3192,1.58,3193,1.58,3194,1.58,3195,5.447,3196,1.58,3197,1.58,3198,1.58,3199,1.58,3200,2.609,3201,1.58,3202,1.58,3203,1.342,3204,3.639,3205,1.58,3206,6.858,3207,1.58,3208,6.305,3209,2.609,3210,1.58,3211,1.58,3212,1.58,3213,4.282,3214,1.58,3215,1.58,3216,6.884,3217,1.58,3218,4.878,3219,1.58,3220,1.58,3221,1.58,3222,3.868,3223,1.58,3224,1.58,3225,1.58,3226,2.832,3227,1.342,3228,1.58,3229,1.58,3230,1.58,3231,1.58,3232,1.58,3233,1.58,3234,1.58,3235,2.609,3236,2.609,3237,5.1,3238,1.58,3239,1.58,3240,3.868,3241,1.58,3242,1.58,3243,1.58,3244,2.609,3245,1.58,3246,2.609,3247,1.58,3248,1.58,3249,1.58,3250,5.706,3251,1.58,3252,1.58,3253,1.58,3254,1.58,3255,1.58,3256,4.611,3257,3.868,3258,1.58,3259,3.332,3260,1.58,3261,1.58,3262,1.58,3263,1.58,3264,1.58,3265,1.58,3266,1.58,3267,1.58,3268,4.611,3269,1.58,3270,1.58,3271,1.58,3272,1.58,3273,1.58,3274,1.58,3275,1.58,3276,1.58,3277,1.58,3278,3.332,3279,1.58,3280,1.58,3281,4.282,3282,2.609,3283,1.58,3284,1.58,3285,1.58,3286,1.58,3287,1.58,3288,1.58,3289,5.99,3290,2.609,3291,2.832,3292,1.58,3293,1.58,3294,1.58,3295,1.58,3296,2.609,3297,3.332,3298,2.217,3299,1.58,3300,1.58,3301,3.332,3302,1.58,3303,3.868,3304,1.58,3305,1.58,3306,1.58,3307,1.58,3308,1.58,3309,1.58,3310,1.58,3311,1.342,3312,1.58,3313,1.58,3314,1.58,3315,1.58,3316,1.58,3317,1.58,3318,1.58,3319,1.58,3320,1.58,3321,1.58,3322,1.58,3323,1.58,3324,1.58,3325,1.58,3326,1.58,3327,1.58,3328,1.58,3329,1.58,3330,3.868,3331,1.58,3332,1.58,3333,2.609,3334,4.282,3335,1.58,3336,1.58,3337,1.58,3338,1.58,3339,1.58,3340,1.58,3341,1.58,3342,1.58,3343,1.58,3344,1.58,3345,1.58,3346,2.609,3347,1.58,3348,1.58,3349,1.58,3350,4.493,3351,1.58,3352,1.58,3353,1.58,3354,1.58,3355,3.332,3356,1.58,3357,1.58,3358,1.58,3359,3.868,3360,1.58,3361,2.609,3362,1.58,3363,1.58,3364,1.58,3365,1.58,3366,1.58,3367,1.58,3368,1.58,3369,1.58,3370,2.609,3371,1.58,3372,1.58,3373,1.58,3374,1.58,3375,1.58,3376,1.58,3377,1.58,3378,1.58,3379,1.58,3380,1.58,3381,1.58,3382,1.58,3383,1.58,3384,1.58,3385,1.58,3386,3.332,3387,1.58,3388,1.58,3389,1.58,3390,1.58,3391,3.332,3392,1.58,3393,1.58,3394,1.58,3395,1.58,3396,4.611,3397,1.58,3398,4.611,3399,1.58,3400,1.58,3401,1.58,3402,1.58,3403,1.58,3404,1.58,3405,2.609,3406,3.332,3407,2.609,3408,2.609,3409,3.332,3410,4.282,3411,3.332,3412,3.332,3413,3.332,3414,3.332,3415,1.58,3416,2.609,3417,2.609,3418,2.609,3419,1.58,3420,1.58,3421,3.868,3422,3.332,3423,2.609,3424,1.58,3425,1.58,3426,2.609,3427,2.609,3428,2.609,3429,1.58,3430,1.58,3431,1.58,3432,1.58,3433,1.58,3434,3.332,3435,3.332,3436,3.332,3437,3.332,3438,3.332,3439,3.332,3440,1.58,3441,1.58,3442,1.58,3443,1.58,3444,2.609,3445,3.332,3446,3.332,3447,3.332,3448,1.58,3449,3.332,3450,2.609,3451,3.332,3452,3.332,3453,3.332,3454,2.609,3455,3.332,3456,3.332,3457,2.832,3458,3.868,3459,3.332,3460,3.332,3461,3.332,3462,3.332,3463,1.58,3464,1.58,3465,3.332,3466,2.609,3467,2.609,3468,2.609,3469,3.332,3470,3.332,3471,2.609,3472,2.217,3473,2.609,3474,1.58,3475,1.58,3476,1.58,3477,1.58,3478,1.58,3479,1.58,3480,1.58,3481,1.58,3482,1.58,3483,1.58,3484,1.58,3485,1.58,3486,1.58,3487,1.58,3488,1.58,3489,1.58,3490,2.609,3491,1.58,3492,1.58,3493,1.58,3494,1.342,3495,1.58,3496,1.58,3497,1.58,3498,1.58,3499,1.58,3500,1.58,3501,1.58,3502,1.58,3503,1.58,3504,1.58,3505,1.58,3506,1.58,3507,1.58,3508,2.609,3509,1.58,3510,1.58,3511,1.58,3512,1.58,3513,2.832,3514,1.58,3515,1.58,3516,1.58,3517,1.58,3518,1.58,3519,1.58,3520,1.58,3521,1.58,3522,4.611,3523,1.58,3524,1.58,3525,1.58,3526,1.58,3527,1.58,3528,1.58,3529,1.58,3530,1.58,3531,1.58,3532,2.609,3533,1.58,3534,1.58,3535,1.58,3536,1.58,3537,3.332,3538,1.58,3539,1.58,3540,1.58,3541,1.58,3542,1.58,3543,1.58,3544,1.58,3545,1.58,3546,2.609,3547,1.58,3548,1.58,3549,1.58,3550,1.58,3551,1.58,3552,1.58,3553,1.58,3554,1.58,3555,1.58,3556,1.58,3557,1.58,3558,1.58,3559,1.58,3560,1.58,3561,1.58,3562,1.58,3563,1.58,3564,1.58,3565,1.58,3566,1.58,3567,1.58,3568,1.58,3569,1.342,3570,1.58,3571,1.58,3572,1.58,3573,3.332,3574,1.58,3575,1.58,3576,1.58,3577,1.58,3578,1.58,3579,1.342,3580,1.58,3581,2.609,3582,1.58,3583,1.58,3584,1.58,3585,1.58,3586,1.58,3587,1.58,3588,1.58,3589,1.58,3590,1.58,3591,1.58,3592,1.58,3593,1.58,3594,1.58,3595,1.58,3596,1.58,3597,1.58,3598,1.58,3599,1.58,3600,1.58,3601,2.609,3602,1.58,3603,1.58,3604,1.58,3605,1.58,3606,3.332,3607,1.58,3608,1.58,3609,1.58,3610,1.58,3611,1.58,3612,1.58,3613,1.58,3614,1.58,3615,1.58,3616,1.58,3617,1.58,3618,2.609,3619,1.58,3620,1.58,3621,1.58,3622,1.58,3623,1.58,3624,1.58,3625,1.58,3626,1.58,3627,1.342,3628,1.58,3629,1.58,3630,1.58,3631,1.58,3632,3.868,3633,1.58,3634,1.58,3635,1.58,3636,1.58,3637,1.58,3638,2.609,3639,1.58,3640,1.58,3641,1.58,3642,1.58,3643,1.58,3644,1.58,3645,1.58,3646,1.58,3647,1.58,3648,2.609,3649,1.58,3650,1.58,3651,1.58,3652,1.58,3653,1.58,3654,1.58,3655,1.58,3656,1.58,3657,1.58,3658,1.58,3659,1.58,3660,1.58,3661,1.58,3662,1.58,3663,1.58,3664,1.58,3665,1.58,3666,1.58,3667,1.58,3668,1.58,3669,1.58,3670,1.58,3671,1.58,3672,1.58,3673,1.58,3674,1.58,3675,1.58,3676,1.58,3677,1.58,3678,1.58,3679,1.58,3680,1.58,3681,1.58,3682,1.58,3683,1.58,3684,1.58,3685,1.58,3686,1.58,3687,1.58,3688,1.58,3689,1.58,3690,1.58,3691,1.58,3692,1.58,3693,1.58,3694,1.58,3695,1.58,3696,1.58,3697,1.58,3698,1.58,3699,1.58,3700,1.58,3701,1.58,3702,1.58,3703,1.58,3704,1.342]],["title/coverage.html",[3705,4.058]],["body/coverage.html",[0,0.533,1,2.733,5,0.185,6,2.829,7,3.431,8,2.233,15,2.297,51,0.024,53,0.155,137,2.297,186,0.017,187,0.017,188,2.297,189,3.032,190,3.032,191,3.601,213,0.585,219,2.407,220,2.297,222,3.551,230,0.585,250,2.733,251,2.495,256,3.431,258,0.933,543,2.733,544,3.431,545,4.457,550,3.431,562,3.032,615,2.733,616,3.241,681,2.733,682,3.05,683,2.733,684,1.644,703,2.127,736,1.975,774,2.297,777,2.984,852,1.344,853,3.431,860,2.495,879,2.733,884,3.069,888,2.495,889,3.431,890,3.938,968,2.127,969,3.431,977,2.733,1025,3.032,1026,3.431,1027,3.032,1028,3.944,1032,2.297,1052,2.495,1110,3.032,1112,1.978,1286,2.733,1287,3.431,1363,3.431,1364,5.077,1379,3.032,1380,2.297,1414,3.032,1415,3.431,1444,2.733,1479,3.944,1480,3.944,1488,2.297,1489,1.62,1586,3.431,1587,3.431,1610,2.495,1611,3.431,1651,6.265,1673,3.431,1727,2.297,1829,3.032,1945,3.032,1946,3.032,1979,3.431,1980,3.431,2030,2.733,2031,3.431,2075,3.431,2184,3.032,2185,3.431,2226,3.032,2227,3.431,2386,2.495,2387,3.431,2424,3.032,2462,2.733,2463,3.938,2625,2.733,2626,3.938,2668,3.431,2670,2.733,2673,3.032,2676,3.032,2685,2.495,2773,2.733,2774,3.431,2861,4.457,2862,4.457,2872,2.733,2873,3.032,3227,3.431,3494,3.431,3627,3.431,3705,3.431,3706,4.038,3707,4.038,3708,4.038,3709,6.167,3710,5.826,3711,4.457,3712,4.457,3713,3.431,3714,6.835,3715,3.431,3716,3.431,3717,4.038,3718,4.457,3719,5.245,3720,3.431,3721,5.245,3722,5.245,3723,4.038,3724,3.431,3725,5.245,3726,5.245,3727,4.038,3728,4.038,3729,4.038,3730,4.038,3731,5.245,3732,4.038,3733,4.038,3734,4.038,3735,4.038,3736,5.245,3737,4.038,3738,4.038,3739,4.038,3740,4.038,3741,5.245,3742,4.038,3743,4.038,3744,5.245,3745,5.245,3746,4.038,3747,4.038,3748,4.038,3749,4.038,3750,4.038,3751,4.038,3752,4.951,3753,4.038,3754,5.245,3755,4.038,3756,5.245,3757,5.245,3758,4.038,3759,3.431,3760,4.038,3761,4.038,3762,4.038,3763,4.038]],["title/dependencies.html",[3174,1.986,3764,3.582]],["body/dependencies.html",[51,0.024,136,0.998,186,0.021,187,0.021,239,4.742,873,3.175,2763,4.742,2864,4.19,3704,4.742,3764,4.742,3765,5.58,3766,5.58,3767,5.58,3768,5.58,3769,5.58,3770,5.58,3771,5.58,3772,4.742,3773,5.58,3774,5.58,3775,5.58]],["title/miscellaneous/enumerations.html",[3776,1.669,3777,3.582]],["body/miscellaneous/enumerations.html",[6,2.174,8,1.97,10,3.885,16,0.249,51,0.023,53,0.208,58,0.795,83,3.083,89,3.083,138,3.885,186,0.021,187,0.021,224,3.083,230,0.785,258,1.253,440,2.855,455,3.312,616,3.35,617,3.669,682,2.479,683,4.256,684,1.699,705,4.721,713,3.576,733,3.669,778,3.35,780,4.256,868,3.083,1945,4.07,1946,4.721,1957,5.342,1970,4.606,2775,3.885,2865,4.606,2872,3.669,3776,3.083,3777,4.606,3778,5.42,3779,4.606,3780,5.42]],["title/index.html",[16,0.135,115,1.813,3159,2.203]],["body/index.html",[2,0.503,4,0.295,5,0.22,49,1.285,51,0.024,55,2.201,66,1.924,84,2.864,104,3.246,110,1.697,135,0.668,169,1.502,186,0.019,187,0.019,213,0.95,230,1.044,258,1.517,261,1.697,272,0.881,291,3.246,292,3.586,338,3.246,344,2.501,684,1.831,708,1.253,709,4.074,715,2.864,794,4.074,852,2.328,854,2.52,858,3.957,860,3.612,866,2.201,874,3.079,875,3.246,917,2.728,947,3.6,1112,3.353,1187,2.728,1424,3.246,1455,3.246,1457,4.074,1481,4.388,1604,3.6,2186,3.6,2347,4.388,2670,4.268,2700,4.967,2701,4.074,3081,4.967,3174,3.246,3180,4.967,3203,4.074,3204,4.074,3226,4.967,3298,5.358,3350,4.074,3457,4.074,3579,4.967,3781,4.795,3782,4.074,3783,4.795,3784,4.074,3785,4.795,3786,4.795,3787,5.844,3788,4.795,3789,4.795,3790,4.795,3791,5.844,3792,4.795,3793,4.795,3794,4.795,3795,4.795,3796,4.795,3797,4.795,3798,4.795,3799,4.795,3800,5.844,3801,4.795,3802,4.795,3803,4.795,3804,4.795,3805,4.795,3806,4.795,3807,4.795]],["title/modules.html",[3808,4.058]],["body/modules.html",[51,0.021,186,0.021,187,0.021,3808,4.858]],["title/overview.html",[3809,4.058]],["body/overview.html",[2,0.597,51,0.021,186,0.021,187,0.021,221,3.239,2586,4.276,3809,4.839,3810,5.694]],["title/properties.html",[17,0.523,3174,1.986]],["body/properties.html",[9,0.388,17,0.69,51,0.024,66,1.544,186,0.021,187,0.021,230,0.924,752,3.764,854,1.968,917,3.162,946,4.724,3168,4.724,3172,4.724,3782,4.724,3784,4.724,3811,5.559,3812,5.559,3813,5.559,3814,5.559,3815,5.559,3816,5.559,3817,5.559,3818,5.559,3819,5.559,3820,5.559,3821,5.559]],["title/miscellaneous/typealiases.html",[3776,1.669,3822,4.215]],["body/miscellaneous/typealiases.html",[16,0.233,50,0.485,51,0.02,53,0.278,66,1.961,94,1.232,96,2.486,110,1.796,125,2.672,128,2.886,169,1.895,186,0.02,187,0.02,189,3.809,190,4.54,204,5.138,233,2.519,344,2.171,524,3.135,616,3.135,682,2.765,683,4.093,684,1.59,710,5.138,736,2.66,737,3.434,746,3.434,786,2.035,852,1.689,884,2.672,992,3.135,1030,2.954,1390,3.809,1713,3.691,1736,5.138,1769,4.311,1778,4.311,2788,4.311,2789,4.311,3776,2.886,3779,4.311,3823,5.073,3824,5.073,3825,6.046,3826,7.063,3827,7.107,3828,6.046,3829,6.046,3830,6.046,3831,6.046,3832,6.046,3833,6.046,3834,6.046,3835,5.073,3836,6.046,3837,5.073,3838,5.073]],["title/miscellaneous/variables.html",[3191,3.165,3776,1.669]],["body/miscellaneous/variables.html",[5,0.313,8,1.638,16,0.267,35,2.115,49,0.818,51,0.024,52,0.314,53,0.245,57,0.917,58,0.793,66,1.115,69,1.714,79,2.14,80,1.172,84,2.561,90,1.718,101,0.928,107,1.366,112,0.581,117,0.625,144,1.421,162,0.664,176,2.973,186,0.017,187,0.017,213,1.005,220,2.284,223,2.482,225,3.412,226,3.412,227,2.115,230,0.581,232,5.127,258,1.423,269,3.63,272,0.907,337,1.611,389,2.284,405,3.015,453,2.718,466,3.23,481,3.412,482,3.412,535,4.441,562,3.924,629,2.096,682,1.836,684,1.821,730,2.482,786,1.611,852,1.337,865,2.115,866,1.512,867,3.015,870,1.611,872,2.973,1010,2.115,1054,2.284,1073,3.23,1433,2.284,1444,3.538,1456,3.538,1516,2.973,1627,4.621,1713,2.115,1737,3.015,1870,3.412,2424,3.924,2626,3.015,2642,3.015,2643,3.412,2662,3.412,2673,3.924,2675,3.412,2676,3.924,2718,4.441,2730,4.441,2731,4.363,2732,3.924,2739,4.441,2873,3.924,3003,3.412,3191,3.015,3291,3.412,3311,4.441,3472,3.412,3513,3.412,3569,3.412,3711,3.412,3712,4.938,3713,4.441,3715,4.441,3716,3.412,3718,3.412,3720,3.412,3724,3.412,3752,3.412,3759,4.441,3772,3.412,3776,2.284,3839,4.015,3840,4.015,3841,5.226,3842,4.015,3843,5.226,3844,4.015,3845,4.015,3846,4.015,3847,4.015,3848,4.015,3849,4.015,3850,4.015,3851,4.015,3852,4.015,3853,4.015,3854,4.015,3855,4.015,3856,4.015,3857,4.015,3858,4.015,3859,4.015,3860,4.015,3861,4.015,3862,4.015,3863,4.015,3864,4.015,3865,4.015,3866,4.015,3867,4.015,3868,4.015,3869,4.015,3870,4.015,3871,4.015,3872,4.015,3873,4.015,3874,4.015,3875,4.015,3876,4.015,3877,5.81,3878,4.015,3879,5.226,3880,4.015,3881,4.015,3882,4.015,3883,4.015,3884,6.154,3885,5.226,3886,5.226,3887,4.015,3888,4.015,3889,4.015,3890,6.154,3891,5.226,3892,4.015,3893,5.226,3894,4.015,3895,4.015,3896,4.015,3897,4.015,3898,5.226,3899,4.015,3900,4.015,3901,4.015,3902,4.015,3903,4.015,3904,4.015,3905,4.015,3906,4.015,3907,4.015,3908,4.015,3909,4.015,3910,4.015,3911,4.015,3912,4.015,3913,4.015,3914,4.015,3915,4.015,3916,4.015,3917,4.015,3918,4.015,3919,4.015,3920,4.015,3921,4.015,3922,4.015,3923,4.015,3924,4.015,3925,4.015]]],"invertedIndex":[["",{"_index":51,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":295,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["0.0",{"_index":1162,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0.0002",{"_index":1551,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.001",{"_index":2589,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["0.01",{"_index":174,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuUI.html":{}}}],["0.05",{"_index":1880,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["0.1",{"_index":597,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuUI.html":{},"classes/XRManager.html":{}}}],["0.149.0",{"_index":3775,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":323,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["0.5",{"_index":1553,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.7",{"_index":610,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.9",{"_index":3768,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":324,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["000",{"_index":2406,"title":{},"body":{"classes/StateManager.html":{}}}],["000000",{"_index":1149,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["000ab78",{"_index":3405,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":3184,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":3176,"title":{},"body":{"changelog.html":{}}}],["029d526",{"_index":3651,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":3170,"title":{},"body":{"changelog.html":{}}}],["037af62",{"_index":3367,"title":{},"body":{"changelog.html":{}}}],["03a1de4",{"_index":3553,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":3259,"title":{},"body":{"changelog.html":{}}}],["04dc545",{"_index":3663,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":3256,"title":{},"body":{"changelog.html":{}}}],["05ae1d6",{"_index":3249,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":3240,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":3235,"title":{},"body":{"changelog.html":{}}}],["07/07/2021",{"_index":151,"title":{},"body":{"classes/ARManager.html":{}}}],["07d8633",{"_index":3381,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":3333,"title":{},"body":{"changelog.html":{}}}],["0837334",{"_index":3602,"title":{},"body":{"changelog.html":{}}}],["08c8e00",{"_index":3352,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":3213,"title":{},"body":{"changelog.html":{}}}],["094261c",{"_index":3329,"title":{},"body":{"changelog.html":{}}}],["0980379",{"_index":3676,"title":{},"body":{"changelog.html":{}}}],["0a26fea",{"_index":3673,"title":{},"body":{"changelog.html":{}}}],["0b2dd8a",{"_index":3555,"title":{},"body":{"changelog.html":{}}}],["0b95e5b",{"_index":3491,"title":{},"body":{"changelog.html":{}}}],["0ba5097",{"_index":3322,"title":{},"body":{"changelog.html":{}}}],["0c48b27",{"_index":3270,"title":{},"body":{"changelog.html":{}}}],["0x000000",{"_index":1213,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0x8c8c8c",{"_index":3797,"title":{},"body":{"index.html":{}}}],["0xafafaf",{"_index":1262,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["0xffffff",{"_index":609,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ColorManager.html":{}}}],["1",{"_index":71,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["1.0",{"_index":1151,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["1.0.1",{"_index":3704,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.0.2",{"_index":3701,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3670,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":3631,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":3611,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":3583,"title":{},"body":{"changelog.html":{}}}],["1.4.1",{"_index":3770,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":3556,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":3484,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":3476,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":3475,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":3474,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":3714,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":73,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"classes/State.html":{},"changelog.html":{}}}],["10/10",{"_index":3726,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1651,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["1000",{"_index":269,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"miscellaneous/variables.html":{}}}],["10000",{"_index":427,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["1007.1048030984678",{"_index":3870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10244f7",{"_index":3321,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":1118,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["11/11",{"_index":3761,"title":{},"body":{"coverage.html":{}}}],["1100",{"_index":2055,"title":{},"body":{"classes/RKHelper.html":{}}}],["11000",{"_index":447,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["12",{"_index":3290,"title":{},"body":{"changelog.html":{}}}],["12/12",{"_index":3745,"title":{},"body":{"coverage.html":{}}}],["124a272",{"_index":3433,"title":{},"body":{"changelog.html":{}}}],["1261358",{"_index":3696,"title":{},"body":{"changelog.html":{}}}],["12814.982506255355",{"_index":3872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12834.18729094943",{"_index":3850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12b1754",{"_index":3262,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":3185,"title":{},"body":{"changelog.html":{}}}],["13/13",{"_index":3749,"title":{},"body":{"coverage.html":{}}}],["135.68755273443463",{"_index":3852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1381.1675900848818",{"_index":3868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14",{"_index":3205,"title":{},"body":{"changelog.html":{}}}],["14/14",{"_index":3739,"title":{},"body":{"coverage.html":{}}}],["14cdc8f",{"_index":3293,"title":{},"body":{"changelog.html":{}}}],["14d5f3a",{"_index":3326,"title":{},"body":{"changelog.html":{}}}],["14e4cbb",{"_index":3400,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":3287,"title":{},"body":{"changelog.html":{}}}],["15/15",{"_index":3744,"title":{},"body":{"coverage.html":{}}}],["15dd07c",{"_index":3388,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":3257,"title":{},"body":{"changelog.html":{}}}],["16/16",{"_index":3725,"title":{},"body":{"coverage.html":{}}}],["16ea0df",{"_index":3341,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":3241,"title":{},"body":{"changelog.html":{}}}],["1766.7693725879053",{"_index":3869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1788560",{"_index":3260,"title":{},"body":{"changelog.html":{}}}],["17909eb",{"_index":3692,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":3485,"title":{},"body":{"changelog.html":{}}}],["18.6.4",{"_index":3767,"title":{},"body":{"dependencies.html":{}}}],["18/18",{"_index":3738,"title":{},"body":{"coverage.html":{}}}],["18f8db2",{"_index":3654,"title":{},"body":{"changelog.html":{}}}],["19.874838262525053",{"_index":3858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19/19",{"_index":3756,"title":{},"body":{"coverage.html":{}}}],["1906976",{"_index":3690,"title":{},"body":{"changelog.html":{}}}],["1975d70",{"_index":3650,"title":{},"body":{"changelog.html":{}}}],["1].foreach((chargevalue",{"_index":813,"title":{},"body":{"classes/ColorOptions.html":{}}}],["1].oncomplete",{"_index":464,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["1a01248",{"_index":3414,"title":{},"body":{"changelog.html":{}}}],["1a17e99",{"_index":3452,"title":{},"body":{"changelog.html":{}}}],["1af6ae2",{"_index":3418,"title":{},"body":{"changelog.html":{}}}],["1dd0431",{"_index":3425,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":842,"title":{},"body":{"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["2.0",{"_index":946,"title":{},"body":{"classes/CoordinateHelper.html":{},"properties.html":{}}}],["2.0.0",{"_index":3404,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":3365,"title":{},"body":{"changelog.html":{}}}],["2.10.0",{"_index":3234,"title":{},"body":{"changelog.html":{}}}],["2.11.0",{"_index":3215,"title":{},"body":{"changelog.html":{}}}],["2.11.1",{"_index":3212,"title":{},"body":{"changelog.html":{}}}],["2.11.2",{"_index":3202,"title":{},"body":{"changelog.html":{}}}],["2.11.4",{"_index":3194,"title":{},"body":{"changelog.html":{}}}],["2.12.0",{"_index":3183,"title":{},"body":{"changelog.html":{}}}],["2.13.0",{"_index":3175,"title":{},"body":{"changelog.html":{}}}],["2.14.0",{"_index":3168,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["2.2.0",{"_index":3332,"title":{},"body":{"changelog.html":{}}}],["2.3.0",{"_index":3323,"title":{},"body":{"changelog.html":{}}}],["2.3.1",{"_index":3318,"title":{},"body":{"changelog.html":{}}}],["2.3.2",{"_index":3315,"title":{},"body":{"changelog.html":{}}}],["2.4.0",{"_index":3305,"title":{},"body":{"changelog.html":{}}}],["2.5.0",{"_index":3288,"title":{},"body":{"changelog.html":{}}}],["2.5.2",{"_index":3286,"title":{},"body":{"changelog.html":{}}}],["2.6.0",{"_index":3280,"title":{},"body":{"changelog.html":{}}}],["2.7.0",{"_index":3258,"title":{},"body":{"changelog.html":{}}}],["2.8.0",{"_index":3255,"title":{},"body":{"changelog.html":{}}}],["2.9.0",{"_index":3239,"title":{},"body":{"changelog.html":{}}}],["2/2",{"_index":3709,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1864,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["20/06/2021",{"_index":2805,"title":{},"body":{"classes/VRManager.html":{}}}],["20/20",{"_index":3760,"title":{},"body":{"coverage.html":{}}}],["2000",{"_index":535,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["2020",{"_index":3632,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":3289,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":3195,"title":{},"body":{"changelog.html":{}}}],["2023",{"_index":3169,"title":{},"body":{"changelog.html":{}}}],["20ef288",{"_index":3439,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":3236,"title":{},"body":{"changelog.html":{}}}],["21/21",{"_index":3741,"title":{},"body":{"coverage.html":{}}}],["22",{"_index":3171,"title":{},"body":{"changelog.html":{}}}],["22/22",{"_index":3758,"title":{},"body":{"coverage.html":{}}}],["2219a3e",{"_index":3597,"title":{},"body":{"changelog.html":{}}}],["22891.902734328327",{"_index":3874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["22a1ec8",{"_index":3656,"title":{},"body":{"changelog.html":{}}}],["23/23",{"_index":3754,"title":{},"body":{"coverage.html":{}}}],["234.03507981484574",{"_index":3861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["236bdf4",{"_index":3495,"title":{},"body":{"changelog.html":{}}}],["2371f75",{"_index":3463,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":302,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["24/24",{"_index":3757,"title":{},"body":{"coverage.html":{}}}],["24ecd77",{"_index":3211,"title":{},"body":{"changelog.html":{}}}],["25.884223757326",{"_index":3854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2516.987185037266",{"_index":3873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["257",{"_index":3516,"title":{},"body":{"changelog.html":{}}}],["25b2a9d",{"_index":3659,"title":{},"body":{"changelog.html":{}}}],["263.3640855132258",{"_index":3857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["26444f1",{"_index":3294,"title":{},"body":{"changelog.html":{}}}],["266af04",{"_index":3562,"title":{},"body":{"changelog.html":{}}}],["2681.277288705242",{"_index":3863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["26eff0e",{"_index":3356,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":3196,"title":{},"body":{"changelog.html":{}}}],["270.10019006776236",{"_index":3855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2700aaf",{"_index":3385,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":3281,"title":{},"body":{"changelog.html":{}}}],["28/06/2021",{"_index":141,"title":{},"body":{"classes/ARManager.html":{},"classes/XRManager.html":{}}}],["28/28",{"_index":3736,"title":{},"body":{"coverage.html":{}}}],["289",{"_index":3412,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":3214,"title":{},"body":{"changelog.html":{}}}],["29/06/2021",{"_index":3128,"title":{},"body":{"classes/XRManager.html":{}}}],["29/08/2020",{"_index":2804,"title":{},"body":{"classes/VRManager.html":{}}}],["29093a2",{"_index":3547,"title":{},"body":{"changelog.html":{}}}],["2933.619479808285",{"_index":3862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["29beae7",{"_index":3193,"title":{},"body":{"changelog.html":{}}}],["2c97f5c",{"_index":3440,"title":{},"body":{"changelog.html":{}}}],["2e16371",{"_index":3545,"title":{},"body":{"changelog.html":{}}}],["2e52c22",{"_index":3456,"title":{},"body":{"changelog.html":{}}}],["2fa310f",{"_index":3580,"title":{},"body":{"changelog.html":{}}}],["2rem",{"_index":1117,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["3",{"_index":304,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["3.0",{"_index":966,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["3.10.1",{"_index":3773,"title":{},"body":{"dependencies.html":{}}}],["3.3333",{"_index":2383,"title":{},"body":{"classes/State.html":{}}}],["3/3",{"_index":3722,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":516,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{}}}],["300",{"_index":497,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["3000",{"_index":405,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RKHelper.html":{},"miscellaneous/variables.html":{}}}],["3017ca9",{"_index":3379,"title":{},"body":{"changelog.html":{}}}],["303187a",{"_index":3429,"title":{},"body":{"changelog.html":{}}}],["3041166",{"_index":3467,"title":{},"body":{"changelog.html":{}}}],["30b0383",{"_index":3660,"title":{},"body":{"changelog.html":{}}}],["30b5160",{"_index":3543,"title":{},"body":{"changelog.html":{}}}],["312.02688693297375",{"_index":3853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["318.16541790248885",{"_index":3859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["32",{"_index":485,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["3255a65",{"_index":3265,"title":{},"body":{"changelog.html":{}}}],["33/33",{"_index":3728,"title":{},"body":{"coverage.html":{}}}],["336",{"_index":3345,"title":{},"body":{"changelog.html":{}}}],["3475836",{"_index":3586,"title":{},"body":{"changelog.html":{}}}],["34a783c",{"_index":3300,"title":{},"body":{"changelog.html":{}}}],["34d9b2c",{"_index":3353,"title":{},"body":{"changelog.html":{}}}],["3500",{"_index":3856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["359d353",{"_index":3564,"title":{},"body":{"changelog.html":{}}}],["36/36",{"_index":3748,"title":{},"body":{"coverage.html":{}}}],["364",{"_index":3302,"title":{},"body":{"changelog.html":{}}}],["36486b8",{"_index":3357,"title":{},"body":{"changelog.html":{}}}],["3756330",{"_index":3600,"title":{},"body":{"changelog.html":{}}}],["37df19f",{"_index":3635,"title":{},"body":{"changelog.html":{}}}],["3839578",{"_index":3466,"title":{},"body":{"changelog.html":{}}}],["3918159",{"_index":3678,"title":{},"body":{"changelog.html":{}}}],["39241a4",{"_index":3338,"title":{},"body":{"changelog.html":{}}}],["399ac77",{"_index":3703,"title":{},"body":{"changelog.html":{}}}],["3b1991c",{"_index":3560,"title":{},"body":{"changelog.html":{}}}],["3ce675f",{"_index":3594,"title":{},"body":{"changelog.html":{}}}],["3d",{"_index":763,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["3d1f91c",{"_index":3230,"title":{},"body":{"changelog.html":{}}}],["3daabc5",{"_index":3375,"title":{},"body":{"changelog.html":{}}}],["3e5d80d",{"_index":3415,"title":{},"body":{"changelog.html":{}}}],["3f6367f",{"_index":3596,"title":{},"body":{"changelog.html":{}}}],["4/4",{"_index":3721,"title":{},"body":{"coverage.html":{}}}],["40/40",{"_index":3731,"title":{},"body":{"coverage.html":{}}}],["4000",{"_index":1064,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["40bbba0",{"_index":3506,"title":{},"body":{"changelog.html":{}}}],["42/42",{"_index":3755,"title":{},"body":{"coverage.html":{}}}],["4262a1b",{"_index":3666,"title":{},"body":{"changelog.html":{}}}],["43",{"_index":3810,"title":{},"body":{"overview.html":{}}}],["43/43",{"_index":3734,"title":{},"body":{"coverage.html":{}}}],["448eb4f",{"_index":3190,"title":{},"body":{"changelog.html":{}}}],["455f536",{"_index":3524,"title":{},"body":{"changelog.html":{}}}],["45a0123",{"_index":3550,"title":{},"body":{"changelog.html":{}}}],["4603dbc",{"_index":3339,"title":{},"body":{"changelog.html":{}}}],["46910.7848593543",{"_index":3849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4698ea4",{"_index":3331,"title":{},"body":{"changelog.html":{}}}],["46b8aee",{"_index":3362,"title":{},"body":{"changelog.html":{}}}],["473a39c",{"_index":3276,"title":{},"body":{"changelog.html":{}}}],["4764196",{"_index":3637,"title":{},"body":{"changelog.html":{}}}],["477845f",{"_index":3182,"title":{},"body":{"changelog.html":{}}}],["4791f53",{"_index":3228,"title":{},"body":{"changelog.html":{}}}],["48130b2",{"_index":3668,"title":{},"body":{"changelog.html":{}}}],["4acca1a",{"_index":3470,"title":{},"body":{"changelog.html":{}}}],["4b10452",{"_index":3669,"title":{},"body":{"changelog.html":{}}}],["4c5fac9",{"_index":3263,"title":{},"body":{"changelog.html":{}}}],["4e41f72",{"_index":3309,"title":{},"body":{"changelog.html":{}}}],["4f80bd6",{"_index":3585,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":2586,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"overview.html":{}}}],["5/5",{"_index":3719,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2840,"title":{},"body":{"classes/VRManager.html":{}}}],["500",{"_index":300,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["5000",{"_index":481,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["50000",{"_index":741,"title":{},"body":{"classes/ColorOptions.html":{}}}],["50c2584",{"_index":3509,"title":{},"body":{"changelog.html":{}}}],["50fc5f7",{"_index":3384,"title":{},"body":{"changelog.html":{}}}],["5139c6e",{"_index":3621,"title":{},"body":{"changelog.html":{}}}],["5264.228603228927",{"_index":3848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5283e9a",{"_index":3679,"title":{},"body":{"changelog.html":{}}}],["5334996",{"_index":3380,"title":{},"body":{"changelog.html":{}}}],["5389282",{"_index":3539,"title":{},"body":{"changelog.html":{}}}],["545c956",{"_index":3283,"title":{},"body":{"changelog.html":{}}}],["5518a3e",{"_index":3232,"title":{},"body":{"changelog.html":{}}}],["5534.140362338047",{"_index":3860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["55cad7c",{"_index":3312,"title":{},"body":{"changelog.html":{}}}],["5628.5248735111745",{"_index":3865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["56c6eff",{"_index":3438,"title":{},"body":{"changelog.html":{}}}],["56f94f0",{"_index":3519,"title":{},"body":{"changelog.html":{}}}],["56ff275",{"_index":3552,"title":{},"body":{"changelog.html":{}}}],["5743adc",{"_index":3548,"title":{},"body":{"changelog.html":{}}}],["57e438f",{"_index":3517,"title":{},"body":{"changelog.html":{}}}],["58/58",{"_index":3708,"title":{},"body":{"coverage.html":{}}}],["5894cac",{"_index":3390,"title":{},"body":{"changelog.html":{}}}],["5928.901341784575",{"_index":3871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["595d9e5",{"_index":3460,"title":{},"body":{"changelog.html":{}}}],["5a562ab",{"_index":3515,"title":{},"body":{"changelog.html":{}}}],["5a8fe9f",{"_index":3473,"title":{},"body":{"changelog.html":{}}}],["5bdc562",{"_index":3479,"title":{},"body":{"changelog.html":{}}}],["5ea04f1",{"_index":3578,"title":{},"body":{"changelog.html":{}}}],["5f0f942",{"_index":3664,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":354,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["6/6",{"_index":3710,"title":{},"body":{"coverage.html":{}}}],["6000",{"_index":3875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60269f7",{"_index":3609,"title":{},"body":{"changelog.html":{}}}],["6062.586283740076",{"_index":3866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6085f50",{"_index":3435,"title":{},"body":{"changelog.html":{}}}],["608f529",{"_index":3317,"title":{},"body":{"changelog.html":{}}}],["612205c",{"_index":3697,"title":{},"body":{"changelog.html":{}}}],["62ae417",{"_index":3369,"title":{},"body":{"changelog.html":{}}}],["62bf178",{"_index":3242,"title":{},"body":{"changelog.html":{}}}],["646.5795158318147",{"_index":3864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6486982",{"_index":3540,"title":{},"body":{"changelog.html":{}}}],["65e657b",{"_index":3245,"title":{},"body":{"changelog.html":{}}}],["66388.95051168812",{"_index":3847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["66cbbc0",{"_index":3498,"title":{},"body":{"changelog.html":{}}}],["677.7571205763458",{"_index":3851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["68/68",{"_index":3753,"title":{},"body":{"coverage.html":{}}}],["689da29",{"_index":3408,"title":{},"body":{"changelog.html":{}}}],["68cd7ad",{"_index":3541,"title":{},"body":{"changelog.html":{}}}],["68f3d45",{"_index":3450,"title":{},"body":{"changelog.html":{}}}],["6943f79",{"_index":3629,"title":{},"body":{"changelog.html":{}}}],["69544e6",{"_index":3219,"title":{},"body":{"changelog.html":{}}}],["69d3f75",{"_index":3661,"title":{},"body":{"changelog.html":{}}}],["6a7e82f",{"_index":3299,"title":{},"body":{"changelog.html":{}}}],["6a834e8",{"_index":3501,"title":{},"body":{"changelog.html":{}}}],["6ace2f6",{"_index":3238,"title":{},"body":{"changelog.html":{}}}],["6c92e33",{"_index":3220,"title":{},"body":{"changelog.html":{}}}],["6cd5d53",{"_index":3446,"title":{},"body":{"changelog.html":{}}}],["6dbd797",{"_index":3417,"title":{},"body":{"changelog.html":{}}}],["6e919e1",{"_index":3441,"title":{},"body":{"changelog.html":{}}}],["6ef17d0",{"_index":3520,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":3231,"title":{},"body":{"changelog.html":{}}}],["7.20.12",{"_index":3766,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":3771,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":3717,"title":{},"body":{"coverage.html":{}}}],["717304e",{"_index":3368,"title":{},"body":{"changelog.html":{}}}],["73b7c27",{"_index":3674,"title":{},"body":{"changelog.html":{}}}],["7528ee0",{"_index":3502,"title":{},"body":{"changelog.html":{}}}],["75f829a",{"_index":3314,"title":{},"body":{"changelog.html":{}}}],["7632a18",{"_index":3525,"title":{},"body":{"changelog.html":{}}}],["789da8b",{"_index":3628,"title":{},"body":{"changelog.html":{}}}],["790.5876682946184",{"_index":3867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["79e6d7c",{"_index":3608,"title":{},"body":{"changelog.html":{}}}],["7a42b65",{"_index":3279,"title":{},"body":{"changelog.html":{}}}],["7b839e3",{"_index":3372,"title":{},"body":{"changelog.html":{}}}],["7bcd7ba",{"_index":3567,"title":{},"body":{"changelog.html":{}}}],["7d1ca22",{"_index":3700,"title":{},"body":{"changelog.html":{}}}],["7d2eb64",{"_index":3464,"title":{},"body":{"changelog.html":{}}}],["7d606b2",{"_index":3630,"title":{},"body":{"changelog.html":{}}}],["7d90d72",{"_index":3512,"title":{},"body":{"changelog.html":{}}}],["7e0870b",{"_index":3243,"title":{},"body":{"changelog.html":{}}}],["7e36462",{"_index":3254,"title":{},"body":{"changelog.html":{}}}],["7e9c733",{"_index":3342,"title":{},"body":{"changelog.html":{}}}],["7f35fdb",{"_index":3336,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":451,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["8/8",{"_index":3732,"title":{},"body":{"coverage.html":{}}}],["854e543",{"_index":3526,"title":{},"body":{"changelog.html":{}}}],["8559830",{"_index":3469,"title":{},"body":{"changelog.html":{}}}],["85d4a14",{"_index":3521,"title":{},"body":{"changelog.html":{}}}],["867d28a",{"_index":3360,"title":{},"body":{"changelog.html":{}}}],["872f708",{"_index":3462,"title":{},"body":{"changelog.html":{}}}],["8a0c0b1",{"_index":3437,"title":{},"body":{"changelog.html":{}}}],["8b994a7",{"_index":3420,"title":{},"body":{"changelog.html":{}}}],["8ba94e7",{"_index":3622,"title":{},"body":{"changelog.html":{}}}],["8cbcaa5",{"_index":3559,"title":{},"body":{"changelog.html":{}}}],["8d7b160",{"_index":3599,"title":{},"body":{"changelog.html":{}}}],["8e2eff4",{"_index":3554,"title":{},"body":{"changelog.html":{}}}],["8e7396f",{"_index":3397,"title":{},"body":{"changelog.html":{}}}],["8f3e8e1",{"_index":3640,"title":{},"body":{"changelog.html":{}}}],["9/9",{"_index":3723,"title":{},"body":{"coverage.html":{}}}],["90aea3c",{"_index":3445,"title":{},"body":{"changelog.html":{}}}],["9222e04",{"_index":3461,"title":{},"body":{"changelog.html":{}}}],["9276ef9",{"_index":3251,"title":{},"body":{"changelog.html":{}}}],["9474565",{"_index":3665,"title":{},"body":{"changelog.html":{}}}],["947f6bf",{"_index":3658,"title":{},"body":{"changelog.html":{}}}],["9540af5",{"_index":3570,"title":{},"body":{"changelog.html":{}}}],["98c7055",{"_index":3328,"title":{},"body":{"changelog.html":{}}}],["9908cc9",{"_index":3453,"title":{},"body":{"changelog.html":{}}}],["9a6c243",{"_index":3358,"title":{},"body":{"changelog.html":{}}}],["9a79692",{"_index":3468,"title":{},"body":{"changelog.html":{}}}],["9a88331",{"_index":3354,"title":{},"body":{"changelog.html":{}}}],["9bc48e0",{"_index":3261,"title":{},"body":{"changelog.html":{}}}],["9d109e5",{"_index":3284,"title":{},"body":{"changelog.html":{}}}],["9e3dc20",{"_index":3699,"title":{},"body":{"changelog.html":{}}}],["9eb21f5",{"_index":3684,"title":{},"body":{"changelog.html":{}}}],["9efd9ca",{"_index":3689,"title":{},"body":{"changelog.html":{}}}],["9f4cf7c",{"_index":3344,"title":{},"body":{"changelog.html":{}}}],["9ffb5e2",{"_index":3187,"title":{},"body":{"changelog.html":{}}}],["_attributes",{"_index":2477,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["_menusubfolder",{"_index":1083,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["a411631",{"_index":3448,"title":{},"body":{"changelog.html":{}}}],["a474af2",{"_index":3577,"title":{},"body":{"changelog.html":{}}}],["a4e8aaa",{"_index":3274,"title":{},"body":{"changelog.html":{}}}],["a5481e1",{"_index":3402,"title":{},"body":{"changelog.html":{}}}],["a54d302",{"_index":3233,"title":{},"body":{"changelog.html":{}}}],["a5eaa34",{"_index":3364,"title":{},"body":{"changelog.html":{}}}],["a6a1c19",{"_index":3634,"title":{},"body":{"changelog.html":{}}}],["a821e42",{"_index":3371,"title":{},"body":{"changelog.html":{}}}],["a8336ae",{"_index":3264,"title":{},"body":{"changelog.html":{}}}],["a8a8a8",{"_index":1249,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["a8f8353",{"_index":3561,"title":{},"body":{"changelog.html":{}}}],["aaed8f5",{"_index":3272,"title":{},"body":{"changelog.html":{}}}],["ab8feb4",{"_index":3643,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":3087,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["above",{"_index":2752,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["absolute",{"_index":1116,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ac0c4f1",{"_index":3565,"title":{},"body":{"changelog.html":{}}}],["acc",{"_index":1660,"title":{},"body":{"classes/LoadingManager.html":{}}}],["access",{"_index":3070,"title":{},"body":{"interfaces/Window.html":{}}}],["active",{"_index":93,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["activecamera",{"_index":259,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/StateManager.html":{}}}],["activeobject",{"_index":2229,"title":{},"body":{"classes/SelectionManager.html":{}}}],["activevariable",{"_index":188,"title":{"classes/ActiveVariable.html":{}},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["activevariable(0",{"_index":2409,"title":{},"body":{"classes/StateManager.html":{}}}],["activevariable(false",{"_index":2404,"title":{},"body":{"classes/StateManager.html":{}}}],["actual",{"_index":351,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuUI.html":{}}}],["add",{"_index":708,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["add('could",{"_index":2715,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["add(cut",{"_index":1232,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(data",{"_index":1598,"title":{},"body":{"classes/InfoLogger.html":{}}}],["add(k1.clone().multiplyscalar(h2",{"_index":1525,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k1.clone().multiplyscalar(half_h",{"_index":1528,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2",{"_index":1558,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(2",{"_index":1562,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(half_h",{"_index":1532,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3",{"_index":1559,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(2",{"_index":1563,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h",{"_index":1538,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h2",{"_index":1535,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k4",{"_index":1564,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(h",{"_index":1534,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(half_h",{"_index":1524,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(this.guiparameters.eventdata",{"_index":1199,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters.geometries",{"_index":1134,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters.labels",{"_index":1252,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[collectionname",{"_index":1220,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[labelid",{"_index":1266,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["add(this.guiparameters[name",{"_index":1161,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addchild",{"_index":1682,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addchild(name",{"_index":1708,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcollection",{"_index":1040,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addcollection(eventdatatype",{"_index":1069,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addcolor(this.guiparameters.labels",{"_index":1257,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[collectionname",{"_index":1224,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[labelid",{"_index":1272,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addcolor(this.guiparameters[name",{"_index":1157,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["addconfig",{"_index":1683,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addconfig('button",{"_index":1881,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["addconfig('checkbox",{"_index":1860,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('color",{"_index":1878,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('label",{"_index":1903,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig('slider",{"_index":1862,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addconfig(type",{"_index":1710,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcutoptions",{"_index":1831,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["addcutoptions(collectionnode",{"_index":1839,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["adddrawoptions",{"_index":1832,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["adddrawoptions(collectionnode",{"_index":1842,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["added",{"_index":1074,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["addeventdatafolder",{"_index":1041,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addeventdatatypefolder",{"_index":1042,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addeventdatatypefolder(typename",{"_index":1079,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addeventlistener('click",{"_index":2310,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('mousemove",{"_index":2308,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addeventlistener('touchstart",{"_index":2312,"title":{},"body":{"classes/SelectionManager.html":{}}}],["addface3",{"_index":566,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_1",{"_index":579,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_3",{"_index":582,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_4",{"_index":587,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_1",{"_index":572,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_2",{"_index":585,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_3",{"_index":575,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addgeometry",{"_index":1043,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addgeometry(object",{"_index":1082,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addgeometryfolder",{"_index":1044,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["adding",{"_index":125,"title":{},"body":{"classes/ARManager.html":{},"interfaces/EventDataLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["addlabel",{"_index":1045,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addlabel(labelid",{"_index":1089,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addlabelsfolder",{"_index":1046,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addlabelsfolder(configfunctions",{"_index":1096,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["addlabeltoeventobject",{"_index":1367,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["addlabeltoeventobject(label",{"_index":1374,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["addlabeltoobject",{"_index":3108,"title":{},"body":{"interfaces/Window.html":{}}}],["addloadableitem",{"_index":1617,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadableitem(id",{"_index":1629,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener",{"_index":1618,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener(callback",{"_index":1631,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck",{"_index":1619,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck(callback",{"_index":1634,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addoutlinepassforselection",{"_index":1297,"title":{},"body":{"classes/EffectsManager.html":{}}}],["addprogresslistener",{"_index":1620,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addprogresslistener(callback",{"_index":1636,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addrenderer",{"_index":2080,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":2102,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":2963,"title":{},"body":{"interfaces/Window.html":{}}}],["addtrack",{"_index":2612,"title":{},"body":{"classes/TracksMesh.html":{}}}],["addtrack(points",{"_index":2491,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["ae76d4a",{"_index":3387,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":379,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["against",{"_index":645,"title":{},"body":{"classes/ColorManager.html":{}}}],["aliases",{"_index":3823,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allcolorbyoptions",{"_index":685,"title":{},"body":{"classes/ColorOptions.html":{}}}],["alleventdata",{"_index":448,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.getobjectbyname('track",{"_index":507,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.traverse((eventobject",{"_index":471,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.visible",{"_index":514,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventsobject",{"_index":2729,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["allfacepositions",{"_index":565,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allfacepositions.concat",{"_index":568,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allgeometriesuiparameters",{"_index":3005,"title":{},"body":{"interfaces/Window.html":{}}}],["allow",{"_index":864,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["allowcustomvalue",{"_index":833,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["allowed",{"_index":990,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":1425,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["allows",{"_index":1950,"title":{},"body":{"classes/PresetView.html":{}}}],["allowselection(selectedobject",{"_index":3085,"title":{},"body":{"interfaces/Window.html":{}}}],["allowurloptions",{"_index":855,"title":{},"body":{"interfaces/Configuration.html":{}}}],["alltweens",{"_index":331,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(animationspheretween",{"_index":430,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(eventobjecttween",{"_index":359,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(scaletween",{"_index":383,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(tween",{"_index":461,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens[0].onstart",{"_index":431,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens[alltweens.length",{"_index":463,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["along",{"_index":291,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"index.html":{}}}],["alongaxisposition",{"_index":294,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alpha",{"_index":2139,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":1193,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/ScriptLoader.html":{}}}],["always",{"_index":3601,"title":{},"body":{"changelog.html":{}}}],["ambientlight",{"_index":2287,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":2295,"title":{},"body":{"classes/SelectionManager.html":{}}}],["angle",{"_index":303,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{},"changelog.html":{}}}],["angles",{"_index":904,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["anglesaresane",{"_index":894,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["anglesaresane(theta",{"_index":900,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["angular",{"_index":3204,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["animate",{"_index":281,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animateclippingwithcollision",{"_index":520,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animateevent",{"_index":321,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animateeventafterinterval",{"_index":225,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["animateeventwithclipping",{"_index":446,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animateeventwithcollision(tweenduration",{"_index":518,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animatepreset(animationpreset",{"_index":3104,"title":{},"body":{"interfaces/Window.html":{}}}],["animatethroughevent",{"_index":287,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animatewithcollision",{"_index":505,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animating",{"_index":266,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animation",{"_index":223,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["animationclipplane",{"_index":458,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationclipplane.constant",{"_index":459,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationclipplanes",{"_index":452,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationfunction",{"_index":504,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationfunction(tweenduration",{"_index":517,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationpreset",{"_index":220,"title":{"interfaces/AnimationPreset.html":{}},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["animations",{"_index":317,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animationsmanager",{"_index":256,"title":{},"body":{"interfaces/AnimationPreset.html":{},"coverage.html":{}}}],["animationsphere",{"_index":327,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween",{"_index":403,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween.chain(animationspheretweenclone",{"_index":429,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween.onupdate(onanimationsphereupdate",{"_index":424,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone",{"_index":426,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone.oncomplete",{"_index":435,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone.onupdate(onanimationsphereupdate",{"_index":428,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["another",{"_index":3693,"title":{},"body":{"changelog.html":{}}}],["antialias",{"_index":1317,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["antialiasing",{"_index":1293,"title":{},"body":{"classes/EffectsManager.html":{},"changelog.html":{}}}],["antialiasrender",{"_index":1298,"title":{},"body":{"classes/EffectsManager.html":{}}}],["antialiasrender(scene",{"_index":1324,"title":{},"body":{"classes/EffectsManager.html":{}}}],["any).geometry",{"_index":411,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.material.color",{"_index":511,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.material?.color",{"_index":510,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.xr",{"_index":3132,"title":{},"body":{"classes/XRManager.html":{}}}],["apache",{"_index":3816,"title":{},"body":{"properties.html":{}}}],["api",{"_index":3782,"title":{},"body":{"index.html":{},"properties.html":{}}}],["app",{"_index":3216,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":2201,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["appled",{"_index":993,"title":{},"body":{"classes/Cut.html":{}}}],["application",{"_index":3786,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":3891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applied",{"_index":470,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["applies",{"_index":923,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["apply",{"_index":717,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["applychargecoloroptions",{"_index":691,"title":{},"body":{"classes/ColorOptions.html":{}}}],["applyconfigstate",{"_index":1684,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyconfigstate(config",{"_index":1714,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyembedoption",{"_index":2628,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions",{"_index":2629,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions(defaulteventpath",{"_index":2644,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyhidewidgetsoptions",{"_index":2630,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applying",{"_index":3638,"title":{},"body":{"changelog.html":{}}}],["applymomcoloroptions",{"_index":692,"title":{},"body":{"classes/ColorOptions.html":{}}}],["applyoptions",{"_index":2631,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyvertexcoloroptions",{"_index":693,"title":{},"body":{"classes/ColorOptions.html":{}}}],["ar",{"_index":10,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["archive",{"_index":3569,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["archive.file(filepath).async('string",{"_index":3924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["archive.files",{"_index":3923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["archive.loadasync(file",{"_index":3921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argument",{"_index":3197,"title":{},"body":{"changelog.html":{}}}],["armanager",{"_index":1,"title":{"classes/ARManager.html":{}},"body":{"classes/ARManager.html":{},"changelog.html":{},"coverage.html":{}}}],["armanager.enabledomoverlay",{"_index":163,"title":{},"body":{"classes/ARManager.html":{}}}],["around",{"_index":2798,"title":{},"body":{"classes/VRManager.html":{}}}],["array",{"_index":523,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["array.from",{"_index":391,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["arraybuffer",{"_index":3003,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["arraycamera",{"_index":3127,"title":{},"body":{"classes/XRManager.html":{}}}],["arraycamera([camera.clone",{"_index":3153,"title":{},"body":{"classes/XRManager.html":{}}}],["arrays",{"_index":2343,"title":{},"body":{"classes/SelectionManager.html":{}}}],["aspect",{"_index":2558,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["aspect.x",{"_index":2588,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["aspects",{"_index":2884,"title":{},"body":{"interfaces/Window.html":{}}}],["assets/preset",{"_index":1977,"title":{},"body":{"classes/PresetView.html":{}}}],["assign",{"_index":3612,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":650,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["async",{"_index":35,"title":{},"body":{"classes/ARManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["atlas",{"_index":818,"title":{},"body":{"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["atlasquaternion",{"_index":895,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["attach",{"_index":1099,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["attempt",{"_index":3406,"title":{},"body":{"changelog.html":{}}}],["attribute",{"_index":972,"title":{},"body":{"classes/Cut.html":{},"classes/ScriptLoader.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{}}}],["attributename",{"_index":2336,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributes",{"_index":2291,"title":{},"body":{"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":2337,"title":{},"body":{"classes/SelectionManager.html":{}}}],["author",{"_index":3819,"title":{},"body":{"properties.html":{}}}],["available",{"_index":733,"title":{},"body":{"classes/ColorOptions.html":{},"classes/RendererManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["available/created",{"_index":2101,"title":{},"body":{"classes/RendererManager.html":{}}}],["averageprogress",{"_index":1664,"title":{},"body":{"classes/LoadingManager.html":{}}}],["await",{"_index":176,"title":{},"body":{"classes/ARManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["axes",{"_index":478,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["axeshelper",{"_index":2288,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":2297,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axis",{"_index":293,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{}}}],["azimuthal",{"_index":909,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["b",{"_index":2138,"title":{},"body":{"classes/RendererManager.html":{}}}],["b10bb7a",{"_index":3511,"title":{},"body":{"changelog.html":{}}}],["b46c49f",{"_index":3686,"title":{},"body":{"changelog.html":{}}}],["b52282f",{"_index":3536,"title":{},"body":{"changelog.html":{}}}],["b7a324a",{"_index":3529,"title":{},"body":{"changelog.html":{}}}],["b7e8da0",{"_index":3613,"title":{},"body":{"changelog.html":{}}}],["b8e88b8",{"_index":3504,"title":{},"body":{"changelog.html":{}}}],["b_first",{"_index":1511,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_last",{"_index":1506,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_middle",{"_index":1505,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["babel/core",{"_index":3765,"title":{},"body":{"dependencies.html":{}}}],["back",{"_index":578,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["back_1",{"_index":584,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_2",{"_index":580,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_3",{"_index":581,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_4",{"_index":583,"title":{},"body":{"classes/CMSObjects.html":{}}}],["background",{"_index":3361,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":752,"title":{},"body":{"classes/ColorOptions.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"properties.html":{}}}],["bb41683",{"_index":3378,"title":{},"body":{"changelog.html":{}}}],["bbcdf0c",{"_index":3533,"title":{},"body":{"changelog.html":{}}}],["bbea6b0",{"_index":3487,"title":{},"body":{"changelog.html":{}}}],["become",{"_index":142,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["before",{"_index":2259,"title":{},"body":{"classes/SelectionManager.html":{}}}],["being",{"_index":1603,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["better",{"_index":3398,"title":{},"body":{"changelog.html":{}}}],["bf98a24",{"_index":3324,"title":{},"body":{"changelog.html":{}}}],["big",{"_index":3680,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":3505,"title":{},"body":{"changelog.html":{}}}],["blob",{"_index":3910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blob([data",{"_index":3911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["block",{"_index":2733,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["bloom",{"_index":1292,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["boolean",{"_index":56,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["both",{"_index":2690,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":586,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["bound",{"_index":998,"title":{},"body":{"classes/Cut.html":{}}}],["bounded",{"_index":2808,"title":{},"body":{"classes/VRManager.html":{}}}],["bounds",{"_index":1577,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["box",{"_index":604,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer",{"_index":590,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.attributes.position",{"_index":591,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.computevertexnormals",{"_index":593,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxedges",{"_index":606,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject",{"_index":594,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":601,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":599,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":614,"title":{},"body":{"classes/CMSObjects.html":{}}}],["browser",{"_index":3537,"title":{},"body":{"changelog.html":{}}}],["browsers",{"_index":2147,"title":{},"body":{"classes/RendererManager.html":{}}}],["bufferattribute",{"_index":248,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["bufferattribute(new",{"_index":2508,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["bufferattribute).copyarray",{"_index":2518,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["buffergeometry",{"_index":241,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["buffergeometry().setfrompoints",{"_index":2836,"title":{},"body":{"classes/VRManager.html":{}}}],["bug",{"_index":3186,"title":{},"body":{"changelog.html":{}}}],["bugged",{"_index":3688,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":2347,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["build(obj",{"_index":3034,"title":{},"body":{"interfaces/Window.html":{}}}],["build(object",{"_index":3022,"title":{},"body":{"interfaces/Window.html":{}}}],["build:bundlethis",{"_index":3801,"title":{},"body":{"index.html":{}}}],["buildeventdata",{"_index":1368,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["buildeventdata(eventdata",{"_index":1377,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":2942,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters",{"_index":3076,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters(parameters",{"_index":3037,"title":{},"body":{"interfaces/Window.html":{}}}],["building",{"_index":3805,"title":{},"body":{"index.html":{}}}],["builds",{"_index":2941,"title":{},"body":{"interfaces/Window.html":{}}}],["bump",{"_index":3173,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":3298,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["bundled",{"_index":3799,"title":{},"body":{"index.html":{}}}],["button",{"_index":2789,"title":{},"body":{"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["buttons",{"_index":2426,"title":{},"body":{"classes/StateManager.html":{}}}],["c0af497",{"_index":3313,"title":{},"body":{"changelog.html":{}}}],["c1",{"_index":2846,"title":{},"body":{"classes/VRManager.html":{}}}],["c36a222",{"_index":3641,"title":{},"body":{"changelog.html":{}}}],["c39ecd3",{"_index":3653,"title":{},"body":{"changelog.html":{}}}],["c446567",{"_index":3465,"title":{},"body":{"changelog.html":{}}}],["c60b3c1",{"_index":3304,"title":{},"body":{"changelog.html":{}}}],["c7a35db",{"_index":3681,"title":{},"body":{"changelog.html":{}}}],["c897ab3",{"_index":3363,"title":{},"body":{"changelog.html":{}}}],["c91aa0e",{"_index":3271,"title":{},"body":{"changelog.html":{}}}],["c92d65f",{"_index":3422,"title":{},"body":{"changelog.html":{}}}],["c9781e5",{"_index":3493,"title":{},"body":{"changelog.html":{}}}],["c991e54",{"_index":3607,"title":{},"body":{"changelog.html":{}}}],["c9d4880",{"_index":3591,"title":{},"body":{"changelog.html":{}}}],["ca3cc2f",{"_index":3528,"title":{},"body":{"changelog.html":{}}}],["calculated",{"_index":819,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["calculation",{"_index":3416,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":97,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["callback",{"_index":96,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/typealiases.html":{}}}],["callback(averageprogress",{"_index":1666,"title":{},"body":{"classes/LoadingManager.html":{}}}],["callback(eventdata",{"_index":2951,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":2940,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(updatedvalue",{"_index":217,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["callbackfunction",{"_index":204,"title":{},"body":{"classes/ActiveVariable.html":{},"miscellaneous/typealiases.html":{}}}],["callbacks",{"_index":196,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["called",{"_index":1094,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["calling",{"_index":1716,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["calls",{"_index":3275,"title":{},"body":{"changelog.html":{}}}],["calo",{"_index":3188,"title":{},"body":{"changelog.html":{}}}],["calocluster",{"_index":3496,"title":{},"body":{"changelog.html":{}}}],["caloclusters",{"_index":3513,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["camera",{"_index":45,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["camera.near",{"_index":160,"title":{},"body":{"classes/ARManager.html":{}}}],["cameragroup",{"_index":25,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["cameranear",{"_index":72,"title":{},"body":{"classes/ARManager.html":{}}}],["camerapos",{"_index":1952,"title":{},"body":{"classes/PresetView.html":{}}}],["cameraposition",{"_index":2432,"title":{},"body":{"classes/StateManager.html":{},"classes/XRManager.html":{}}}],["cameras",{"_index":3040,"title":{},"body":{"interfaces/Window.html":{}}}],["cameratarget",{"_index":1953,"title":{},"body":{"classes/PresetView.html":{}}}],["canvas",{"_index":1119,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["canvas.appendchild(this.gui.domelement",{"_index":1121,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["canvaswrapper",{"_index":2155,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.appendchild(this.getmainrenderer().domelement",{"_index":2165,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetheight",{"_index":2160,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetwidth",{"_index":2157,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":1384,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["cartesian",{"_index":921,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["case",{"_index":1964,"title":{},"body":{"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["catch",{"_index":2732,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["catch((error",{"_index":2713,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/XRManager.html":{}}}],["cavern",{"_index":3846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cb2ec40",{"_index":3605,"title":{},"body":{"changelog.html":{}}}],["cb68283",{"_index":3447,"title":{},"body":{"changelog.html":{}}}],["cc04d5a",{"_index":3454,"title":{},"body":{"changelog.html":{}}}],["cdn",{"_index":3579,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["cell",{"_index":3189,"title":{},"body":{"changelog.html":{}}}],["cell/cluster",{"_index":3192,"title":{},"body":{"changelog.html":{}}}],["cfb1b6a",{"_index":3687,"title":{},"body":{"changelog.html":{}}}],["cg",{"_index":2848,"title":{},"body":{"classes/VRManager.html":{}}}],["chaining",{"_index":3606,"title":{},"body":{"changelog.html":{}}}],["chamber",{"_index":556,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":194,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changeable",{"_index":1066,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["changed",{"_index":193,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["changelog",{"_index":3160,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":627,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changing",{"_index":339,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["charge",{"_index":713,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"miscellaneous/enumerations.html":{}}}],["chargecolors",{"_index":686,"title":{},"body":{"classes/ColorOptions.html":{}}}],["chargevalue",{"_index":770,"title":{},"body":{"classes/ColorOptions.html":{}}}],["check",{"_index":343,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checkbox",{"_index":1769,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["checked",{"_index":1914,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{}}}],["checking",{"_index":1546,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["checks",{"_index":903,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["chi2",{"_index":1985,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["child",{"_index":661,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["child.findintree(name",{"_index":1820,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.name",{"_index":1827,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.nodelevel",{"_index":1747,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.parent",{"_index":1746,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(child.togglestate",{"_index":1766,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(value",{"_index":1765,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.togglestate",{"_index":1764,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.traverse((object",{"_index":663,"title":{},"body":{"classes/ColorManager.html":{}}}],["childindex",{"_index":1750,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["children",{"_index":1674,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["childrenactive",{"_index":1675,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childrentogglestate",{"_index":1676,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate",{"_index":1810,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.name",{"_index":1815,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.nodelevel",{"_index":1817,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["class",{"_index":0,"title":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"index.html":{},"overview.html":{}}}],["clean",{"_index":3366,"title":{},"body":{"changelog.html":{}}}],["cleanup",{"_index":3499,"title":{},"body":{"changelog.html":{}}}],["clear",{"_index":1047,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["clearing",{"_index":2946,"title":{},"body":{"interfaces/Window.html":{}}}],["clearinterval(intervalid",{"_index":2853,"title":{},"body":{"classes/VRManager.html":{}}}],["click",{"_index":2254,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":2352,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":3089,"title":{},"body":{"interfaces/Window.html":{}}}],["clipping",{"_index":440,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["clippingconstant",{"_index":442,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["clippingenabled",{"_index":2389,"title":{},"body":{"classes/StateManager.html":{}}}],["clippingopeningangle",{"_index":1954,"title":{},"body":{"classes/PresetView.html":{}}}],["clippingsetting",{"_index":1957,"title":{},"body":{"classes/PresetView.html":{},"miscellaneous/enumerations.html":{}}}],["clippingsetting.notforced",{"_index":1971,"title":{},"body":{"classes/PresetView.html":{}}}],["clippingstartangle",{"_index":1955,"title":{},"body":{"classes/PresetView.html":{}}}],["clone",{"_index":1523,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cloned",{"_index":127,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["close",{"_index":3478,"title":{},"body":{"changelog.html":{}}}],["closes",{"_index":3301,"title":{},"body":{"changelog.html":{}}}],["closest",{"_index":2369,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":3413,"title":{},"body":{"changelog.html":{}}}],["clusters",{"_index":3490,"title":{},"body":{"changelog.html":{}}}],["cms",{"_index":548,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["cmsloader",{"_index":3627,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["cmsobjects",{"_index":543,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"changelog.html":{},"coverage.html":{}}}],["code",{"_index":3350,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["col",{"_index":2492,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["collection",{"_index":629,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["collection's",{"_index":1223,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["collection.name",{"_index":1475,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectioncolor",{"_index":618,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["collectioncolor(collectionname",{"_index":625,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectioncolor?.gethexstring",{"_index":787,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectioncolorrandom",{"_index":619,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectioncolorrandom(collectionname",{"_index":633,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectionfolder",{"_index":702,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionfolder.addchild('color",{"_index":784,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionfolder.name",{"_index":782,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionname",{"_index":630,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["collectionnode",{"_index":1841,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionnode.addchild('cut",{"_index":1902,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionnode.addchild('draw",{"_index":1919,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["collectionobject",{"_index":1221,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["collections",{"_index":1399,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/RKHelper.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collfolder",{"_index":1218,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["collfolder.addfolder('cuts",{"_index":1229,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["collideparticles",{"_index":480,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["colliding",{"_index":506,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["collision",{"_index":231,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collisionduration",{"_index":226,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["collison",{"_index":503,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["color",{"_index":169,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["color(0x2194ce",{"_index":3878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xff0000",{"_index":3877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffd166",{"_index":3879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xfff69a",{"_index":3882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffffff",{"_index":482,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["color(color",{"_index":2493,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["color(color).gethexstring",{"_index":1879,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["color)?.set(color",{"_index":665,"title":{},"body":{"classes/ColorManager.html":{}}}],["color)?.set(math.random",{"_index":666,"title":{},"body":{"classes/ColorManager.html":{}}}],["colorbymomentum",{"_index":694,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbymomentum(minormax",{"_index":750,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoption",{"_index":710,"title":{},"body":{"classes/ColorOptions.html":{},"miscellaneous/typealiases.html":{}}}],["colorbyoption.initialize",{"_index":801,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoption.name",{"_index":807,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionkeys",{"_index":705,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"miscellaneous/enumerations.html":{}}}],["colorbyoptionkeys.charge",{"_index":712,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptionkeys.mom",{"_index":719,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptionkeys.vertex",{"_index":724,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptions",{"_index":687,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["colorbyoptions.push",{"_index":1899,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["colorbyoptionstoinclude",{"_index":704,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude.includes(colorbyoption.key",{"_index":798,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude?.length",{"_index":795,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colored",{"_index":772,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorfortracksvertex",{"_index":674,"title":{},"body":{"classes/ColorManager.html":{}}}],["coloring",{"_index":617,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["colormanager",{"_index":615,"title":{"classes/ColorManager.html":{}},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"coverage.html":{}}}],["colormenu",{"_index":1156,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange((color",{"_index":1274,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange((value",{"_index":1159,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.onchange(oncolorchange",{"_index":1258,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colormenu.setvalue(collectioncolor?.gethex",{"_index":1226,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["colorobjectsbyproperty",{"_index":620,"title":{},"body":{"classes/ColorManager.html":{}}}],["colorobjectsbyproperty(color",{"_index":636,"title":{},"body":{"classes/ColorManager.html":{}}}],["coloroptions",{"_index":681,"title":{"classes/ColorOptions.html":{}},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["coloroptionsfolder",{"_index":688,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorrepresentation",{"_index":2470,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["colors",{"_index":730,"title":{},"body":{"classes/ColorOptions.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["colortracksbyvertex",{"_index":621,"title":{},"body":{"classes/ColorManager.html":{}}}],["colortracksbyvertex(collectionname",{"_index":647,"title":{},"body":{"classes/ColorManager.html":{}}}],["colour",{"_index":3074,"title":{},"body":{"interfaces/Window.html":{}}}],["combine",{"_index":3382,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":3166,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":3165,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":1936,"title":{},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["complete",{"_index":3046,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["completely",{"_index":3636,"title":{},"body":{"changelog.html":{}}}],["completes",{"_index":434,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["component",{"_index":3246,"title":{},"body":{"changelog.html":{}}}],["components",{"_index":3691,"title":{},"body":{"changelog.html":{}}}],["composer",{"_index":1294,"title":{},"body":{"classes/EffectsManager.html":{}}}],["compound",{"_index":3370,"title":{},"body":{"changelog.html":{}}}],["computed",{"_index":1491,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["coner",{"_index":3346,"title":{},"body":{"changelog.html":{}}}],["config",{"_index":1713,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["config.group",{"_index":850,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{}}}],["config.hidden",{"_index":851,"title":{},"body":{"classes/ColorOptions.html":{}}}],["config.onchange",{"_index":1779,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['color",{"_index":1775,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['ischecked",{"_index":1771,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['value",{"_index":1777,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.setenablemax?.(config?.['enablemax",{"_index":1783,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.setenablemin?.(config?.['enablemin",{"_index":1782,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.type",{"_index":1768,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['color",{"_index":1772,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['highvalue",{"_index":1781,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['ischecked",{"_index":1770,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['value",{"_index":1776,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configactive",{"_index":1677,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configbutton",{"_index":3825,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configcheckbox",{"_index":3828,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configcolor",{"_index":3829,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configfile",{"_index":3899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configfunctions",{"_index":1098,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["configlabel",{"_index":3830,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configrangeslider",{"_index":3831,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configs",{"_index":768,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["configselect",{"_index":3832,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configslength",{"_index":1758,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configslider",{"_index":3833,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configstate",{"_index":1798,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['label",{"_index":1805,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['type",{"_index":1803,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate[prop",{"_index":1808,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configurable",{"_index":915,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["configuration",{"_index":852,"title":{"interfaces/Configuration.html":{}},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["configuration.allowurloptions",{"_index":2902,"title":{},"body":{"interfaces/Window.html":{}}}],["configurations",{"_index":738,"title":{},"body":{"classes/ColorOptions.html":{}}}],["configure",{"_index":133,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["console",{"_index":2904,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error",{"_index":1754,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.error('could",{"_index":2716,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.error('error",{"_index":2221,"title":{},"body":{"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{}}}],["console.error(`${xrtype.touppercase",{"_index":3139,"title":{},"body":{"classes/XRManager.html":{}}}],["console.log",{"_index":2688,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["console.log('loading",{"_index":2695,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.log('opening",{"_index":2707,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.log('setting",{"_index":2693,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.log('warning",{"_index":2691,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.warn('exception",{"_index":3885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":272,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":443,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["constructing",{"_index":2490,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["constructor(camera",{"_index":1302,"title":{},"body":{"classes/EffectsManager.html":{}}}],["constructor(colormanager",{"_index":701,"title":{},"body":{"classes/ColorOptions.html":{}}}],["constructor(configuration",{"_index":2885,"title":{},"body":{"interfaces/Window.html":{}}}],["constructor(elementid",{"_index":1051,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["constructor(eventdisplay",{"_index":2637,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["constructor(field",{"_index":986,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(name",{"_index":1692,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["constructor(params",{"_index":2466,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["constructor(phoenixmenuroot",{"_index":1834,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["constructor(private",{"_index":155,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorManager.html":{},"classes/XRManager.html":{}}}],["constructor(public",{"_index":214,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["constructor(scene",{"_index":43,"title":{},"body":{"classes/ARManager.html":{}}}],["constructor(scenemanager",{"_index":622,"title":{},"body":{"classes/ColorManager.html":{}}}],["constructor(sessiontype",{"_index":3121,"title":{},"body":{"classes/XRManager.html":{}}}],["constructor(value",{"_index":199,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["containing",{"_index":88,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["containingevent",{"_index":3050,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":2106,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":1411,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{}}}],["containsobject",{"_index":2081,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":2104,"title":{},"body":{"classes/RendererManager.html":{}}}],["content",{"_index":2981,"title":{},"body":{"interfaces/Window.html":{}}}],["contents",{"_index":1870,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"miscellaneous/variables.html":{}}}],["contenttype",{"_index":3890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continue",{"_index":2045,"title":{},"body":{"classes/RKHelper.html":{}}}],["contributors",{"_index":3820,"title":{},"body":{"properties.html":{}}}],["controller",{"_index":2784,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["controller1",{"_index":2776,"title":{},"body":{"classes/VRManager.html":{}}}],["controller2",{"_index":2777,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip1",{"_index":2778,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip2",{"_index":2779,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory",{"_index":2825,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip1",{"_index":2829,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip2",{"_index":2834,"title":{},"body":{"classes/VRManager.html":{}}}],["controllers",{"_index":2818,"title":{},"body":{"classes/VRManager.html":{}}}],["controls",{"_index":1055,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuUI.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["controlsmanager",{"_index":3747,"title":{},"body":{"coverage.html":{}}}],["conventional",{"_index":3164,"title":{},"body":{"changelog.html":{}}}],["conversions",{"_index":893,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["convert",{"_index":932,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["coordinate",{"_index":892,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["coordinatehelper",{"_index":888,"title":{"classes/CoordinateHelper.html":{}},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{},"coverage.html":{}}}],["coords",{"_index":913,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["copy",{"_index":2002,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["copy(new",{"_index":3152,"title":{},"body":{"classes/XRManager.html":{}}}],["correct",{"_index":3644,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":3222,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":346,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["counter",{"_index":2473,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["coverage",{"_index":3705,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":425,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["cpu",{"_index":3576,"title":{},"body":{"changelog.html":{}}}],["create",{"_index":49,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":140,"title":{},"body":{"classes/ARManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["creating",{"_index":2468,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["crop",{"_index":2916,"title":{},"body":{"interfaces/Window.html":{}}}],["cropped",{"_index":2917,"title":{},"body":{"interfaces/Window.html":{}}}],["cross(b_last",{"_index":1539,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cross(b_middle",{"_index":1529,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["curently",{"_index":1439,"title":{},"body":{"classes/ExportManager.html":{}}}],["curp",{"_index":2572,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["current",{"_index":121,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["currently",{"_index":92,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/ExportManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["currentxrsession",{"_index":27,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["custom",{"_index":644,"title":{},"body":{"classes/ColorManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["customcheck",{"_index":638,"title":{},"body":{"classes/ColorManager.html":{}}}],["customcheck(object.userdata",{"_index":655,"title":{},"body":{"classes/ColorManager.html":{}}}],["customize",{"_index":2883,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":968,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{},"coverage.html":{}}}],["cut.enablemaxcut(checked",{"_index":1917,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cut.enablemincut(checked",{"_index":1915,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cut.field",{"_index":1236,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["cut.maxcutactive",{"_index":1912,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cut.maxvalue",{"_index":1234,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["cut.mincutactive",{"_index":1910,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cut.minvalue",{"_index":1233,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["cut.reset",{"_index":1904,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cut.step",{"_index":1908,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cutpassed",{"_index":982,"title":{},"body":{"classes/Cut.html":{}}}],["cutpassed(value",{"_index":1008,"title":{},"body":{"classes/Cut.html":{}}}],["cuts",{"_index":1070,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["cuts.length",{"_index":1894,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cutsfolder",{"_index":1228,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["cutsoptionsnode",{"_index":1901,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cutsoptionsnode.addconfig('rangeslider",{"_index":1906,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["cycle",{"_index":3248,"title":{},"body":{"changelog.html":{}}}],["d0",{"_index":2065,"title":{},"body":{"classes/RKHelper.html":{}}}],["d207bad",{"_index":3572,"title":{},"body":{"changelog.html":{}}}],["d2874b8",{"_index":3558,"title":{},"body":{"changelog.html":{}}}],["d2c02d5",{"_index":3267,"title":{},"body":{"changelog.html":{}}}],["d2e0547",{"_index":3444,"title":{},"body":{"changelog.html":{}}}],["d3920c4",{"_index":3667,"title":{},"body":{"changelog.html":{}}}],["d4866ea",{"_index":3273,"title":{},"body":{"changelog.html":{}}}],["d4b62c2",{"_index":3348,"title":{},"body":{"changelog.html":{}}}],["d677089",{"_index":3592,"title":{},"body":{"changelog.html":{}}}],["d90e3a6",{"_index":3593,"title":{},"body":{"changelog.html":{}}}],["da3ead5",{"_index":3649,"title":{},"body":{"changelog.html":{}}}],["dat.gui",{"_index":873,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"dependencies.html":{}}}],["data",{"_index":258,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.json",{"_index":3793,"title":{},"body":{"index.html":{}}}],["datguimenuui",{"_index":1025,"title":{"classes/DatGUIMenuUI.html":{}},"body":{"classes/DatGUIMenuUI.html":{},"coverage.html":{}}}],["db261a6",{"_index":3603,"title":{},"body":{"changelog.html":{}}}],["db3ca8b",{"_index":3481,"title":{},"body":{"changelog.html":{}}}],["dc05ed9",{"_index":3604,"title":{},"body":{"changelog.html":{}}}],["dc140dd",{"_index":3625,"title":{},"body":{"changelog.html":{}}}],["dc5d489",{"_index":3616,"title":{},"body":{"changelog.html":{}}}],["dc7d74a",{"_index":3351,"title":{},"body":{"changelog.html":{}}}],["dcb4c88",{"_index":3199,"title":{},"body":{"changelog.html":{}}}],["dcf6cec",{"_index":3647,"title":{},"body":{"changelog.html":{}}}],["debug",{"_index":3399,"title":{},"body":{"changelog.html":{}}}],["debugging",{"_index":3409,"title":{},"body":{"changelog.html":{}}}],["declare",{"_index":2875,"title":{},"body":{"interfaces/Window.html":{}}}],["default",{"_index":57,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["defaultanimationpresets",{"_index":3759,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultapplymaxvalue",{"_index":973,"title":{},"body":{"classes/Cut.html":{}}}],["defaultapplyminvalue",{"_index":974,"title":{},"body":{"classes/Cut.html":{}}}],["defaulteventfile",{"_index":856,"title":{},"body":{"interfaces/Configuration.html":{}}}],["defaulteventpath",{"_index":2648,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaulteventtype",{"_index":2645,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaultmaxvalue",{"_index":975,"title":{},"body":{"classes/Cut.html":{}}}],["defaultminvalue",{"_index":976,"title":{},"body":{"classes/Cut.html":{}}}],["defaultrenderpass",{"_index":1295,"title":{},"body":{"classes/EffectsManager.html":{}}}],["defaults",{"_index":2196,"title":{},"body":{"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{}}}],["defaultview",{"_index":857,"title":{},"body":{"interfaces/Configuration.html":{},"changelog.html":{}}}],["define",{"_index":1481,"title":{},"body":{"classes/Field.html":{},"classes/PresetView.html":{},"index.html":{}}}],["defined",{"_index":47,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["defining",{"_index":3069,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":934,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["delete",{"_index":1755,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["deleted",{"_index":1194,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["deleting",{"_index":1186,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["dependencies",{"_index":3764,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":3296,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":3702,"title":{},"body":{"changelog.html":{}}}],["depth",{"_index":1887,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["depthtest",{"_index":1078,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["depthtestmenu",{"_index":1202,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["depthtestmenu.onchange((value",{"_index":1205,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["descendants",{"_index":1734,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["describe",{"_index":1960,"title":{},"body":{"classes/PresetView.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"properties.html":{}}}],["desired",{"_index":1397,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":292,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"index.html":{}}}],["detectoropacity",{"_index":1150,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["determine",{"_index":3347,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":3320,"title":{},"body":{"changelog.html":{}}}],["df425ee",{"_index":3430,"title":{},"body":{"changelog.html":{}}}],["df9ce07",{"_index":3411,"title":{},"body":{"changelog.html":{}}}],["dfbc6a2",{"_index":3307,"title":{},"body":{"changelog.html":{}}}],["dfe8e8d",{"_index":3395,"title":{},"body":{"changelog.html":{}}}],["dflt_colors",{"_index":3023,"title":{},"body":{"interfaces/Window.html":{}}}],["dialog",{"_index":3507,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":1054,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["differently",{"_index":3389,"title":{},"body":{"changelog.html":{}}}],["dimensional",{"_index":525,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["dir",{"_index":1578,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["dir.x",{"_index":2584,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["dir.y",{"_index":2583,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["direction",{"_index":1571,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["directionallight",{"_index":2286,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":2296,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directly",{"_index":3800,"title":{},"body":{"index.html":{}}}],["directory",{"_index":3804,"title":{},"body":{"index.html":{}}}],["disable",{"_index":2264,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["disabled",{"_index":1308,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disableselecting",{"_index":2237,"title":{},"body":{"classes/SelectionManager.html":{}}}],["disappearing",{"_index":3292,"title":{},"body":{"changelog.html":{}}}],["discard",{"_index":2595,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["display",{"_index":854,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["display#readme",{"_index":3814,"title":{},"body":{"properties.html":{}}}],["display's",{"_index":260,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["display.ts",{"_index":2862,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["displayed",{"_index":1402,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displaying",{"_index":3325,"title":{},"body":{"changelog.html":{}}}],["displayusage",{"_index":3789,"title":{},"body":{"index.html":{}}}],["dist/bundle",{"_index":3803,"title":{},"body":{"index.html":{}}}],["distance",{"_index":444,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{}}}],["distancefromorigin",{"_index":477,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["divide",{"_index":3455,"title":{},"body":{"changelog.html":{}}}],["dividescalar(previousscale",{"_index":381,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["docs",{"_index":3268,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":2306,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["document.body",{"_index":167,"title":{},"body":{"classes/ARManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{}}}],["document.body.style.removeproperty('background",{"_index":178,"title":{},"body":{"classes/ARManager.html":{}}}],["document.body.style.setproperty('background",{"_index":168,"title":{},"body":{"classes/ARManager.html":{}}}],["document.createelement('a",{"_index":3913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('input",{"_index":3894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('script",{"_index":2212,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.getelementbyid('gui",{"_index":1126,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["document.getelementbyid(elementid",{"_index":1120,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{}}}],["document.getelementsbytagname('head')[0",{"_index":2200,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.queryselectorall",{"_index":2208,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["documentation",{"_index":3494,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["documented",{"_index":3163,"title":{},"body":{"changelog.html":{}}}],["doesn't",{"_index":2753,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["dof",{"_index":1987,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["dom",{"_index":63,"title":{},"body":{"classes/ARManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["domoverlay",{"_index":165,"title":{},"body":{"classes/ARManager.html":{}}}],["don't",{"_index":2003,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["done",{"_index":2918,"title":{},"body":{"interfaces/Window.html":{}}}],["dosplay",{"_index":3471,"title":{},"body":{"changelog.html":{}}}],["doubleside",{"_index":560,"title":{},"body":{"classes/CMSObjects.html":{}}}],["doublesided",{"_index":2968,"title":{},"body":{"interfaces/Window.html":{}}}],["download",{"_index":3920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dparams",{"_index":2017,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["dparams[0",{"_index":2066,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[1",{"_index":2068,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[2",{"_index":2069,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[3",{"_index":2070,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[4",{"_index":820,"title":{},"body":{"classes/ColorOptions.html":{},"classes/RKHelper.html":{}}}],["draw",{"_index":1388,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuUI.html":{}}}],["drawing",{"_index":3480,"title":{},"body":{"changelog.html":{}}}],["drawoptionsnode",{"_index":1918,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["drawoptionsnode.addconfig('checkbox",{"_index":1921,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["drawoptionsnode.addconfig('slider",{"_index":1920,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["drawrange",{"_index":345,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["driven",{"_index":3783,"title":{},"body":{"index.html":{}}}],["drop",{"_index":3574,"title":{},"body":{"changelog.html":{}}}],["duration",{"_index":232,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["dynamically",{"_index":2187,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["e",{"_index":3898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.target?.files[0",{"_index":3900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e07725a",{"_index":3443,"title":{},"body":{"changelog.html":{}}}],["e10a68d",{"_index":3595,"title":{},"body":{"changelog.html":{}}}],["e152933",{"_index":3225,"title":{},"body":{"changelog.html":{}}}],["e297c98",{"_index":3645,"title":{},"body":{"changelog.html":{}}}],["e2e",{"_index":3217,"title":{},"body":{"changelog.html":{}}}],["e6f69a0",{"_index":3590,"title":{},"body":{"changelog.html":{}}}],["e96136b",{"_index":3587,"title":{},"body":{"changelog.html":{}}}],["e9f1bc9",{"_index":3619,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":235,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["easily",{"_index":1947,"title":{},"body":{"classes/PresetView.html":{}}}],["easing",{"_index":234,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["easing.cubic.out",{"_index":290,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["easing.linear.none",{"_index":271,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["edcd567",{"_index":3483,"title":{},"body":{"changelog.html":{}}}],["edges",{"_index":605,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":558,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(boxbuffer",{"_index":607,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edit",{"_index":388,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["edm4hepjsonloader",{"_index":3730,"title":{},"body":{"coverage.html":{}}}],["edward's",{"_index":3633,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":1312,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer",{"_index":1310,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer(renderer",{"_index":1339,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effects",{"_index":1288,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["effectsmanager",{"_index":1286,"title":{"classes/EffectsManager.html":{}},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["effectsrender",{"_index":1299,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectsrender(scene",{"_index":1326,"title":{},"body":{"classes/EffectsManager.html":{}}}],["electrons",{"_index":3327,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":872,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["elementid",{"_index":858,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"index.html":{}}}],["elements",{"_index":1322,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["embed",{"_index":2642,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":2658,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["enable",{"_index":62,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":1307,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["enabledatguimenu",{"_index":859,"title":{},"body":{"interfaces/Configuration.html":{}}}],["enabledomoverlay",{"_index":19,"title":{},"body":{"classes/ARManager.html":{}}}],["enableeventdisplayconsole",{"_index":3068,"title":{},"body":{"interfaces/Window.html":{}}}],["enablekeyboardcontrols",{"_index":3100,"title":{},"body":{"interfaces/Window.html":{}}}],["enablemax",{"_index":1911,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["enablemaxcut",{"_index":983,"title":{},"body":{"classes/Cut.html":{}}}],["enablemaxcut(check",{"_index":1011,"title":{},"body":{"classes/Cut.html":{}}}],["enablemin",{"_index":1909,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["enablemincut",{"_index":984,"title":{},"body":{"classes/Cut.html":{}}}],["enablemincut(check",{"_index":1014,"title":{},"body":{"classes/Cut.html":{}}}],["enables",{"_index":3067,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":2238,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":3090,"title":{},"body":{"interfaces/Window.html":{}}}],["enabling",{"_index":2260,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enabling/disabling",{"_index":1140,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["end",{"_index":120,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["end.chain(startclone",{"_index":312,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["ended",{"_index":318,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["ends",{"_index":98,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["endxr(xrsessiontype",{"_index":2929,"title":{},"body":{"interfaces/Window.html":{}}}],["endxrsession",{"_index":38,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["energy",{"_index":1988,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["entries",{"_index":1594,"title":{},"body":{"classes/InfoLogger.html":{}}}],["entry",{"_index":1600,"title":{},"body":{"classes/InfoLogger.html":{}}}],["enum",{"_index":779,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PresetView.html":{},"classes/XRManager.html":{}}}],["enumerable",{"_index":2606,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["enumerations",{"_index":3777,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":773,"title":{},"body":{"classes/ColorOptions.html":{}}}],["equatorial",{"_index":908,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["error",{"_index":1547,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["error_estimate",{"_index":1549,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["errors",{"_index":2734,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["estimate",{"_index":1548,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["et",{"_index":1989,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["eta",{"_index":919,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["eta/phi",{"_index":922,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta=0",{"_index":954,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian",{"_index":896,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian(radius",{"_index":918,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta",{"_index":897,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta(eta",{"_index":930,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta~infinite",{"_index":960,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etc",{"_index":1072,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["event",{"_index":230,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["event's",{"_index":2408,"title":{},"body":{"classes/StateManager.html":{}}}],["event.clientx",{"_index":2359,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":2362,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":2354,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_type_colors",{"_index":562,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["event_data_type_colors.muonchambers",{"_index":596,"title":{},"body":{"classes/CMSObjects.html":{}}}],["eventdata",{"_index":325,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventdata.children",{"_index":1471,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.traverse((eventobject",{"_index":334,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventdataconfig",{"_index":1466,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":1473,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":1476,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataloader",{"_index":860,"title":{"interfaces/EventDataLoader.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"coverage.html":{},"index.html":{}}}],["eventdatatype",{"_index":1073,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["eventdatatypenode",{"_index":1890,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["eventdatatypenode.name",{"_index":1891,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["eventdisplay",{"_index":1112,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay.init(configuration",{"_index":3791,"title":{},"body":{"index.html":{}}}],["eventdisplay.loadobjgeometry",{"_index":3795,"title":{},"body":{"index.html":{}}}],["eventdisplay.parsephoenixevents(res",{"_index":3794,"title":{},"body":{"index.html":{}}}],["eventfile",{"_index":886,"title":{},"body":{"interfaces/Configuration.html":{}}}],["eventfolder",{"_index":1033,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["eventfolderstate",{"_index":1830,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["eventkey",{"_index":2954,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":2932,"title":{},"body":{"interfaces/Window.html":{}}}],["eventmetadata",{"_index":2390,"title":{},"body":{"classes/StateManager.html":{}}}],["eventnumber",{"_index":2407,"title":{},"body":{"classes/StateManager.html":{}}}],["eventobject",{"_index":330,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry",{"_index":335,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.attributes['position'].array",{"_index":392,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.boundingsphere.center",{"_index":387,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.computeboundingsphere",{"_index":394,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.deleteattribute('position",{"_index":393,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.drawrange",{"_index":363,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.drawrange.count",{"_index":361,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.setdrawrange(0",{"_index":362,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry?.attributes?.position?.count",{"_index":349,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material",{"_index":456,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material.clippingplanes",{"_index":457,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material.progress",{"_index":355,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.name",{"_index":340,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.position",{"_index":380,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.position.equals",{"_index":385,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.setscalar(updatedscale.x",{"_index":375,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.x",{"_index":368,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.y",{"_index":369,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.z",{"_index":370,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.visible",{"_index":401,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobjecttween",{"_index":356,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobjecttween.oncomplete",{"_index":358,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["events",{"_index":1409,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["eventsdata",{"_index":1410,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["eventtype",{"_index":887,"title":{},"body":{"interfaces/Configuration.html":{}}}],["example",{"_index":1087,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["examples",{"_index":3806,"title":{},"body":{"index.html":{}}}],["except",{"_index":3355,"title":{},"body":{"changelog.html":{}}}],["exception",{"_index":3884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existing",{"_index":2947,"title":{},"body":{"interfaces/Window.html":{}}}],["exists",{"_index":347,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/ScriptLoader.html":{}}}],["experiment",{"_index":917,"title":{},"body":{"classes/CoordinateHelper.html":{},"interfaces/EventDataLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{},"properties.html":{}}}],["experimental",{"_index":928,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["experimentinfo",{"_index":2761,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["experiments",{"_index":3642,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":152,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["exported",{"_index":1428,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":1447,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":1460,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":1449,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":1414,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":2999,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":1416,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":1421,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":1423,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["exportscenetoobj",{"_index":1417,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":1430,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":2986,"title":{},"body":{"interfaces/Window.html":{}}}],["extend",{"_index":3386,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":14,"title":{},"body":{"classes/ARManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{}}}],["extension",{"_index":3477,"title":{},"body":{"changelog.html":{}}}],["external",{"_index":2188,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["externalize",{"_index":3295,"title":{},"body":{"changelog.html":{}}}],["extra",{"_index":1896,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["extraanimationsphereduration",{"_index":322,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["extract",{"_index":2721,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["extrapolate",{"_index":2037,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolated",{"_index":2040,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions",{"_index":2032,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions(track",{"_index":2035,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolating",{"_index":336,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["extrapolation",{"_index":2044,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["extrapolationlimit",{"_index":2033,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["extrapolationlimit(pos",{"_index":2041,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolator",{"_index":2043,"title":{},"body":{"classes/RKHelper.html":{}}}],["f1d2cef",{"_index":3449,"title":{},"body":{"changelog.html":{}}}],["f2376cc",{"_index":3277,"title":{},"body":{"changelog.html":{}}}],["f279898",{"_index":3503,"title":{},"body":{"changelog.html":{}}}],["f2ed0a3",{"_index":3285,"title":{},"body":{"changelog.html":{}}}],["f40beac",{"_index":3207,"title":{},"body":{"changelog.html":{}}}],["f41920b",{"_index":3428,"title":{},"body":{"changelog.html":{}}}],["f4c2e31",{"_index":3610,"title":{},"body":{"changelog.html":{}}}],["f7cd6b4",{"_index":3531,"title":{},"body":{"changelog.html":{}}}],["f87c587",{"_index":3677,"title":{},"body":{"changelog.html":{}}}],["f8a0080",{"_index":3492,"title":{},"body":{"changelog.html":{}}}],["f94c0e4",{"_index":3614,"title":{},"body":{"changelog.html":{}}}],["f97e615",{"_index":3201,"title":{},"body":{"changelog.html":{}}}],["faces",{"_index":567,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.map((face",{"_index":569,"title":{},"body":{"classes/CMSObjects.html":{}}}],["facing",{"_index":2856,"title":{},"body":{"classes/VRManager.html":{}}}],["factor",{"_index":3041,"title":{},"body":{"interfaces/Window.html":{}}}],["failed",{"_index":3671,"title":{},"body":{"changelog.html":{}}}],["fallback",{"_index":2649,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["false",{"_index":107,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["fbd584e",{"_index":3582,"title":{},"body":{"changelog.html":{}}}],["fdd492a",{"_index":3403,"title":{},"body":{"changelog.html":{}}}],["fe0b2e6",{"_index":3598,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":105,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["fetch",{"_index":2684,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch('path/to/event",{"_index":3792,"title":{},"body":{"index.html":{}}}],["fetch(fileurl)).arraybuffer",{"_index":2728,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(fileurl)).json",{"_index":2725,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(fileurl)).text",{"_index":2719,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(this.urloptions.get('config",{"_index":2699,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["ff0000",{"_index":728,"title":{},"body":{"classes/ColorOptions.html":{}}}],["ff10477",{"_index":3657,"title":{},"body":{"changelog.html":{}}}],["ff666e2",{"_index":3514,"title":{},"body":{"changelog.html":{}}}],["ff77aaa",{"_index":3223,"title":{},"body":{"changelog.html":{}}}],["ffffff",{"_index":3059,"title":{},"body":{"interfaces/Window.html":{}}}],["fh",{"_index":1554,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fh2",{"_index":1555,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field",{"_index":977,"title":{"classes/Field.html":{}},"body":{"classes/Cut.html":{},"classes/Field.html":{},"coverage.html":{}}}],["field.get(pos1",{"_index":1526,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(pos2",{"_index":1536,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(state.pos",{"_index":1512,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file.readobject(objectname",{"_index":3033,"title":{},"body":{"interfaces/Window.html":{}}}],["filebuffer",{"_index":2727,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filedata",{"_index":2718,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":2731,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["filename.endswith('.json",{"_index":2742,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filename.endswith('.xml",{"_index":2747,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filename.startswith('jivexml",{"_index":2748,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filepath",{"_index":3922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filereader",{"_index":3902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":2663,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["fileswithdata",{"_index":2730,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["fileswithdata[filepath",{"_index":3925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fileurl",{"_index":2656,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filter",{"_index":988,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["filter((filename",{"_index":2741,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filter((val",{"_index":2346,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":989,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":971,"title":{},"body":{"classes/Cut.html":{}}}],["finally",{"_index":2704,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["finalposition",{"_index":2566,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["finalposition.w",{"_index":2574,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["finalposition.xy",{"_index":2573,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["find",{"_index":1719,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/URLOptionsManager.html":{}}}],["finding",{"_index":2274,"title":{},"body":{"classes/SelectionManager.html":{}}}],["findintree",{"_index":1685,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintree(name",{"_index":1717,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate",{"_index":1686,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate(name",{"_index":1722,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["finished",{"_index":1641,"title":{},"body":{"classes/LoadingManager.html":{}}}],["first",{"_index":320,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["firsttween",{"_index":531,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["firsttween.start",{"_index":542,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["fit",{"_index":2919,"title":{},"body":{"interfaces/Window.html":{}}}],["fitting",{"_index":2913,"title":{},"body":{"interfaces/Window.html":{}}}],["fix",{"_index":3206,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":2097,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["fixedoverlay",{"_index":2076,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":3092,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["fixing",{"_index":3626,"title":{},"body":{"changelog.html":{}}}],["fixoverlayview(fixed",{"_index":3093,"title":{},"body":{"interfaces/Window.html":{}}}],["flat",{"_index":2552,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["float",{"_index":2548,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array([].concat(...reachedhits",{"_index":420,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["float32array(allfacepositions",{"_index":592,"title":{},"body":{"classes/CMSObjects.html":{}}}],["float32array(this.colors",{"_index":2514,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.counter",{"_index":2515,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.next",{"_index":2511,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.positions",{"_index":2509,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.previous",{"_index":2510,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.side",{"_index":2512,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["floor",{"_index":2807,"title":{},"body":{"classes/VRManager.html":{}}}],["folder",{"_index":707,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["folders",{"_index":1102,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["foreach((filename",{"_index":2743,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["foreach((groupname",{"_index":184,"title":{},"body":{"classes/ARManager.html":{}}}],["form",{"_index":3510,"title":{},"body":{"changelog.html":{}}}],["format",{"_index":1424,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["formatted",{"_index":3685,"title":{},"body":{"changelog.html":{}}}],["forming",{"_index":237,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["found",{"_index":1721,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["fragment",{"_index":2592,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["fragmentshader",{"_index":2602,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["front",{"_index":571,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_1",{"_index":577,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_2",{"_index":573,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_3",{"_index":574,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_4",{"_index":576,"title":{},"body":{"classes/CMSObjects.html":{}}}],["full",{"_index":3229,"title":{},"body":{"changelog.html":{}}}],["function",{"_index":94,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":1387,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":261,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["general",{"_index":3392,"title":{},"body":{"changelog.html":{}}}],["generalize",{"_index":3459,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":1457,"title":{},"body":{"classes/ExportManager.html":{},"index.html":{}}}],["generation",{"_index":315,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["generic",{"_index":3278,"title":{},"body":{"changelog.html":{}}}],["geom",{"_index":3056,"title":{},"body":{"interfaces/Window.html":{}}}],["geometrical",{"_index":3488,"title":{},"body":{"changelog.html":{}}}],["geometries",{"_index":1058,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["geometries.children.foreach((object",{"_index":1477,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":3088,"title":{},"body":{"interfaces/Window.html":{}}}],["geometriesconfig",{"_index":1468,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":1478,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":344,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["geometry.computeboundingsphere",{"_index":421,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometry.setattribute",{"_index":419,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometry/event",{"_index":3084,"title":{},"body":{"interfaces/Window.html":{}}}],["geometryposcount",{"_index":348,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometryuiparameters",{"_index":3834,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["geomfolder",{"_index":1034,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["get(field",{"_index":1482,"title":{},"body":{"classes/Field.html":{}}}],["getactiveobjectid",{"_index":2239,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcamera",{"_index":3151,"title":{},"body":{"classes/XRManager.html":{}}}],["getcameragroup",{"_index":39,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["getcameragroup(camera",{"_index":122,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["getcameratween",{"_index":268,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["getcollection",{"_index":1369,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["getcollection(collectionname",{"_index":1394,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":1370,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["getcompound",{"_index":3393,"title":{},"body":{"changelog.html":{}}}],["getelementbyid('embedmenu",{"_index":2766,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["getelementbyid('three",{"_index":2307,"title":{},"body":{"classes/SelectionManager.html":{}}}],["getelementbyid(singleid",{"_index":2772,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["geteventdatatypefolder",{"_index":1048,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["geteventdatatypefolder(typename",{"_index":1103,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["geteventmetadata",{"_index":1371,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":1372,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["geteventslist(eventsdata",{"_index":1406,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["getfromlocalstorage",{"_index":3713,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethitspositions(positions",{"_index":526,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geticonurl",{"_index":1956,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologger",{"_index":2714,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["getinfologgerlist",{"_index":1590,"title":{},"body":{"classes/InfoLogger.html":{}}}],["getinstance",{"_index":2393,"title":{},"body":{"classes/StateManager.html":{}}}],["getlabelsobject",{"_index":1373,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["getlabeltitle",{"_index":2873,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getlabeltitle(eventdatatype",{"_index":3120,"title":{},"body":{"interfaces/Window.html":{}}}],["getloadingmanager",{"_index":2959,"title":{},"body":{"interfaces/Window.html":{}}}],["getlocalclipping",{"_index":2082,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmainrenderer",{"_index":2083,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmomentum",{"_index":695,"title":{},"body":{"classes/ColorOptions.html":{}}}],["getmomentum(objectparams",{"_index":760,"title":{},"body":{"classes/ColorOptions.html":{}}}],["getmuon",{"_index":3394,"title":{},"body":{"changelog.html":{}}}],["getmuonchamber",{"_index":551,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":552,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getnodestate",{"_index":1687,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["getobjectbyname(collectionname",{"_index":660,"title":{},"body":{"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["getobjectbyname(labelid",{"_index":1270,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["getobjectbyname(scenemanager.event_data_id",{"_index":659,"title":{},"body":{"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["getobjectbyname(scenemanager.labels_id",{"_index":1269,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["getobjectbyname(typename",{"_index":1210,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["getopeningclippingangle",{"_index":2394,"title":{},"body":{"classes/StateManager.html":{}}}],["getoverlayrenderer",{"_index":2084,"title":{},"body":{"classes/RendererManager.html":{}}}],["getprettyparams",{"_index":1982,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettyparams(params",{"_index":1991,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol",{"_index":1983,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol(param",{"_index":1995,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getrenderers",{"_index":2085,"title":{},"body":{"classes/RendererManager.html":{}}}],["getscene",{"_index":658,"title":{},"body":{"classes/ColorManager.html":{}}}],["getstartclippingangle",{"_index":2395,"title":{},"body":{"classes/StateManager.html":{}}}],["getstatemanager",{"_index":2960,"title":{},"body":{"interfaces/Window.html":{}}}],["getthreemanager",{"_index":2958,"title":{},"body":{"interfaces/Window.html":{}}}],["getting",{"_index":3159,"title":{"changelog.html":{},"index.html":{}},"body":{"changelog.html":{}}}],["gettrackswithrungekutta",{"_index":2034,"title":{},"body":{"classes/RKHelper.html":{}}}],["gettrackswithrungekutta(trackscollectionsevent",{"_index":2048,"title":{},"body":{"classes/RKHelper.html":{}}}],["getuimanager",{"_index":2453,"title":{},"body":{"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["geturloptions",{"_index":2632,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["geturloptionsmanager",{"_index":2962,"title":{},"body":{"interfaces/Window.html":{}}}],["getxrcamera",{"_index":40,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["git://github.com/hsf/phoenix.git",{"_index":3818,"title":{},"body":{"properties.html":{}}}],["given",{"_index":144,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Field.html":{},"classes/PresetView.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["giving",{"_index":2272,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["gl_fragcolor",{"_index":2596,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["gl_position",{"_index":2590,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["global",{"_index":2876,"title":{},"body":{"interfaces/Window.html":{}}}],["globalthis",{"_index":3589,"title":{},"body":{"changelog.html":{}}}],["gltf",{"_index":1458,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["gltfexporter",{"_index":1442,"title":{},"body":{"classes/ExportManager.html":{}}}],["go",{"_index":2006,"title":{},"body":{"classes/PrettySymbols.html":{},"interfaces/Window.html":{}}}],["graphic",{"_index":1385,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["graphicslibrary",{"_index":1378,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":3042,"title":{},"body":{"interfaces/Window.html":{}}}],["grid",{"_index":3527,"title":{},"body":{"changelog.html":{}}}],["group",{"_index":85,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["groupnotselected",{"_index":849,"title":{},"body":{"classes/ColorOptions.html":{}}}],["gui",{"_index":1027,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["gui.remove",{"_index":1127,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["guidelines",{"_index":3167,"title":{},"body":{"changelog.html":{}}}],["guiparameters",{"_index":1035,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["h",{"_index":1517,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h).cross(b_last",{"_index":1537,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h2",{"_index":1503,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h",{"_index":1504,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h).cross(b_middle",{"_index":1527,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["hand",{"_index":2809,"title":{},"body":{"classes/VRManager.html":{}}}],["handle",{"_index":2655,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["handlejivexmlevent",{"_index":2633,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlejivexmlevent(fileurl",{"_index":2654,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlejsonevent",{"_index":2634,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlejsonevent(fileurl",{"_index":2659,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlezipfileevents",{"_index":2635,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlezipfileevents(fileurl",{"_index":2660,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handling",{"_index":3237,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":3682,"title":{},"body":{"changelog.html":{}}}],["hasposition",{"_index":384,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["height",{"_index":2912,"title":{},"body":{"interfaces/Window.html":{}}}],["helper",{"_index":891,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["helper.ts",{"_index":890,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["helper.ts:13",{"_index":902,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:14",{"_index":2042,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:24",{"_index":2049,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:25",{"_index":931,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:35",{"_index":941,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:44",{"_index":2036,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:46",{"_index":939,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:65",{"_index":920,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:81",{"_index":910,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helpers/active",{"_index":2290,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["helpers/constants",{"_index":563,"title":{},"body":{"classes/CMSObjects.html":{}}}],["helpers/file",{"_index":1445,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["helpers/info",{"_index":1413,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["helpers/labels",{"_index":2874,"title":{},"body":{"interfaces/Window.html":{}}}],["helpers/pretty",{"_index":775,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/SelectionManager.html":{}}}],["helpers/zip",{"_index":2674,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["here",{"_index":935,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["hex",{"_index":631,"title":{},"body":{"classes/ColorManager.html":{}}}],["hide",{"_index":512,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["hideidswithurloption",{"_index":2636,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hideidswithurloption(urloptionwithids",{"_index":2664,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hidewidgets",{"_index":2643,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["hidewidgetsoptions",{"_index":2757,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hiding",{"_index":3617,"title":{},"body":{"changelog.html":{}}}],["hierarchical",{"_index":1869,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["hierarchy",{"_index":2966,"title":{},"body":{"interfaces/Window.html":{}}}],["high",{"_index":2141,"title":{},"body":{"classes/RendererManager.html":{}}}],["higher",{"_index":1871,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["highlight",{"_index":2271,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":1320,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["highlightobject",{"_index":2240,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":2269,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highly",{"_index":3457,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["highvalue",{"_index":1780,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["hit",{"_index":390,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["hitlines",{"_index":3523,"title":{},"body":{"changelog.html":{}}}],["hits",{"_index":389,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["hitspositions",{"_index":412,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["hitspositions.filter((hitposition",{"_index":415,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["home",{"_index":3652,"title":{},"body":{"changelog.html":{}}}],["homepage",{"_index":3812,"title":{},"body":{"properties.html":{}}}],["hovered",{"_index":1321,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["hovering",{"_index":2249,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":3081,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["html2canvas",{"_index":3769,"title":{},"body":{"dependencies.html":{}}}],["htmlcanvaselement",{"_index":2127,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":2194,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["http://github.com/hsf/phoenix/tree/master/packages/phoenix",{"_index":3813,"title":{},"body":{"properties.html":{}}}],["httprequest",{"_index":2863,"title":{},"body":{"interfaces/Window.html":{}}}],["httprequest(url",{"_index":3020,"title":{},"body":{"interfaces/Window.html":{}}}],["https://en.wikipedia.org/wiki/pseudorapidity",{"_index":936,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["https://github.com/hsf/phoenix/graphs/contributors",{"_index":3821,"title":{},"body":{"properties.html":{}}}],["https://github.com/root",{"_index":3029,"title":{},"body":{"interfaces/Window.html":{}}}],["icon",{"_index":1678,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"changelog.html":{}}}],["id",{"_index":870,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":3706,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":2199,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["ids",{"_index":2666,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["idstohide",{"_index":2769,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["idstohide.foreach((singleid",{"_index":2771,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["ig",{"_index":3568,"title":{},"body":{"changelog.html":{}}}],["ignore",{"_index":1773,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ignored",{"_index":2248,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":2230,"title":{},"body":{"classes/SelectionManager.html":{}}}],["immersive",{"_index":81,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["implement",{"_index":1937,"title":{},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["implementations",{"_index":3269,"title":{},"body":{"changelog.html":{}}}],["implementing",{"_index":1365,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["implements",{"_index":1031,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["implicitly",{"_index":3698,"title":{},"body":{"changelog.html":{}}}],["import",{"_index":135,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{}}}],["importmanager",{"_index":3751,"title":{},"body":{"coverage.html":{}}}],["imports",{"_index":3308,"title":{},"body":{"changelog.html":{}}}],["improve",{"_index":3208,"title":{},"body":{"changelog.html":{}}}],["improvement",{"_index":3451,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":3421,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":3575,"title":{},"body":{"changelog.html":{}}}],["inbounds",{"_index":1575,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["include",{"_index":709,"title":{},"body":{"classes/ColorOptions.html":{},"index.html":{}}}],["included",{"_index":794,"title":{},"body":{"classes/ColorOptions.html":{},"index.html":{}}}],["including",{"_index":1438,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["increase",{"_index":3343,"title":{},"body":{"changelog.html":{}}}],["increases",{"_index":1638,"title":{},"body":{"classes/LoadingManager.html":{}}}],["increment",{"_index":991,"title":{},"body":{"classes/Cut.html":{}}}],["independent",{"_index":3784,"title":{},"body":{"index.html":{},"properties.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexincollection",{"_index":1375,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["indices",{"_index":2475,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["indices_array",{"_index":2476,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["infinity",{"_index":352,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["infologger",{"_index":1380,"title":{"classes/InfoLogger.html":{}},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infologgerlist",{"_index":1588,"title":{},"body":{"classes/InfoLogger.html":{}}}],["information",{"_index":1596,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["inherited",{"_index":86,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["init",{"_index":2086,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["init(camera",{"_index":2275,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":2892,"title":{},"body":{"interfaces/Window.html":{}}}],["init(elementid",{"_index":2112,"title":{},"body":{"classes/RendererManager.html":{}}}],["initchargecoloroptions",{"_index":696,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initcolorbyoptions",{"_index":697,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initial",{"_index":203,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["initialize",{"_index":715,"title":{},"body":{"classes/ColorOptions.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["initialized",{"_index":2251,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":3083,"title":{},"body":{"interfaces/Window.html":{}}}],["initializing",{"_index":2096,"title":{},"body":{"classes/RendererManager.html":{}}}],["initially",{"_index":2971,"title":{},"body":{"interfaces/Window.html":{}}}],["initiallyvisible",{"_index":2970,"title":{},"body":{"interfaces/Window.html":{}}}],["initmomcoloroptions",{"_index":698,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initrenderer",{"_index":2087,"title":{},"body":{"classes/RendererManager.html":{}}}],["initrenderer(elementid",{"_index":2115,"title":{},"body":{"classes/RendererManager.html":{}}}],["initxr(xrsessiontype",{"_index":2927,"title":{},"body":{"interfaces/Window.html":{}}}],["input",{"_index":1456,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["inputfile",{"_index":3893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.accept",{"_index":3896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.click",{"_index":3907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.onchange",{"_index":3897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.remove",{"_index":3905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.type",{"_index":3895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inside",{"_index":628,"title":{},"body":{"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["install",{"_index":3787,"title":{},"body":{"index.html":{}}}],["instance",{"_index":734,"title":{},"body":{"classes/ColorOptions.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["instanceof",{"_index":353,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["instantiate",{"_index":1446,"title":{},"body":{"classes/ExportManager.html":{}}}],["instead",{"_index":1757,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["int",{"_index":2547,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["int32array(this.track_id",{"_index":2513,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["integrator",{"_index":1502,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["interface",{"_index":219,"title":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["interfaces",{"_index":221,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["intersected",{"_index":2280,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":2322,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":2327,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata",{"_index":2333,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":2345,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":2241,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":2277,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":2279,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":2367,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":2370,"title":{},"body":{"classes/SelectionManager.html":{}}}],["interval",{"_index":2843,"title":{},"body":{"classes/VRManager.html":{}}}],["intervalid",{"_index":2844,"title":{},"body":{"classes/VRManager.html":{}}}],["intitialize",{"_index":2882,"title":{},"body":{"interfaces/Window.html":{}}}],["introduce",{"_index":3530,"title":{},"body":{"changelog.html":{}}}],["invisible",{"_index":396,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["io",{"_index":3221,"title":{},"body":{"changelog.html":{}}}],["ischecked",{"_index":1861,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["isfixedoverlay",{"_index":2088,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":2231,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issues",{"_index":3349,"title":{},"body":{"changelog.html":{}}}],["istracksmaterial",{"_index":2465,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["it's",{"_index":2012,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["item",{"_index":1627,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"miscellaneous/variables.html":{}}}],["itemloaded",{"_index":1621,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemloaded(id",{"_index":1639,"title":{},"body":{"classes/LoadingManager.html":{}}}],["items",{"_index":438,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["itself",{"_index":1733,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["jasmine",{"_index":3623,"title":{},"body":{"changelog.html":{}}}],["jet",{"_index":366,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["jets",{"_index":3291,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["jive",{"_index":3337,"title":{},"body":{"changelog.html":{}}}],["jiveloader",{"_index":2746,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jiveloader.geteventdata",{"_index":2750,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jiveloader.process(fileswithdata[filename",{"_index":2749,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jivexml",{"_index":2647,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["jivexml_xxx_yyy.zip",{"_index":2755,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jivexmlloader",{"_index":2668,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["jixexml",{"_index":3500,"title":{},"body":{"changelog.html":{}}}],["join('\\n",{"_index":2591,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["js",{"_index":3774,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":1727,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["json.parse(fileswithdata[filename",{"_index":2745,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["json.parse(input",{"_index":2992,"title":{},"body":{"interfaces/Window.html":{}}}],["json.parse(json",{"_index":1794,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["json.stringify(jsonresult",{"_index":1463,"title":{},"body":{"classes/ExportManager.html":{}}}],["json.stringify(state",{"_index":2437,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata",{"_index":2439,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay",{"_index":2443,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['cameraposition",{"_index":2445,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['openingclippingangle",{"_index":2449,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['startclippingangle",{"_index":2447,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']['openingclippingangle",{"_index":2457,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']['startclippingangle",{"_index":2455,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['phoenixmenu",{"_index":2440,"title":{},"body":{"classes/StateManager.html":{}}}],["jsonobject",{"_index":1793,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['children",{"_index":1811,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['childrenactive",{"_index":1795,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['configs",{"_index":1799,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['togglestate",{"_index":1796,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonresult",{"_index":1461,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsroot",{"_index":2864,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{},"dependencies.html":{}}}],["jsroot/geom",{"_index":2867,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot/io",{"_index":2869,"title":{},"body":{"interfaces/Window.html":{}}}],["jsrooteventloader",{"_index":3227,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["jsrootsettings",{"_index":2866,"title":{},"body":{"interfaces/Window.html":{}}}],["jsrootsettings.usestamp",{"_index":3031,"title":{},"body":{"interfaces/Window.html":{}}}],["jszip",{"_index":3772,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["k1",{"_index":1514,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k1.clone().sub(k2).sub(k3).add(k4",{"_index":1541,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k2",{"_index":1507,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k3",{"_index":1508,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4",{"_index":1509,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4).lpnorm",{"_index":1542,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["keep",{"_index":3534,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":711,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["keyboard",{"_index":2906,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["keys",{"_index":778,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"miscellaneous/enumerations.html":{}}}],["kutta",{"_index":1487,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["kutta.ts",{"_index":1480,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["kutta.ts:12",{"_index":2183,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:126",{"_index":2182,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:168",{"_index":2380,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:170",{"_index":2376,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:172",{"_index":2378,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:174",{"_index":2381,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:176",{"_index":2384,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:178",{"_index":2382,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:180",{"_index":2377,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:182",{"_index":2379,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:192",{"_index":1483,"title":{},"body":{"classes/Field.html":{}}}],["label",{"_index":786,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["labelfolderreference",{"_index":1281,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["labelid",{"_index":1092,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["labelitem",{"_index":1263,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelitem.add(this.guiparameters[labelid",{"_index":1279,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelitemfolder",{"_index":1106,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelnode",{"_index":1853,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode.addconfig('button",{"_index":1930,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode.addconfig('color",{"_index":1929,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelnode?.remove",{"_index":1934,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["labelobject",{"_index":1268,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["labels",{"_index":1061,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["labelsfolder",{"_index":1036,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["labelsobject",{"_index":3116,"title":{},"body":{"interfaces/Window.html":{}}}],["labelsobject[eventdatatype",{"_index":3118,"title":{},"body":{"interfaces/Window.html":{}}}],["labelsobject[eventdatatype][collection",{"_index":3119,"title":{},"body":{"interfaces/Window.html":{}}}],["labelsobject[eventdatatype][collection][index",{"_index":3115,"title":{},"body":{"interfaces/Window.html":{}}}],["labelssizemenu",{"_index":1254,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["labelssizemenu.onfinishchange(onsizechange",{"_index":1256,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["last",{"_index":149,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["later",{"_index":995,"title":{},"body":{"classes/Cut.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["latest",{"_index":3581,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":588,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["length",{"_index":1574,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["level",{"_index":1704,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["lhcb",{"_index":3244,"title":{},"body":{"changelog.html":{}}}],["lib/models/cut.model",{"_index":1111,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["lib/types/configuration",{"_index":2672,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["library",{"_index":1386,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{}}}],["license",{"_index":3815,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":3377,"title":{},"body":{"changelog.html":{}}}],["limits",{"_index":3489,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":2801,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["line(geometry",{"_index":2837,"title":{},"body":{"classes/VRManager.html":{}}}],["line.name",{"_index":2838,"title":{},"body":{"classes/VRManager.html":{}}}],["line.scale.z",{"_index":2839,"title":{},"body":{"classes/VRManager.html":{}}}],["linebasicmaterial",{"_index":559,"title":{},"body":{"classes/CMSObjects.html":{}}}],["lineboxobject",{"_index":608,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linehit",{"_index":342,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["linehits",{"_index":3542,"title":{},"body":{"changelog.html":{}}}],["lines",{"_index":603,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["linesegments",{"_index":561,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linewidth",{"_index":2557,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["link",{"_index":564,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["linkedtrackcollection",{"_index":670,"title":{},"body":{"classes/ColorManager.html":{}}}],["linkedtracks",{"_index":671,"title":{},"body":{"classes/ColorManager.html":{}}}],["linkedtracks.foreach((trackindex",{"_index":678,"title":{},"body":{"classes/ColorManager.html":{}}}],["linting",{"_index":3200,"title":{},"body":{"changelog.html":{}}}],["list",{"_index":1400,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["listen",{"_index":1136,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{}}}],["listener",{"_index":1633,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["listentodisplayedeventchange(callback",{"_index":3062,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":3064,"title":{},"body":{"interfaces/Window.html":{}}}],["literal",{"_index":233,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":866,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["loadable",{"_index":1612,"title":{},"body":{"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["loadconfig",{"_index":2696,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaded",{"_index":1429,"title":{},"body":{"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["loader",{"_index":874,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["loader.geteventdata",{"_index":2723,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.process(filedata",{"_index":2722,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.ts",{"_index":1364,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ScriptLoader.html":{},"coverage.html":{}}}],["loader.ts:15",{"_index":2195,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:17",{"_index":1381,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:29",{"_index":1407,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:35",{"_index":1398,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:42",{"_index":1395,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:48",{"_index":1403,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:57",{"_index":1376,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:67",{"_index":1412,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders",{"_index":1366,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders/event",{"_index":882,"title":{},"body":{"interfaces/Configuration.html":{}}}],["loaders/jivexml",{"_index":2669,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaders/objects/tracks",{"_index":252,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["loaders/phoenix",{"_index":2671,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["loadevent(eventkey",{"_index":2955,"title":{},"body":{"interfaces/Window.html":{}}}],["loadeventfolderstate",{"_index":1833,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["loadfile",{"_index":2424,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loadfile((data",{"_index":2428,"title":{},"body":{"classes/StateManager.html":{}}}],["loadgltfgeometry",{"_index":3009,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":876,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["loadingmanager",{"_index":1610,"title":{"classes/LoadingManager.html":{}},"body":{"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["loadingmanager.addloadableitem('single_script",{"_index":2204,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.instance",{"_index":1646,"title":{},"body":{"classes/LoadingManager.html":{}}}],["loadingmanager.itemloaded('single_script",{"_index":2219,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsongeometry",{"_index":3014,"title":{},"body":{"interfaces/Window.html":{}}}],["loadjsrootscripts",{"_index":3224,"title":{},"body":{"changelog.html":{}}}],["loadlabels",{"_index":1251,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["loadobjgeometry",{"_index":2974,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootgeometry",{"_index":3027,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootjsongeometry",{"_index":3018,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":2934,"title":{},"body":{"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":3051,"title":{},"body":{"interfaces/Window.html":{}}}],["loadscript",{"_index":2190,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadscript(scripturl",{"_index":2191,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadstatefromjson",{"_index":1688,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["loadstatefromjson(json",{"_index":1725,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["local",{"_index":466,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["localstorage",{"_index":3886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstorage.getitem(item",{"_index":3883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstorage.setitem(item",{"_index":3887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":2046,"title":{},"body":{"classes/RKHelper.html":{}}}],["log",{"_index":1601,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["logger",{"_index":1392,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["logger.ts",{"_index":1587,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["logger.ts:15",{"_index":1599,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:26",{"_index":1602,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:6",{"_index":1591,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:8",{"_index":1593,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logging",{"_index":1393,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{}}}],["logo",{"_index":2759,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["logs",{"_index":1592,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["long",{"_index":2013,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["longer",{"_index":3376,"title":{},"body":{"changelog.html":{}}}],["look",{"_index":3096,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["lookatobject(uuid",{"_index":3097,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":2145,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["lost",{"_index":2923,"title":{},"body":{"interfaces/Window.html":{}}}],["lower",{"_index":999,"title":{},"body":{"classes/Cut.html":{},"changelog.html":{}}}],["lowres",{"_index":1060,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["m",{"_index":2562,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["made",{"_index":527,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["main",{"_index":1306,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{}}}],["mainlogo",{"_index":2758,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["mainrenderer",{"_index":2077,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.domelement.id",{"_index":2164,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setpixelratio(window.devicepixelratio",{"_index":2163,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setsize(rendererwidth",{"_index":2162,"title":{},"body":{"classes/RendererManager.html":{}}}],["major",{"_index":3694,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":397,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["makescreenshot",{"_index":2925,"title":{},"body":{"interfaces/Window.html":{}}}],["making",{"_index":395,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["manage",{"_index":3401,"title":{},"body":{"changelog.html":{}}}],["manager",{"_index":11,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["manager.ts",{"_index":8,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["manager.ts:10",{"_index":2099,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:102",{"_index":2284,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:104",{"_index":2411,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:105",{"_index":1637,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:109",{"_index":3124,"title":{},"body":{"classes/XRManager.html":{}}}],["manager.ts:11",{"_index":1625,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:111",{"_index":2266,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:112",{"_index":1645,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:119",{"_index":2131,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:12",{"_index":1311,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:127",{"_index":2108,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:128",{"_index":2263,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:135",{"_index":2109,"title":{},"body":{"classes/RendererManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:14",{"_index":1309,"title":{},"body":{"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:143",{"_index":2110,"title":{},"body":{"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:145",{"_index":2257,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:147",{"_index":2415,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:149",{"_index":2794,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:15",{"_index":82,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:153",{"_index":2103,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:155",{"_index":2423,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:158",{"_index":2252,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:16",{"_index":1318,"title":{},"body":{"classes/EffectsManager.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:163",{"_index":2118,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:169",{"_index":2661,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:17",{"_index":60,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:171",{"_index":2419,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:175",{"_index":2134,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:179",{"_index":2410,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:18",{"_index":1314,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:187",{"_index":2105,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:19",{"_index":74,"title":{},"body":{"classes/ARManager.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:195",{"_index":2417,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:20",{"_index":640,"title":{},"body":{"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:200",{"_index":2124,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:207",{"_index":2255,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:209",{"_index":2650,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:21",{"_index":2786,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:210",{"_index":2107,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:218",{"_index":2278,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:22",{"_index":48,"title":{},"body":{"classes/ARManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:220",{"_index":2116,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:227",{"_index":2640,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:228",{"_index":2122,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:23",{"_index":1303,"title":{},"body":{"classes/EffectsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:24",{"_index":2246,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:241",{"_index":2270,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:252",{"_index":2665,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:26",{"_index":2261,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:268",{"_index":2652,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:27",{"_index":1422,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:28",{"_index":2262,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:29",{"_index":2403,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:30",{"_index":2245,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:32",{"_index":2247,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:34",{"_index":2113,"title":{},"body":{"classes/RendererManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:36",{"_index":2258,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:37",{"_index":1630,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:38",{"_index":626,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:41",{"_index":2250,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:43",{"_index":2244,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:46",{"_index":1640,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:48",{"_index":1327,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:52",{"_index":1437,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:53",{"_index":3126,"title":{},"body":{"classes/XRManager.html":{}}}],["manager.ts:54",{"_index":2421,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:55",{"_index":634,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:59",{"_index":2646,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:6",{"_index":1624,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:61",{"_index":1325,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:64",{"_index":1643,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:65",{"_index":2276,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:66",{"_index":1432,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:69",{"_index":1319,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:7",{"_index":623,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:72",{"_index":648,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:75",{"_index":118,"title":{},"body":{"classes/ARManager.html":{}}}],["manager.ts:77",{"_index":2797,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:78",{"_index":3125,"title":{},"body":{"classes/XRManager.html":{}}}],["manager.ts:8",{"_index":2098,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:80",{"_index":2412,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:83",{"_index":2282,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:84",{"_index":1632,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:85",{"_index":1435,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:88",{"_index":1329,"title":{},"body":{"classes/EffectsManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:9",{"_index":1628,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:93",{"_index":1635,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:94",{"_index":2267,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:97",{"_index":1331,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:99",{"_index":3123,"title":{},"body":{"classes/XRManager.html":{}}}],["manager/animations",{"_index":222,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["manager/color",{"_index":616,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["manager/controls",{"_index":3746,"title":{},"body":{"coverage.html":{}}}],["manager/dat",{"_index":1026,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"coverage.html":{}}}],["manager/effects",{"_index":1287,"title":{},"body":{"classes/EffectsManager.html":{},"coverage.html":{}}}],["manager/export",{"_index":1415,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["manager/import",{"_index":3750,"title":{},"body":{"coverage.html":{}}}],["manager/index.ts",{"_index":3752,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager/phoenix",{"_index":884,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["manager/renderer",{"_index":2075,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["manager/scene",{"_index":1110,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["manager/selection",{"_index":2227,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["manager/xr/ar",{"_index":7,"title":{},"body":{"classes/ARManager.html":{},"coverage.html":{}}}],["manager/xr/vr",{"_index":2774,"title":{},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["manager/xr/xr",{"_index":2872,"title":{},"body":{"interfaces/Window.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["managers/loading",{"_index":2203,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["managers/state",{"_index":2870,"title":{},"body":{"interfaces/Window.html":{}}}],["managers/three",{"_index":885,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/ui",{"_index":883,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/url",{"_index":2871,"title":{},"body":{"interfaces/Window.html":{}}}],["manages",{"_index":1304,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/Window.html":{}}}],["managing",{"_index":253,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manipulate",{"_index":1391,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["manual",{"_index":1767,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["manually",{"_index":371,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["many",{"_index":3419,"title":{},"body":{"changelog.html":{}}}],["map((key",{"_index":2341,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mat4",{"_index":2561,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["match",{"_index":2914,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["matching",{"_index":187,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1146,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["material?.color",{"_index":1147,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["math.abs(1",{"_index":844,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{}}}],["math.abs(returnvec.x",{"_index":1543,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.y",{"_index":1544,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.z",{"_index":1545,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.atan(math.pow(math.e",{"_index":944,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.log(math.tan(theta",{"_index":945,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.pi",{"_index":305,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["math.pow(fh",{"_index":1556,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.sign(1",{"_index":824,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{}}}],["math.sqrt(pos.x",{"_index":2052,"title":{},"body":{"classes/RKHelper.html":{}}}],["max",{"_index":740,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["maxcut",{"_index":1239,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxcut.onchange((value",{"_index":1241,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxcutactive",{"_index":978,"title":{},"body":{"classes/Cut.html":{}}}],["maxentries",{"_index":1589,"title":{},"body":{"classes/InfoLogger.html":{}}}],["maximum",{"_index":756,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{}}}],["maxpositionx",{"_index":1037,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxpositiony",{"_index":1038,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxpositionz",{"_index":1039,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["maxstepsize",{"_index":2372,"title":{},"body":{"classes/State.html":{}}}],["maxvalue",{"_index":979,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{}}}],["menu",{"_index":736,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["menu's",{"_index":1085,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["menu.onchange((value",{"_index":1200,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["menu/config",{"_index":3837,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["menu/phoenix",{"_index":777,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"coverage.html":{}}}],["menunodename",{"_index":2964,"title":{},"body":{"interfaces/Window.html":{}}}],["menus",{"_index":1390,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["menusubfolder",{"_index":1845,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["mesh",{"_index":244,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["mesh(particlegeometry",{"_index":489,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["meshbasicmaterial",{"_index":243,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{}}}],["meshphongmaterial",{"_index":651,"title":{},"body":{"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["metadata",{"_index":1404,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["method",{"_index":3486,"title":{},"body":{"changelog.html":{}}}],["methods",{"_index":33,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["mev",{"_index":2064,"title":{},"body":{"classes/RKHelper.html":{}}}],["mid",{"_index":758,"title":{},"body":{"classes/ColorOptions.html":{}}}],["min",{"_index":739,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["min/max",{"_index":743,"title":{},"body":{"classes/ColorOptions.html":{}}}],["mincut",{"_index":1231,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["mincut.onchange((value",{"_index":1237,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["mincutactive",{"_index":980,"title":{},"body":{"classes/Cut.html":{}}}],["minimum",{"_index":755,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{}}}],["minor",{"_index":3620,"title":{},"body":{"changelog.html":{}}}],["minormax",{"_index":759,"title":{},"body":{"classes/ColorOptions.html":{}}}],["minvalue",{"_index":981,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{}}}],["misc",{"_index":3431,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":3776,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":3359,"title":{},"body":{"changelog.html":{}}}],["missingenergy",{"_index":3881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mm",{"_index":2063,"title":{},"body":{"classes/RKHelper.html":{}}}],["mock",{"_index":3892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mocking",{"_index":3909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":128,"title":{},"body":{"classes/ARManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":2675,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["models/preset",{"_index":880,"title":{},"body":{"interfaces/Configuration.html":{}}}],["modelviewmatrix",{"_index":2564,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["modular",{"_index":3781,"title":{},"body":{"index.html":{}}}],["module",{"_index":3790,"title":{},"body":{"index.html":{}}}],["modules",{"_index":3808,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mom",{"_index":780,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["momcolors",{"_index":689,"title":{},"body":{"classes/ColorOptions.html":{}}}],["momentum",{"_index":720,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["momvalue",{"_index":828,"title":{},"body":{"classes/ColorOptions.html":{}}}],["momvalue.color",{"_index":837,"title":{},"body":{"classes/ColorOptions.html":{}}}],["more",{"_index":3532,"title":{},"body":{"changelog.html":{}}}],["mouse",{"_index":2253,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":2358,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":2361,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":288,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["moveindirection",{"_index":2782,"title":{},"body":{"classes/VRManager.html":{}}}],["moveindirection(direction",{"_index":2792,"title":{},"body":{"classes/VRManager.html":{}}}],["movement",{"_index":2785,"title":{},"body":{"classes/VRManager.html":{}}}],["moving",{"_index":378,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{}}}],["mss",{"_index":1572,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multidimensional",{"_index":522,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["multiple",{"_index":1408,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{}}}],["multiplyscalar(fh",{"_index":1565,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(fh2",{"_index":1560,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(qop",{"_index":1530,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(updatedscale.x",{"_index":382,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["muon",{"_index":555,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber",{"_index":602,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":611,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":612,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":557,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.color",{"_index":595,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":613,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams[face",{"_index":570,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchambers",{"_index":3880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":52,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["name('color",{"_index":1158,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('depth",{"_index":1203,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('load",{"_index":1260,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('max",{"_index":1240,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('min",{"_index":1235,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('opacity",{"_index":1163,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('random",{"_index":1227,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('reset",{"_index":1230,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('save",{"_index":1259,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('scale",{"_index":1171,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('show",{"_index":1135,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('size",{"_index":1255,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('wireframe",{"_index":1143,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('x",{"_index":1177,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('y",{"_index":1181,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('z",{"_index":1184,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name('çolor",{"_index":1273,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["name.lastindexof",{"_index":1874,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["name.split('>').foreach((nodename",{"_index":1822,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["name.substring(namestart",{"_index":1876,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["named",{"_index":1626,"title":{},"body":{"classes/LoadingManager.html":{}}}],["names",{"_index":1872,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["namespace",{"_index":3538,"title":{},"body":{"changelog.html":{}}}],["namestart",{"_index":1873,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["native",{"_index":927,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["navigator",{"_index":3131,"title":{},"body":{"classes/XRManager.html":{}}}],["ndof",{"_index":1986,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["near",{"_index":78,"title":{},"body":{"classes/ARManager.html":{}}}],["necessary",{"_index":924,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["need",{"_index":372,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/URLOptionsManager.html":{}}}],["needed",{"_index":2014,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["needing",{"_index":3374,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":213,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newcolorbyoption",{"_index":809,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newcolorbyoption?.apply",{"_index":812,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newcolorbyoption?.key",{"_index":811,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newvalue",{"_index":1166,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["next",{"_index":2471,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["next_track_id",{"_index":2472,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["nextp",{"_index":2578,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["nextpos",{"_index":2570,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["nextpos.w",{"_index":2580,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["nextpos.xy",{"_index":2579,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["ng",{"_index":3209,"title":{},"body":{"changelog.html":{}}}],["node",{"_index":737,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["node.ts",{"_index":1673,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["node.ts:10",{"_index":1701,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:105",{"_index":1735,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:115",{"_index":1712,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:12",{"_index":1705,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:129",{"_index":1732,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:14",{"_index":1707,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:149",{"_index":1715,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:16",{"_index":1695,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:175",{"_index":1724,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:18",{"_index":1700,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:196",{"_index":1726,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:20",{"_index":1703,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:22",{"_index":1706,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:242",{"_index":1718,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:260",{"_index":1723,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:27",{"_index":1697,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:30",{"_index":1696,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:32",{"_index":1693,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:66",{"_index":1709,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:8",{"_index":1702,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:83",{"_index":1730,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:92",{"_index":1728,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild",{"_index":1812,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.loadstatefromjson(childstate",{"_index":1818,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.name",{"_index":1814,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.nodelevel",{"_index":1816,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig",{"_index":1800,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.label",{"_index":1804,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.type",{"_index":1802,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig[prop",{"_index":1807,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodefound",{"_index":1819,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodejs.timeout",{"_index":2845,"title":{},"body":{"classes/VRManager.html":{}}}],["nodelevel",{"_index":1679,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename",{"_index":1823,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename.trim",{"_index":1824,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodes",{"_index":1698,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["none",{"_index":867,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["normal",{"_index":1316,"title":{},"body":{"classes/EffectsManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["normal.x",{"_index":2587,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["normal.xy",{"_index":2585,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["normalblending",{"_index":1334,"title":{},"body":{"classes/EffectsManager.html":{}}}],["normalize(curp",{"_index":2582,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["normalize(nextp",{"_index":2581,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["notable",{"_index":3161,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":139,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["notforced",{"_index":1970,"title":{},"body":{"classes/PresetView.html":{},"miscellaneous/enumerations.html":{}}}],["nothing",{"_index":953,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["now",{"_index":965,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["nowdisplayingevent",{"_index":2879,"title":{},"body":{"interfaces/Window.html":{}}}],["npm",{"_index":3788,"title":{},"body":{"index.html":{}}}],["null",{"_index":90,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":117,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["number'].includes",{"_index":2344,"title":{},"body":{"classes/SelectionManager.html":{}}}],["numofsteps",{"_index":301,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj",{"_index":1187,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["obj.eventobject",{"_index":410,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.eventobject.name",{"_index":409,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.eventobject.visible",{"_index":423,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.obj",{"_index":1451,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":69,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":822,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["object(s",{"_index":643,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.assign",{"_index":600,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["object.assign(alleventsobject",{"_index":2744,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["object.defineproperties(this",{"_index":2605,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["object.entries(this.momcolors).foreach(([key",{"_index":827,"title":{},"body":{"classes/ColorOptions.html":{}}}],["object.entries(urloptionwithids).foreach(([urloption",{"_index":2768,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["object.keys(fileswithdata",{"_index":2740,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["object.keys(intersectedobject.userdata",{"_index":2340,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(paramscopy",{"_index":2008,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(prettyparams",{"_index":2334,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(prettysymbols.symbols).find((symbol",{"_index":2000,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":3052,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.progressitems).length",{"_index":1663,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object.keys(trackscollections",{"_index":2058,"title":{},"body":{"classes/RKHelper.html":{}}}],["object.material.color.set(color",{"_index":656,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.material?.color",{"_index":654,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.name",{"_index":673,"title":{},"body":{"classes/ColorManager.html":{},"classes/ExportManager.html":{}}}],["object.userdata",{"_index":672,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.values(collection.children",{"_index":662,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.values(this.progressitems).reduce",{"_index":1659,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object3d",{"_index":247,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/SelectionManager.html":{}}}],["object['material",{"_index":675,"title":{},"body":{"classes/ColorManager.html":{}}}],["object['material']?.color",{"_index":664,"title":{},"body":{"classes/ColorManager.html":{}}}],["objectname",{"_index":3026,"title":{},"body":{"interfaces/Window.html":{}}}],["objectparams",{"_index":762,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.charge",{"_index":826,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.dparams?.[4",{"_index":843,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.mom",{"_index":846,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objects",{"_index":257,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["objects.traverse((object",{"_index":653,"title":{},"body":{"classes/ColorManager.html":{}}}],["objects.ts",{"_index":545,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["objects.ts:25",{"_index":553,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objectsgroup",{"_index":637,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{}}}],["objectsgroup.getobjectbyproperty('uuid",{"_index":2371,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectstoanimatewithsphere",{"_index":329,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objectstoanimatewithsphere.foreach((obj",{"_index":408,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objectstoanimatewithsphere.push",{"_index":402,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objecttype",{"_index":1470,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":1474,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":1472,"title":{},"body":{"classes/ExportManager.html":{}}}],["objectuserdata",{"_index":639,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{}}}],["objexporter",{"_index":1440,"title":{},"body":{"classes/ExportManager.html":{}}}],["objfolder",{"_index":1153,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["objfolder.add(this.guiparameters[name",{"_index":1188,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["objfolder.remove",{"_index":1882,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["objfolder.togglestate",{"_index":1877,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["objs",{"_index":3373,"title":{},"body":{"changelog.html":{}}}],["observable",{"_index":202,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["observed",{"_index":195,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["olddrawrangecount",{"_index":360,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["older",{"_index":3482,"title":{},"body":{"changelog.html":{}}}],["omit",{"_index":1711,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["onanimationend",{"_index":286,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["onanimationsphereupdate",{"_index":406,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onanimationsphereupdate(new",{"_index":439,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onanimationstart",{"_index":319,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["once",{"_index":399,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onchange",{"_index":789,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{}}}],["onchange((value",{"_index":1178,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["onclick",{"_index":792,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["oncolorchange",{"_index":1244,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["oncontrollerselectend",{"_index":2780,"title":{},"body":{"classes/VRManager.html":{}}}],["oncontrollerselectstart",{"_index":2781,"title":{},"body":{"classes/VRManager.html":{}}}],["ondisplayedeventchange",{"_index":2878,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":2232,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":1195,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["onend",{"_index":316,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["oneventschange",{"_index":2877,"title":{},"body":{"interfaces/Window.html":{}}}],["onfileread",{"_index":3889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onfileread?.(e.target.result.tostring",{"_index":3904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onloadcallbacks",{"_index":1613,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onloadlabels",{"_index":1246,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["onlyselectedcolorbyoption",{"_index":699,"title":{},"body":{"classes/ColorOptions.html":{}}}],["onprogress",{"_index":1622,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogress(id",{"_index":1642,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogresscallbacks",{"_index":1614,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onremovelabel",{"_index":1090,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["onsavelabels",{"_index":1245,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["onsessionended",{"_index":28,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["onsessionstarted",{"_index":131,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["onsizechange",{"_index":1243,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["ontoggle",{"_index":1242,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{}}}],["ontouchdown",{"_index":2233,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ontouchmove",{"_index":2234,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onupdate",{"_index":197,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onupdate(callback",{"_index":207,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onxrsessionended",{"_index":34,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["onxrsessionstarted",{"_index":36,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["onxrsessionstarted(session",{"_index":113,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["opacity",{"_index":487,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["opacity.onfinishchange((newvalue",{"_index":1164,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["openfile",{"_index":2868,"title":{},"body":{"interfaces/Window.html":{}}}],["openfile(url",{"_index":3032,"title":{},"body":{"interfaces/Window.html":{}}}],["opening",{"_index":1965,"title":{},"body":{"classes/PresetView.html":{},"classes/StateManager.html":{},"changelog.html":{}}}],["openingangle",{"_index":2448,"title":{},"body":{"classes/StateManager.html":{}}}],["openingclippingangle",{"_index":2391,"title":{},"body":{"classes/StateManager.html":{}}}],["operations",{"_index":13,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["optimal",{"_index":3648,"title":{},"body":{"changelog.html":{}}}],["optimize",{"_index":3458,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":746,"title":{},"body":{"classes/ColorOptions.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["optional",{"_index":54,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["optionalfeatures",{"_index":164,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["options",{"_index":684,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["options.ts",{"_index":683,"title":{},"body":{"classes/ColorOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["options.ts:124",{"_index":765,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:150",{"_index":764,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:176",{"_index":747,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:193",{"_index":771,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:207",{"_index":766,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:246",{"_index":748,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:256",{"_index":751,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:26",{"_index":731,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:28",{"_index":732,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:282",{"_index":761,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:293",{"_index":749,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:30",{"_index":744,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:300",{"_index":767,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:32",{"_index":735,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:35",{"_index":726,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:57",{"_index":729,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:65",{"_index":742,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:74",{"_index":706,"title":{},"body":{"classes/ColorOptions.html":{}}}],["origin",{"_index":445,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["original",{"_index":377,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PrettySymbols.html":{}}}],["otherwise",{"_index":821,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{}}}],["out",{"_index":365,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["outdated",{"_index":143,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["outline",{"_index":1289,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":1323,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["outlinepass.overlaymaterial.blending",{"_index":1356,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xdf5330",{"_index":1358,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xffff66",{"_index":1357,"title":{},"body":{"classes/EffectsManager.html":{}}}],["output",{"_index":1459,"title":{},"body":{"classes/ExportManager.html":{},"changelog.html":{}}}],["over",{"_index":333,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["overlay",{"_index":64,"title":{},"body":{"classes/ARManager.html":{},"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["overlaycanvas",{"_index":2128,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlayed",{"_index":3080,"title":{},"body":{"interfaces/Window.html":{}}}],["overlayrenderer",{"_index":2078,"title":{},"body":{"classes/RendererManager.html":{}}}],["overlays",{"_index":67,"title":{},"body":{"classes/ARManager.html":{}}}],["overridden",{"_index":1774,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["override",{"_index":154,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["overriden",{"_index":994,"title":{},"body":{"classes/Cut.html":{}}}],["overview",{"_index":3809,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":2004,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["p",{"_index":1494,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["p.y",{"_index":2498,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["p.z",{"_index":2499,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["package",{"_index":3174,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["packages",{"_index":3250,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":2651,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["panel",{"_index":1597,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{}}}],["param",{"_index":153,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["parameter",{"_index":1998,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parameters",{"_index":50,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/typealiases.html":{}}}],["parameters.ts",{"_index":3836,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["parameterss",{"_index":1994,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parametrised",{"_index":3662,"title":{},"body":{"changelog.html":{}}}],["paramkey",{"_index":2007,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["params",{"_index":646,"title":{},"body":{"classes/ColorManager.html":{},"classes/PrettySymbols.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{}}}],["paramscopy",{"_index":2005,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams",{"_index":2029,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[0",{"_index":2026,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[1",{"_index":2028,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[2",{"_index":2021,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[3",{"_index":2020,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[4",{"_index":2023,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy?.dparams",{"_index":2018,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy['pos",{"_index":2015,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[paramkey",{"_index":2011,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[symbol",{"_index":2010,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parent",{"_index":1680,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/ScriptLoader.html":{}}}],["parentelement",{"_index":2193,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentelement.appendchild(scriptelement",{"_index":2222,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentnode",{"_index":1866,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["parentnode.addchild",{"_index":1875,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["parse",{"_index":1455,"title":{},"body":{"classes/ExportManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["parsefloat(objectparams?.dparams?.[4",{"_index":845,"title":{},"body":{"classes/ColorOptions.html":{}}}],["parsegltfgeometry",{"_index":3002,"title":{},"body":{"interfaces/Window.html":{}}}],["parseint(objectparams?.dparams?.[4",{"_index":825,"title":{},"body":{"classes/ColorOptions.html":{}}}],["parseobjgeometry",{"_index":2982,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixdisplay(input",{"_index":2990,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":2935,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":2980,"title":{},"body":{"interfaces/Window.html":{}}}],["parsing",{"_index":3615,"title":{},"body":{"changelog.html":{}}}],["part",{"_index":549,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["particle",{"_index":474,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["particle1",{"_index":488,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle1.clone",{"_index":491,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle1.position.setz(distancefromorigin",{"_index":492,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle2",{"_index":490,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle2.position.setz",{"_index":493,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlecolor",{"_index":479,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlegeometry",{"_index":483,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlematerial",{"_index":486,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particles",{"_index":473,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlesize",{"_index":475,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletoorigin",{"_index":498,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens",{"_index":495,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens.push(particletoorigin",{"_index":500,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens[0].oncomplete",{"_index":501,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["parts",{"_index":2922,"title":{},"body":{"interfaces/Window.html":{}}}],["pass",{"_index":1290,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["passed",{"_index":1010,"title":{},"body":{"classes/Cut.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["passes",{"_index":1305,"title":{},"body":{"classes/EffectsManager.html":{}}}],["passindex",{"_index":1360,"title":{},"body":{"classes/EffectsManager.html":{}}}],["path",{"_index":238,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["path/to/geometry.obj",{"_index":3796,"title":{},"body":{"index.html":{}}}],["pathlength",{"_index":2373,"title":{},"body":{"classes/State.html":{}}}],["paths",{"_index":3210,"title":{},"body":{"changelog.html":{}}}],["per",{"_index":916,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["perform",{"_index":1029,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performance",{"_index":2142,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["performed",{"_index":1490,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performing",{"_index":1485,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["periodically",{"_index":3247,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":3306,"title":{},"body":{"changelog.html":{}}}],["persist",{"_index":3423,"title":{},"body":{"changelog.html":{}}}],["perspective",{"_index":1859,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["perspectivecamera",{"_index":46,"title":{},"body":{"classes/ARManager.html":{},"classes/XRManager.html":{}}}],["phi",{"_index":901,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["phi=0",{"_index":955,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phi=pi",{"_index":962,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phnx",{"_index":2989,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":66,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["phoenix.min.js",{"_index":3802,"title":{},"body":{"index.html":{}}}],["phoenixloader",{"_index":2670,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["phoenixmenu",{"_index":2430,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["phoenixmenuconfigs",{"_index":1736,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenuconfigs[keyof",{"_index":1738,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenunode",{"_index":703,"title":{"classes/PhoenixMenuNode.html":{}},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"coverage.html":{}}}],["phoenixmenunode(name",{"_index":1745,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenunode.name",{"_index":1927,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["phoenixmenuroot",{"_index":861,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["phoenixmenuui",{"_index":1829,"title":{"classes/PhoenixMenuUI.html":{}},"body":{"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["phoenixnodejson",{"_index":1784,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children",{"_index":1791,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children'].push(child.getnodestate",{"_index":1792,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['childrenactive",{"_index":1788,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['configs",{"_index":1790,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['name",{"_index":1785,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['nodelevel",{"_index":1786,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['togglestate",{"_index":1787,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixobjects",{"_index":550,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["phoenixscene",{"_index":2991,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":2994,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":2993,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixui",{"_index":1032,"title":{"interfaces/PhoenixUI.html":{}},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{},"coverage.html":{}}}],["phoenixurloptions",{"_index":2676,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["physics",{"_index":546,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/PrettySymbols.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["pi",{"_index":906,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["pick",{"_index":2754,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["picker",{"_index":1155,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["picture",{"_index":2911,"title":{},"body":{"interfaces/Window.html":{}}}],["pipe",{"_index":3675,"title":{},"body":{"changelog.html":{}}}],["planarcalocells",{"_index":3472,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["planarcalorimeters",{"_index":3427,"title":{},"body":{"changelog.html":{}}}],["plane",{"_index":249,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["planes",{"_index":441,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["playground",{"_index":3335,"title":{},"body":{"changelog.html":{}}}],["plength",{"_index":1573,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["point",{"_index":1510,"title":{},"body":{"classes/Field.html":{},"classes/PresetView.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pointing",{"_index":1959,"title":{},"body":{"classes/PresetView.html":{}}}],["points",{"_index":2489,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points.length",{"_index":2500,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[0].y",{"_index":2495,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[0].z",{"_index":2496,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[i].y",{"_index":2502,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[i].z",{"_index":2503,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["pos",{"_index":267,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos.x",{"_index":2053,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos.y",{"_index":2054,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos.z",{"_index":2051,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos1",{"_index":1522,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos2",{"_index":1533,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos[0",{"_index":275,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pos[1",{"_index":277,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pos[2",{"_index":279,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["posible",{"_index":2915,"title":{},"body":{"interfaces/Window.html":{}}}],["position",{"_index":79,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["positioning",{"_index":1174,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["positions",{"_index":227,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["positions.concat(extrapolatedpos",{"_index":2074,"title":{},"body":{"classes/RKHelper.html":{}}}],["positions.slice(1).foreach",{"_index":538,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].duration",{"_index":534,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].easing",{"_index":536,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].position",{"_index":533,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positive",{"_index":961,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["possible",{"_index":727,"title":{},"body":{"classes/ColorOptions.html":{},"changelog.html":{}}}],["post",{"_index":2292,"title":{},"body":{"classes/SelectionManager.html":{}}}],["powerpreference",{"_index":2140,"title":{},"body":{"classes/RendererManager.html":{}}}],["preselectionantialias",{"_index":2235,"title":{},"body":{"classes/SelectionManager.html":{}}}],["presenting",{"_index":3785,"title":{},"body":{"index.html":{}}}],["preset",{"_index":224,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["presetanimations",{"_index":862,"title":{},"body":{"interfaces/Configuration.html":{}}}],["presets",{"_index":3876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["presetview",{"_index":879,"title":{"classes/PresetView.html":{}},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":863,"title":{},"body":{"interfaces/Configuration.html":{}}}],["prettier",{"_index":3410,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":1981,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams",{"_index":2019,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['d0",{"_index":2025,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['q",{"_index":2024,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['z0",{"_index":2027,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['|p",{"_index":2022,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettyparams",{"_index":2331,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettyparams[key",{"_index":2338,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbol",{"_index":1999,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols",{"_index":774,"title":{"classes/PrettySymbols.html":{}},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["prettysymbols.getprettyparams",{"_index":2332,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbols.getprettysymbol('charge",{"_index":714,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol('charge')}=${chargevalue",{"_index":814,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol('mom",{"_index":721,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol(cut.field",{"_index":1907,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["prettysymbols.getprettysymbol(paramkey",{"_index":2009,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols.symbols[symbol].includes(param",{"_index":2001,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["previous",{"_index":75,"title":{},"body":{"classes/ARManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["previousscale",{"_index":374,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween",{"_index":537,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween.chain(tween",{"_index":540,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween.oncomplete(onend",{"_index":541,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previousvalues",{"_index":21,"title":{},"body":{"classes/ARManager.html":{}}}],["prevlocalclipping",{"_index":467,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["prevnode",{"_index":1821,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.addchild(nodename",{"_index":1828,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.children.find(child",{"_index":1826,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.findintree(nodename",{"_index":1825,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevp",{"_index":2575,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["prevpos",{"_index":2568,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["prevpos.w",{"_index":2577,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["prevpos.xy",{"_index":2576,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["print",{"_index":2016,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["printed",{"_index":1993,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["private",{"_index":20,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["process",{"_index":554,"title":{},"body":{"classes/CMSObjects.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["processes",{"_index":3049,"title":{},"body":{"interfaces/Window.html":{}}}],["processeventfile",{"_index":2706,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["processeventfile(file",{"_index":2712,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["processing",{"_index":875,"title":{},"body":{"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"changelog.html":{},"index.html":{}}}],["progress",{"_index":148,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["progresses",{"_index":1644,"title":{},"body":{"classes/LoadingManager.html":{}}}],["progressitems",{"_index":1615,"title":{},"body":{"classes/LoadingManager.html":{}}}],["project",{"_index":3162,"title":{},"body":{"changelog.html":{}}}],["project/jsroot/blob/19ce116b68701ab45e0a092c673119bf97ede0c2/modules/core.mjs#l241",{"_index":3030,"title":{},"body":{"interfaces/Window.html":{}}}],["projectionmatrix",{"_index":2563,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["promise",{"_index":2202,"title":{},"body":{"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["promise((resolve",{"_index":2205,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["promises",{"_index":2735,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["prop",{"_index":1806,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["propagate",{"_index":1567,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagate(startpos",{"_index":2181,"title":{},"body":{"classes/RungeKutta.html":{}}}],["propagation",{"_index":314,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["propagator",{"_index":2038,"title":{},"body":{"classes/RKHelper.html":{}}}],["proper",{"_index":3310,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":3426,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"properties.html":{}}}],["property",{"_index":753,"title":{},"body":{"classes/ColorOptions.html":{}}}],["property's",{"_index":641,"title":{},"body":{"classes/ColorManager.html":{}}}],["props",{"_index":2339,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.join",{"_index":2350,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":2349,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":26,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["provided",{"_index":3198,"title":{},"body":{"changelog.html":{}}}],["providing",{"_index":1868,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["pseudorapidity",{"_index":929,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["pt",{"_index":1984,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["public",{"_index":24,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["pushed",{"_index":2791,"title":{},"body":{"classes/VRManager.html":{}}}],["puts",{"_index":959,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["q",{"_index":1493,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qop",{"_index":1498,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["quaternion",{"_index":911,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion.multiply(quaternion2",{"_index":967,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":958,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion2",{"_index":963,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion2.setfromaxisangle(new",{"_index":964,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["query",{"_index":2653,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["radians",{"_index":937,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["radius",{"_index":299,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["random",{"_index":635,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"changelog.html":{}}}],["randomcolor",{"_index":1214,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["randomly",{"_index":649,"title":{},"body":{"classes/ColorManager.html":{}}}],["range",{"_index":642,"title":{},"body":{"classes/ColorManager.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["rangeslider",{"_index":1778,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["ratio",{"_index":1495,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["raycaster",{"_index":2285,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":2366,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":2365,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":2364,"title":{},"body":{"classes/SelectionManager.html":{}}}],["reachedhits",{"_index":414,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["reachedhits.length",{"_index":418,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["reaches",{"_index":400,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["react",{"_index":3807,"title":{},"body":{"index.html":{}}}],["read",{"_index":2739,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["reader",{"_index":3901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.onload",{"_index":3903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.readastext(configfile",{"_index":3906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reading",{"_index":2737,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["readonly",{"_index":22,"title":{},"body":{"classes/ARManager.html":{},"classes/PrettySymbols.html":{},"classes/VRManager.html":{}}}],["readzipfile",{"_index":2673,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["readzipfile(filebuffer",{"_index":2736,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["realistic",{"_index":3571,"title":{},"body":{"changelog.html":{}}}],["reason",{"_index":2751,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["receives",{"_index":2931,"title":{},"body":{"interfaces/Window.html":{}}}],["recover",{"_index":1426,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["reduce",{"_index":3179,"title":{},"body":{"changelog.html":{}}}],["redundant",{"_index":3563,"title":{},"body":{"changelog.html":{}}}],["refactor",{"_index":3391,"title":{},"body":{"changelog.html":{}}}],["refactoring",{"_index":3695,"title":{},"body":{"changelog.html":{}}}],["reference",{"_index":1282,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["reject",{"_index":2206,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["related",{"_index":12,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["released",{"_index":2790,"title":{},"body":{"classes/VRManager.html":{}}}],["reload",{"_index":2952,"title":{},"body":{"interfaces/Window.html":{}}}],["remaining",{"_index":437,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["remove",{"_index":469,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["remove').name('remove",{"_index":1189,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removechild",{"_index":1689,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removechild(child",{"_index":1729,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removecontrols",{"_index":2089,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":2117,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":1095,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{}}}],["removeeventlistener('click",{"_index":2318,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('mousemove",{"_index":2317,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removeeventlistener('touchstart",{"_index":2319,"title":{},"body":{"classes/SelectionManager.html":{}}}],["removelabel",{"_index":1049,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["removelabel').name('remove",{"_index":1280,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removelabel(labelid",{"_index":1105,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["removeobj",{"_index":1050,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removeobj(object",{"_index":1108,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["removepass",{"_index":1300,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removepass(pass",{"_index":1328,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removing",{"_index":1101,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["render",{"_index":1296,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["render(scene",{"_index":2120,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendered",{"_index":2129,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":29,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["renderer.localclippingenabled",{"_index":2177,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":2136,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":2133,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererelement",{"_index":2356,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientheight",{"_index":2363,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientwidth",{"_index":2360,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererheight",{"_index":2159,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderermanager",{"_index":250,"title":{"classes/RendererManager.html":{}},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":2079,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererwidth",{"_index":2156,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":1315,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["renderpass",{"_index":1313,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renderpass(this.scene",{"_index":1343,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renders",{"_index":3013,"title":{},"body":{"interfaces/Window.html":{}}}],["repeating",{"_index":3383,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":3566,"title":{},"body":{"changelog.html":{}}}],["repository",{"_index":3817,"title":{},"body":{"properties.html":{}}}],["representation",{"_index":2787,"title":{},"body":{"classes/VRManager.html":{}}}],["representing",{"_index":632,"title":{},"body":{"classes/ColorManager.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":1383,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["request",{"_index":3557,"title":{},"body":{"changelog.html":{}}}],["requesting",{"_index":106,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["requestsession(`immersive",{"_index":3136,"title":{},"body":{"classes/XRManager.html":{}}}],["required",{"_index":104,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"index.html":{}}}],["res.json",{"_index":2701,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["reset",{"_index":985,"title":{},"body":{"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["reset/remove",{"_index":3113,"title":{},"body":{"interfaces/Window.html":{}}}],["resetcut",{"_index":1216,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["resetlabels",{"_index":3114,"title":{},"body":{"interfaces/Window.html":{}}}],["resize",{"_index":3573,"title":{},"body":{"changelog.html":{}}}],["resolution",{"_index":2556,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["resolution.y",{"_index":2560,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["resolve",{"_index":2218,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["resources",{"_index":2881,"title":{},"body":{"interfaces/Window.html":{}}}],["responsible",{"_index":624,"title":{},"body":{"classes/ColorManager.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{}}}],["restore",{"_index":436,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{}}}],["restored",{"_index":1699,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["restoring",{"_index":376,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["restructure",{"_index":3544,"title":{},"body":{"changelog.html":{}}}],["result",{"_index":1448,"title":{},"body":{"classes/ExportManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["results",{"_index":186,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1396,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":162,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":103,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["returnvec",{"_index":1540,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["reverse",{"_index":948,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["revert",{"_index":465,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["reverting",{"_index":2692,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["reverts",{"_index":3177,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":589,"title":{},"body":{"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["rk",{"_index":3434,"title":{},"body":{"changelog.html":{}}}],["rkhelper",{"_index":2030,"title":{"classes/RKHelper.html":{}},"body":{"classes/RKHelper.html":{},"changelog.html":{},"coverage.html":{}}}],["rkhelper.extrapolatetrackpositions(track",{"_index":2061,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkhelper.extrapolationlimit",{"_index":2039,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkstate",{"_index":1579,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.dir",{"_index":1581,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.maxstepsize",{"_index":1584,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.p",{"_index":1582,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pathlength",{"_index":1585,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pos",{"_index":1580,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.q",{"_index":1583,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["robustness",{"_index":3407,"title":{},"body":{"changelog.html":{}}}],["rollup",{"_index":3588,"title":{},"body":{"changelog.html":{}}}],["root",{"_index":166,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["rotate",{"_index":912,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{}}}],["rotate.chain(end",{"_index":311,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["rotateopeningangleclipping",{"_index":2456,"title":{},"body":{"classes/StateManager.html":{}}}],["rotatestartangleclipping",{"_index":2454,"title":{},"body":{"classes/StateManager.html":{}}}],["rotationpositions",{"_index":307,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["rotations",{"_index":925,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["routes",{"_index":3683,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1405,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["run${this.eventmetadata.runnumber}_evt${this.eventmetadata.eventnumber}.json",{"_index":2438,"title":{},"body":{"classes/StateManager.html":{}}}],["runge",{"_index":1486,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rungekutta",{"_index":1488,"title":{"classes/RungeKutta.html":{}},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["runnumber",{"_index":2405,"title":{},"body":{"classes/StateManager.html":{}}}],["same",{"_index":3639,"title":{},"body":{"changelog.html":{}}}],["sample",{"_index":3442,"title":{},"body":{"changelog.html":{}}}],["save",{"_index":1433,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":1427,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":1418,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":1431,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile",{"_index":1444,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["savefile(output",{"_index":1464,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile(result",{"_index":1450,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":1419,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":1434,"title":{},"body":{"classes/ExportManager.html":{}}}],["savelabels",{"_index":1250,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["saves",{"_index":2933,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":1420,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":1436,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestateasjson",{"_index":2396,"title":{},"body":{"classes/StateManager.html":{}}}],["scale",{"_index":77,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["scalemenu",{"_index":1170,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["scalemenu.onchange((value",{"_index":1172,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["scalescene",{"_index":37,"title":{},"body":{"classes/ARManager.html":{}}}],["scalescene(scale",{"_index":116,"title":{},"body":{"classes/ARManager.html":{}}}],["scaletween",{"_index":367,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["scaletween.onupdate((updatedscale",{"_index":373,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["scaling",{"_index":364,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["scene",{"_index":44,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["scene's",{"_index":2388,"title":{},"body":{"classes/StateManager.html":{}}}],["scene.background",{"_index":2152,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.getobjectbyname('vertices",{"_index":668,"title":{},"body":{"classes/ColorManager.html":{}}}],["scene.getobjectbyname(linkedtrackcollection",{"_index":677,"title":{},"body":{"classes/ColorManager.html":{}}}],["scene.phnx",{"_index":1465,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene.scale.x",{"_index":158,"title":{},"body":{"classes/ARManager.html":{}}}],["scene/geometry",{"_index":3008,"title":{},"body":{"interfaces/Window.html":{}}}],["scenecolor",{"_index":2151,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":1453,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":1462,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":3054,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":3057,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":137,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"coverage.html":{}}}],["scenemanager.event_data_id",{"_index":181,"title":{},"body":{"classes/ARManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["scenemanager.geometries_id",{"_index":182,"title":{},"body":{"classes/ARManager.html":{}}}],["scenemanager.labels_id",{"_index":183,"title":{},"body":{"classes/ARManager.html":{},"classes/PhoenixMenuUI.html":{}}}],["scenescale",{"_index":70,"title":{},"body":{"classes/ARManager.html":{}}}],["sceneurl",{"_index":3072,"title":{},"body":{"interfaces/Window.html":{}}}],["screen",{"_index":2908,"title":{},"body":{"interfaces/Window.html":{}}}],["screenshot",{"_index":3655,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":2186,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{},"index.html":{}}}],["script[src",{"_index":2209,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement",{"_index":2211,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.addeventlistener('load",{"_index":2217,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.onerror",{"_index":2220,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.setattribute('data",{"_index":2216,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.src",{"_index":2215,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.type",{"_index":2213,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists",{"_index":2207,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists.length",{"_index":2210,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].addeventlistener('load",{"_index":2225,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].dataset.loaded",{"_index":2224,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptfor",{"_index":2192,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptloader",{"_index":2184,"title":{"classes/ScriptLoader.html":{}},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["scripts",{"_index":2189,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["scripturl",{"_index":2198,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["search",{"_index":2639,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["second",{"_index":1519,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["secondary",{"_index":2100,"title":{},"body":{"classes/RendererManager.html":{}}}],["see",{"_index":933,"title":{},"body":{"classes/CoordinateHelper.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["select",{"_index":2788,"title":{},"body":{"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["selected",{"_index":745,"title":{},"body":{"classes/ColorOptions.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["selectedcolorbyoption",{"_index":690,"title":{},"body":{"classes/ColorOptions.html":{}}}],["selectedobject",{"_index":2236,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectend",{"_index":2816,"title":{},"body":{"classes/VRManager.html":{}}}],["selecting",{"_index":2265,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":2228,"title":{},"body":{"classes/SelectionManager.html":{},"changelog.html":{}}}],["selectionmanager",{"_index":2226,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["selectstart",{"_index":2814,"title":{},"body":{"classes/VRManager.html":{}}}],["separate",{"_index":3546,"title":{},"body":{"changelog.html":{}}}],["separated",{"_index":757,"title":{},"body":{"classes/ColorOptions.html":{}}}],["separator",{"_index":2965,"title":{},"body":{"interfaces/Window.html":{}}}],["service",{"_index":1604,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"index.html":{}}}],["session",{"_index":83,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["session.addeventlistener('end",{"_index":3141,"title":{},"body":{"classes/XRManager.html":{}}}],["session_type",{"_index":23,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["sessioninit",{"_index":30,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["sessiontype",{"_index":3122,"title":{},"body":{"classes/XRManager.html":{}}}],["set",{"_index":101,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["set/get",{"_index":2167,"title":{},"body":{"classes/RendererManager.html":{}}}],["setantialiasing",{"_index":1301,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setantialiasing(antialias",{"_index":1330,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setcamera",{"_index":2397,"title":{},"body":{"classes/StateManager.html":{}}}],["setcamera(camera",{"_index":2413,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled",{"_index":2398,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled(clipping",{"_index":2414,"title":{},"body":{"classes/StateManager.html":{}}}],["setenablemax",{"_index":1916,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["setenablemin",{"_index":1913,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["seteventdisplay",{"_index":2399,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay(eventdisplay",{"_index":2416,"title":{},"body":{"classes/StateManager.html":{}}}],["setfixoverlay",{"_index":2090,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":2121,"title":{},"body":{"classes/RendererManager.html":{}}}],["setflat",{"_index":2972,"title":{},"body":{"interfaces/Window.html":{}}}],["setinterval",{"_index":2850,"title":{},"body":{"classes/VRManager.html":{}}}],["setlocalclippingenabled",{"_index":2091,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":2123,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":2092,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":2125,"title":{},"body":{"classes/RendererManager.html":{}}}],["setopeningclippingangle",{"_index":2400,"title":{},"body":{"classes/StateManager.html":{}}}],["setopeningclippingangle(angle",{"_index":2418,"title":{},"body":{"classes/StateManager.html":{}}}],["setoverlayrenderer",{"_index":2093,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":2126,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["setphoenixmenuroot",{"_index":2401,"title":{},"body":{"classes/StateManager.html":{}}}],["setphoenixmenuroot(phoenixmenuroot",{"_index":2420,"title":{},"body":{"classes/StateManager.html":{}}}],["setrenderers",{"_index":2094,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":2130,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":3079,"title":{},"body":{"interfaces/Window.html":{}}}],["setselectedobject",{"_index":2242,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":2281,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":2243,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":2283,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setstartclippingangle",{"_index":2402,"title":{},"body":{"classes/StateManager.html":{}}}],["setstartclippingangle(angle",{"_index":2422,"title":{},"body":{"classes/StateManager.html":{}}}],["settimeout",{"_index":529,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["setting",{"_index":2114,"title":{},"body":{"classes/RendererManager.html":{}}}],["settings",{"_index":2865,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/enumerations.html":{}}}],["settolocalstorage",{"_index":3715,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setup",{"_index":3396,"title":{},"body":{"changelog.html":{}}}],["setupvrcontrols",{"_index":2783,"title":{},"body":{"classes/VRManager.html":{}}}],["setxrsession",{"_index":41,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["setxrsession(renderer",{"_index":130,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["shade",{"_index":3646,"title":{},"body":{"changelog.html":{}}}],["shaded",{"_index":2973,"title":{},"body":{"interfaces/Window.html":{}}}],["shader",{"_index":2544,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shaderchunk",{"_index":2469,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shaderchunk.tracks_frag",{"_index":2603,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shaderchunk.tracks_vert",{"_index":2601,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shaderchunk['tracks_frag",{"_index":2594,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shaderchunk['tracks_vert",{"_index":2545,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shadermaterial",{"_index":2464,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shadre",{"_index":2593,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["sharable",{"_index":3436,"title":{},"body":{"changelog.html":{}}}],["share",{"_index":3508,"title":{},"body":{"changelog.html":{}}}],["shot",{"_index":2909,"title":{},"body":{"interfaces/Window.html":{}}}],["shouldcolorbycharge",{"_index":700,"title":{},"body":{"classes/ColorOptions.html":{}}}],["shouldcolorbycharge(objectparams",{"_index":769,"title":{},"body":{"classes/ColorOptions.html":{}}}],["show",{"_index":513,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["show/hide",{"_index":1077,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["showgeometriesmenu",{"_index":1133,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showgeometriesmenu.onchange((value",{"_index":1137,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showing",{"_index":1389,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["showing/hiding",{"_index":1132,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu",{"_index":1167,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu.onchange((value",{"_index":1168,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["showmenu.onchange(ontoggle",{"_index":1253,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["shown",{"_index":1595,"title":{},"body":{"classes/InfoLogger.html":{}}}],["shows",{"_index":65,"title":{},"body":{"classes/ARManager.html":{}}}],["si",{"_index":1496,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["side",{"_index":598,"title":{},"body":{"classes/CMSObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["sides",{"_index":2969,"title":{},"body":{"interfaces/Window.html":{}}}],["simple",{"_index":3203,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["simplify",{"_index":3303,"title":{},"body":{"changelog.html":{}}}],["single",{"_index":524,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["singlelabelnode",{"_index":1932,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["singlelabelnode.name",{"_index":1933,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["singleton",{"_index":1623,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["size",{"_index":476,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["slider",{"_index":992,"title":{},"body":{"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["sliders",{"_index":1905,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["slidervalue",{"_index":834,"title":{},"body":{"classes/ColorOptions.html":{}}}],["smaller",{"_index":3043,"title":{},"body":{"interfaces/Window.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{}}}],["space",{"_index":1569,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["spec",{"_index":3624,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":1897,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["specified",{"_index":1949,"title":{},"body":{"classes/PresetView.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":970,"title":{},"body":{"classes/Cut.html":{},"interfaces/Window.html":{}}}],["sphere",{"_index":246,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["sphere(new",{"_index":328,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["sphere.attributes.position",{"_index":454,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spheregeometry",{"_index":245,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spheregeometry(1",{"_index":450,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spheregeometry(particlesize",{"_index":484,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spherical",{"_index":449,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["sphericaltocartesian",{"_index":898,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["sphericaltocartesian(radius",{"_index":938,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["split",{"_index":3549,"title":{},"body":{"changelog.html":{}}}],["splitting",{"_index":3551,"title":{},"body":{"changelog.html":{}}}],["src/.../active",{"_index":3824,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../browser",{"_index":3841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../color",{"_index":3779,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../config",{"_index":3826,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../constants.ts",{"_index":3840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.ts",{"_index":3843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../geometry",{"_index":3835,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../index.ts",{"_index":3839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../labels.ts",{"_index":3842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../preset",{"_index":3778,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../url",{"_index":3844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../xr",{"_index":3780,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../zip.ts",{"_index":3845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/event",{"_index":2861,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["src/helpers/active",{"_index":189,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/helpers/browser",{"_index":3711,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/constants.ts",{"_index":3716,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/coordinate",{"_index":889,"title":{},"body":{"classes/CoordinateHelper.html":{},"coverage.html":{}}}],["src/helpers/file.ts",{"_index":3718,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/info",{"_index":1586,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["src/helpers/labels.ts",{"_index":3720,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/pretty",{"_index":1979,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["src/helpers/rk",{"_index":2031,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["src/helpers/runge",{"_index":1479,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["src/helpers/zip.ts",{"_index":3724,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/models/cut.model.ts",{"_index":969,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/lib/models/cut.model.ts:10",{"_index":996,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:12",{"_index":987,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:24",{"_index":1002,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:25",{"_index":1006,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:26",{"_index":1004,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:27",{"_index":1007,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:28",{"_index":1005,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:29",{"_index":1003,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:38",{"_index":1012,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:43",{"_index":1015,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:48",{"_index":1009,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:58",{"_index":1016,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:6",{"_index":1001,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:8",{"_index":1000,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/preset",{"_index":1945,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/types/configuration.ts",{"_index":853,"title":{},"body":{"interfaces/Configuration.html":{},"coverage.html":{}}}],["src/lib/types/geometry",{"_index":3838,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/loaders/cms",{"_index":3727,"title":{},"body":{"coverage.html":{}}}],["src/loaders/edm4hep",{"_index":3729,"title":{},"body":{"coverage.html":{}}}],["src/loaders/event",{"_index":1363,"title":{},"body":{"interfaces/EventDataLoader.html":{},"coverage.html":{}}}],["src/loaders/jivexml",{"_index":3733,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jsroot",{"_index":3735,"title":{},"body":{"coverage.html":{}}}],["src/loaders/objects/cms",{"_index":544,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/loaders/objects/phoenix",{"_index":3737,"title":{},"body":{"coverage.html":{}}}],["src/loaders/objects/tracks.ts",{"_index":2463,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{}}}],["src/loaders/objects/tracks.ts:102",{"_index":2624,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:17",{"_index":2618,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:19",{"_index":2619,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:21",{"_index":2620,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:23",{"_index":2617,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:230",{"_index":2467,"title":{},"body":{"classes/TracksMaterial.html":{}}}],["src/loaders/objects/tracks.ts:25",{"_index":2614,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:27",{"_index":2615,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:29",{"_index":2622,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:31",{"_index":2621,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:33",{"_index":2616,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:35",{"_index":2613,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:60",{"_index":2623,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/phoenix",{"_index":3740,"title":{},"body":{"coverage.html":{}}}],["src/loaders/script",{"_index":2185,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["src/loaders/trackml",{"_index":3742,"title":{},"body":{"coverage.html":{}}}],["src/managers/loading",{"_index":1611,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["src/managers/state",{"_index":2387,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{}}}],["src/managers/three",{"_index":6,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/managers/ui",{"_index":682,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/managers/url",{"_index":2626,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":3798,"title":{},"body":{"index.html":{}}}],["start",{"_index":229,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["start.chain(startxaxis",{"_index":309,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["start.start",{"_index":313,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startangle",{"_index":2446,"title":{},"body":{"classes/StateManager.html":{}}}],["startclippingangle",{"_index":2392,"title":{},"body":{"classes/StateManager.html":{}}}],["startclone.delay(500",{"_index":308,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startdir",{"_index":1570,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["started",{"_index":115,"title":{"changelog.html":{},"index.html":{}},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["starting",{"_index":1345,"title":{},"body":{"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{}}}],["startpos",{"_index":283,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["startpos[2",{"_index":296,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["starts",{"_index":134,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuUI.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["startxaxis",{"_index":297,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startxaxis.chain(rotatestart",{"_index":310,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["state",{"_index":1489,"title":{"classes/State.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["state.dir",{"_index":1521,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.add",{"_index":1561,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().cross(b_first).multiplyscalar(qop",{"_index":1515,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.cross(b_first",{"_index":1513,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.normalize",{"_index":1566,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.p",{"_index":1501,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos",{"_index":1520,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.add(state.dir.clone().multiplyscalar(fh)).add",{"_index":1557,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.q",{"_index":1499,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.stepsize",{"_index":1552,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.unitc",{"_index":1500,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["statemanager",{"_index":2386,"title":{"classes/StateManager.html":{}},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["statemanager.instance",{"_index":2425,"title":{},"body":{"classes/StateManager.html":{}}}],["statemanager.loadstatefromjson(jsonstate",{"_index":2703,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["statements",{"_index":3707,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["stats",{"_index":2763,"title":{},"body":{"classes/URLOptionsManager.html":{},"dependencies.html":{}}}],["statselement",{"_index":2762,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["step",{"_index":306,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["step(state",{"_index":1492,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepdistance",{"_index":2793,"title":{},"body":{"classes/VRManager.html":{}}}],["steps",{"_index":1568,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepsize",{"_index":2374,"title":{},"body":{"classes/State.html":{}}}],["still",{"_index":146,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["stop",{"_index":2852,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["storage",{"_index":3311,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["storage.ts",{"_index":3712,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stored",{"_index":754,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["storing",{"_index":2880,"title":{},"body":{"interfaces/Window.html":{}}}],["stretch",{"_index":2924,"title":{},"body":{"interfaces/Window.html":{}}}],["stretched",{"_index":2921,"title":{},"body":{"interfaces/Window.html":{}}}],["string",{"_index":80,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":1401,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["style.setproperty('display",{"_index":2767,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["styles",{"_index":3432,"title":{},"body":{"changelog.html":{}}}],["sub",{"_index":2967,"title":{},"body":{"interfaces/Window.html":{}}}],["subfolder",{"_index":1086,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["super",{"_index":2478,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["super(xrsessiontype.ar",{"_index":156,"title":{},"body":{"classes/ARManager.html":{}}}],["super(xrsessiontype.vr",{"_index":2806,"title":{},"body":{"classes/VRManager.html":{}}}],["super.onxrsessionended",{"_index":180,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["super.onxrsessionstarted(session",{"_index":177,"title":{},"body":{"classes/ARManager.html":{}}}],["super.setxrsession(renderer",{"_index":2811,"title":{},"body":{"classes/VRManager.html":{}}}],["support",{"_index":3522,"title":{},"body":{"changelog.html":{}}}],["sure",{"_index":3252,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":1978,"title":{},"body":{"classes/PresetView.html":{}}}],["swap",{"_index":2135,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":2137,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":2095,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":2132,"title":{},"body":{"classes/RendererManager.html":{}}}],["switch",{"_index":3535,"title":{},"body":{"changelog.html":{}}}],["switching",{"_index":878,"title":{},"body":{"interfaces/Configuration.html":{}}}],["symbol",{"_index":1997,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols",{"_index":776,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuUI.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{}}}],["symbols.ts",{"_index":1980,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["symbols.ts:24",{"_index":1996,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:37",{"_index":1992,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:6",{"_index":1990,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["t",{"_index":200,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{}}}],["table",{"_index":3763,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3762,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":2197,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["take",{"_index":2342,"title":{},"body":{"classes/SelectionManager.html":{}}}],["taken",{"_index":3001,"title":{},"body":{"interfaces/Window.html":{}}}],["takes",{"_index":1382,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["target",{"_index":1951,"title":{},"body":{"classes/PresetView.html":{}}}],["temp",{"_index":2176,"title":{},"body":{"classes/RendererManager.html":{}}}],["tempanchor",{"_index":3912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.click",{"_index":3918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.download",{"_index":3917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.href",{"_index":3915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.remove",{"_index":3919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.style.display",{"_index":3914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["templates",{"_index":3282,"title":{},"body":{"changelog.html":{}}}],["temporary",{"_index":914,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["tesla",{"_index":1484,"title":{},"body":{"classes/Field.html":{}}}],["test",{"_index":1204,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["tested",{"_index":2047,"title":{},"body":{"classes/RKHelper.html":{}}}],["tests",{"_index":3218,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":2348,"title":{},"body":{"classes/SelectionManager.html":{},"changelog.html":{}}}],["text/javascript",{"_index":2214,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["text/plain",{"_index":1452,"title":{},"body":{"classes/ExportManager.html":{}}}],["then((jsonstate",{"_index":2702,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["then((res",{"_index":2700,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["then((session",{"_index":3137,"title":{},"body":{"classes/XRManager.html":{}}}],["theta",{"_index":907,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["thetatoeta",{"_index":899,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["thetatoeta(theta",{"_index":940,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["third",{"_index":1531,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["this._attributes",{"_index":2505,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.color",{"_index":2528,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.color.needsupdate",{"_index":2529,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.counter",{"_index":2530,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.counter.needsupdate",{"_index":2531,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.index",{"_index":2532,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.index.needsupdate",{"_index":2533,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.next",{"_index":2522,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.next.needsupdate",{"_index":2523,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.position",{"_index":2517,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.position.count",{"_index":2506,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.position.needsupdate",{"_index":2519,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.previous",{"_index":2520,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.previous.needsupdate",{"_index":2521,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.side",{"_index":2524,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.side.needsupdate",{"_index":2525,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.track_id",{"_index":2526,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.track_id.needsupdate",{"_index":2527,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.activecamera",{"_index":2461,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.fromarray",{"_index":2444,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.toarray",{"_index":2433,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activeobject",{"_index":2303,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(intersectedobject.uuid",{"_index":2330,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addcutoptions(collectionnode",{"_index":1895,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.adddrawoptions(collectionnode",{"_index":1893,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":2169,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":2143,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.allcolorbyoptions.filter((colorbyoption",{"_index":797,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.animateevent",{"_index":262,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateevent.bind(this",{"_index":263,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithclipping",{"_index":264,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithclipping.bind(this",{"_index":265,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithcollision(collisionduration",{"_index":530,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animatewithcollision",{"_index":521,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animatewithcollision(this.animateevent",{"_index":519,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.antialiasing",{"_index":1347,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.antialiasrender",{"_index":1348,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.applychargecoloroptions.bind(this",{"_index":718,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.applyconfigstate(nodeconfig",{"_index":1809,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyconfigstate(this.configs[configslength",{"_index":1760,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyembedoption",{"_index":2683,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyeventoptions",{"_index":2679,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyhidewidgetsoptions",{"_index":2682,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applymomcoloroptions.bind(this",{"_index":723,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.applyvertexcoloroptions.bind(this",{"_index":725,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.buildeventdatafromjson(event",{"_index":2957,"title":{},"body":{"interfaces/Window.html":{}}}],["this.buildgeometryfromparameters(parameters",{"_index":3077,"title":{},"body":{"interfaces/Window.html":{}}}],["this.callbacks.foreach((callback",{"_index":216,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.callbacks.push(callback",{"_index":218,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.camera",{"_index":1340,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.camera.near",{"_index":172,"title":{},"body":{"classes/ARManager.html":{}}}],["this.cameragroup",{"_index":3147,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.add(this.xrcamera",{"_index":3158,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.position.addscaledvector(direction",{"_index":2859,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.copy(cameraposition",{"_index":3157,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.position.toarray().join",{"_index":2849,"title":{},"body":{"classes/VRManager.html":{}}}],["this.camerapos",{"_index":1972,"title":{},"body":{"classes/PresetView.html":{}}}],["this.cameratarget",{"_index":1973,"title":{},"body":{"classes/PresetView.html":{}}}],["this.chargecolors[chargevalue",{"_index":815,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.children",{"_index":1742,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.filter",{"_index":1813,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.indexof(child",{"_index":1751,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.push(child",{"_index":1749,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.splice(childindex",{"_index":1752,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrenactive",{"_index":1789,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrentogglestate[child.name",{"_index":1763,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.clipping",{"_index":1974,"title":{},"body":{"classes/PresetView.html":{}}}],["this.clippingenabled.update(clipping",{"_index":2458,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled.value",{"_index":2434,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingopeningangle",{"_index":1976,"title":{},"body":{"classes/PresetView.html":{}}}],["this.clippingstartangle",{"_index":1975,"title":{},"body":{"classes/PresetView.html":{}}}],["this.collectionname",{"_index":781,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.collideparticles(1500",{"_index":515,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.colorbymomentum('max",{"_index":836,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbymomentum('min",{"_index":835,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbymomentum(key",{"_index":839,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions",{"_index":796,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.find",{"_index":810,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.foreach((colorbyoption",{"_index":800,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.map((colorbyoption",{"_index":806,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions[0].key",{"_index":804,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.collectioncolor(this.collectionname",{"_index":790,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.collectioncolorrandom(this.collectionname",{"_index":793,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.colorobjectsbyproperty",{"_index":816,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.colortracksbyvertex(this.collectionname",{"_index":847,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder",{"_index":783,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('button",{"_index":791,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('color",{"_index":785,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('select",{"_index":805,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig('slider",{"_index":829,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.configs.foreach((config",{"_index":848,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colors",{"_index":2486,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.composer",{"_index":1338,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(outlinepass",{"_index":1359,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(this.defaultrenderpass",{"_index":1344,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.indexof(pass",{"_index":1361,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.splice(passindex",{"_index":1362,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.render",{"_index":1352,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.renderer.render(scene",{"_index":1353,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.computeboundingbox",{"_index":2543,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.computeboundingsphere",{"_index":2542,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.configs",{"_index":1743,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.find",{"_index":1801,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.push",{"_index":1759,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configuration",{"_index":2893,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.defaulteventfile?.eventfile",{"_index":2680,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.defaulteventfile?.eventtype",{"_index":2681,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader",{"_index":2720,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.addlabeltoeventobject",{"_index":3109,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.buildeventdata",{"_index":2949,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollection(collectionname",{"_index":3060,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollections",{"_index":3061,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventmetadata",{"_index":3066,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventslist(eventsdata",{"_index":2937,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getlabelsobject",{"_index":3117,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":2172,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controller.getworlddirection(direction",{"_index":2857,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1",{"_index":2819,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.add(line.clone",{"_index":2841,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener",{"_index":2854,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener('selectend",{"_index":2855,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.position.toarray().join",{"_index":2847,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1?.removeeventlistener",{"_index":2813,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2",{"_index":2822,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2.add(line.clone",{"_index":2842,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1",{"_index":2826,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1.add",{"_index":2828,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2",{"_index":2831,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2.add",{"_index":2833,"title":{},"body":{"classes/VRManager.html":{}}}],["this.counter",{"_index":2484,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.currentxrsession",{"_index":3144,"title":{},"body":{"classes/XRManager.html":{}}}],["this.currentxrsession.removeeventlistener('end",{"_index":3145,"title":{},"body":{"classes/XRManager.html":{}}}],["this.currentxrsession?.end",{"_index":3148,"title":{},"body":{"classes/XRManager.html":{}}}],["this.defaultapplymaxvalue",{"_index":1020,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultapplyminvalue",{"_index":1019,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultmaxvalue",{"_index":1018,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultminvalue",{"_index":1017,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultrenderpass",{"_index":1342,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.camera",{"_index":1350,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.scene",{"_index":1351,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.disableselecting",{"_index":2305,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager",{"_index":2299,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.addoutlinepassforselection",{"_index":2301,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.antialiasing",{"_index":2315,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.composer.renderer.domelement",{"_index":2357,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(false",{"_index":2316,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(this.preselectionantialias",{"_index":2321,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsrender",{"_index":1349,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.enableeventdisplayconsole",{"_index":2905,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablekeyboardcontrols",{"_index":2907,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":2304,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.etatotheta(eta",{"_index":952,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["this.eventdisplay",{"_index":2452,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.buildeventdatafromjson(eventdata",{"_index":2724,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getinfologger().add('could",{"_index":2738,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_config",{"_index":2698,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_event",{"_index":2711,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_config",{"_index":2705,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_event",{"_index":2717,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getuimanager().setclipping(true",{"_index":2451,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.parsephoenixevents(alleventsobject",{"_index":2756,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.parsephoenixevents(filedata",{"_index":2726,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventfolder",{"_index":1123,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.__folders[eventdatatype",{"_index":1211,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.eventfolder.__folders[typename",{"_index":1285,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.eventfolder.addchild(typename",{"_index":1888,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.addconfig('checkbox",{"_index":1886,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.addfolder(typename",{"_index":1208,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.eventfolder.children.find",{"_index":1889,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.getnodestate",{"_index":1884,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.loadstatefromjson(this.eventfolderstate",{"_index":1935,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolder.remove",{"_index":1885,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventfolderstate",{"_index":1883,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.eventsdata",{"_index":2936,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":2956,"title":{},"body":{"interfaces/Window.html":{}}}],["this.fixedoverlay",{"_index":2180,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.geomfolder",{"_index":1122,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.geomfolder.__folders[object.name",{"_index":1190,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.geomfolder.addfolder(name",{"_index":1154,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.geomfolder.findintreeorcreate(menusubfolder",{"_index":1867,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.geomfolder.removefolder(folder",{"_index":1191,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.getcameragroup().add(this.controller1",{"_index":2821,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controller2",{"_index":2824,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip1",{"_index":2830,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip2",{"_index":2835,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameratween",{"_index":532,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(alongaxisposition",{"_index":298,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(position",{"_index":539,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(startpos",{"_index":289,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.gethitspositions(obj.position",{"_index":413,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getmainrenderer",{"_index":2161,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setanimationloop(null",{"_index":2146,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmomentum(objectparams",{"_index":841,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.getoverlayrenderer",{"_index":2149,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":2150,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render(scene",{"_index":2154,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getstatemanager().seteventdisplay(this",{"_index":2896,"title":{},"body":{"interfaces/Window.html":{}}}],["this.getthreemanager().getscenemanager().getscene",{"_index":3078,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary",{"_index":2887,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addgeometryfromparameters(parameters",{"_index":3038,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addlabeltoobject(label",{"_index":3112,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateclippingwithcollision(tweenduration",{"_index":3107,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateeventwithcollision(tweenduration",{"_index":3106,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animatepreset(animationpreset",{"_index":3105,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animatethroughevent",{"_index":3103,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":2948,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablekeyboardcontrols",{"_index":3102,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":3091,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.endxrsession(xrsessiontype",{"_index":2930,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":3000,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":2987,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":3094,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":3095,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":3099,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":2894,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.initxrsession(xrsessiontype",{"_index":2928,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry",{"_index":3011,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry",{"_index":3016,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry",{"_index":2976,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":3098,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.makescreenshot(width",{"_index":2926,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(input",{"_index":3006,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry",{"_index":2984,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsephnxscene(phoenixscene.scene",{"_index":2997,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setanimationloop(uiloop",{"_index":2899,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":3082,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":3086,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":3048,"title":{},"body":{"interfaces/Window.html":{}}}],["this.gui",{"_index":1113,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder('event",{"_index":1197,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder(scenemanager.geometries_id",{"_index":1128,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.addfolder(scenemanager.labels_id",{"_index":1247,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.domelement.id",{"_index":1114,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.domelement.style.csstext",{"_index":1115,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.gui.removefolder(this.eventfolder",{"_index":1196,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.eventdata",{"_index":1198,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.eventdata[typename",{"_index":1209,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.geometries",{"_index":1129,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters.labels",{"_index":1248,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[collectionname",{"_index":1212,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[labelid",{"_index":1261,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[labelid]['removelabel",{"_index":1277,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.guiparameters[name",{"_index":1148,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.handlejivexmlevent(fileurl",{"_index":2708,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.handlejsonevent(fileurl",{"_index":2710,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.handlezipfileevents(fileurl",{"_index":2709,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.hideidswithurloption(hidewidgetsoptions",{"_index":2764,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.icon",{"_index":1740,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":2294,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":2324,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.indices_array",{"_index":2487,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.infologger",{"_index":2298,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":2988,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":2351,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":2979,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":1609,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.length",{"_index":1605,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.pop",{"_index":1607,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.unshift(label",{"_index":1608,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.init(configuration",{"_index":2891,"title":{},"body":{"interfaces/Window.html":{}}}],["this.initchargecoloroptions.bind(this",{"_index":716,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initcolorbyoptions",{"_index":799,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initmomcoloroptions.bind(this",{"_index":722,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initrenderer(elementid",{"_index":2148,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.intersectobject(event",{"_index":2323,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":2153,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":2293,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.istracksmaterial",{"_index":2604,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.labelsfolder",{"_index":1124,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.__folders[labelid",{"_index":1283,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder.addchild(labelid",{"_index":1928,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('button",{"_index":1925,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('color",{"_index":1924,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addconfig('slider",{"_index":1923,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.addfolder(labelid",{"_index":1264,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder.children.find",{"_index":1926,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.labelsfolder.removefolder(labelitemfolder",{"_index":1284,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.labelsfolder?.children.find",{"_index":1931,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.loaded",{"_index":1670,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.length",{"_index":1653,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.push(id",{"_index":1649,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.sort().join",{"_index":1655,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loadevent(eventkeys[0",{"_index":2938,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":3073,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager",{"_index":2886,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_geom",{"_index":3028,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_json_geom",{"_index":3019,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`gltf_geom_${name",{"_index":3010,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`json_geom_${name",{"_index":3015,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`obj_geom_${name",{"_index":2975,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_gltf_${name",{"_index":3004,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_obj_${name",{"_index":2983,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_phnx_${name",{"_index":2996,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_geom",{"_index":3035,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_json_geom",{"_index":3025,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`gltf_geom_${name",{"_index":3012,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`json_geom_${name",{"_index":3017,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`obj_geom_${name",{"_index":2978,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`parse_gltf_${name",{"_index":3007,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`parse_obj_${name",{"_index":2985,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`parse_phnx_${name",{"_index":2998,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry",{"_index":3021,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjgeometry(filename",{"_index":3075,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":2995,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadstatefromjson(json.parse(data",{"_index":2429,"title":{},"body":{"classes/StateManager.html":{}}}],["this.mainrenderer",{"_index":2168,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxcutactive",{"_index":1021,"title":{},"body":{"classes/Cut.html":{}}}],["this.maxentries",{"_index":1606,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.maxpositionx",{"_index":1176,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxpositiony",{"_index":1180,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxpositionz",{"_index":1183,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.maxvalue",{"_index":1024,"title":{},"body":{"classes/Cut.html":{}}}],["this.mincutactive",{"_index":1022,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":1023,"title":{},"body":{"classes/Cut.html":{}}}],["this.momcolors.max.value",{"_index":831,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors.min.value",{"_index":830,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[key].color",{"_index":838,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[key].value",{"_index":832,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[minormax].color",{"_index":840,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.moveindirection(direction",{"_index":2851,"title":{},"body":{"classes/VRManager.html":{}}}],["this.name",{"_index":1739,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.next",{"_index":2482,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.next.push(p.x",{"_index":2497,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.next.push(points[i].x",{"_index":2501,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.next_track_id",{"_index":2488,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.nodelevel",{"_index":1748,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.oncontrollerselectend",{"_index":2817,"title":{},"body":{"classes/VRManager.html":{}}}],["this.oncontrollerselectstart",{"_index":2815,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":2950,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":3063,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":2311,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach((callback",{"_index":2939,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":3065,"title":{},"body":{"interfaces/Window.html":{}}}],["this.onloadcallbacks",{"_index":1671,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.foreach((callback",{"_index":1656,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.push(callback",{"_index":1667,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onlyselectedcolorbyoption",{"_index":802,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.onprogress(id",{"_index":1650,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks",{"_index":1665,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks.push(callback",{"_index":1668,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onsessionended",{"_index":3130,"title":{},"body":{"classes/XRManager.html":{}}}],["this.ontoggle",{"_index":1741,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(this.togglestate",{"_index":1797,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(value",{"_index":1761,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontouchdown",{"_index":2313,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove",{"_index":2309,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove(event.targettouches[0",{"_index":2355,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.onxrsessionended",{"_index":3146,"title":{},"body":{"classes/XRManager.html":{}}}],["this.onxrsessionended.bind(this",{"_index":3142,"title":{},"body":{"classes/XRManager.html":{}}}],["this.onxrsessionstarted.bind(this)(session",{"_index":3138,"title":{},"body":{"classes/XRManager.html":{}}}],["this.openingclippingangle.update(angle",{"_index":2460,"title":{},"body":{"classes/StateManager.html":{}}}],["this.openingclippingangle.value",{"_index":2436,"title":{},"body":{"classes/StateManager.html":{}}}],["this.outlinepass",{"_index":2300,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":2320,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":2325,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":2170,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parent",{"_index":1744,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent.removechild(this",{"_index":1753,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.phoenixmenuroot",{"_index":1855,"title":{},"body":{"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{}}}],["this.phoenixmenuroot.addchild",{"_index":1857,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.phoenixmenuroot.configactive",{"_index":2442,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.getnodestate",{"_index":2431,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.loadstatefromjson(jsondata['phoenixmenu",{"_index":2441,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.truncate",{"_index":1856,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.positions",{"_index":2480,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.positions.length",{"_index":2507,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.preselectionantialias",{"_index":2314,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.previous",{"_index":2481,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.previous.push(points[0].x",{"_index":2494,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.previousvalues.cameranear",{"_index":159,"title":{},"body":{"classes/ARManager.html":{}}}],["this.previousvalues.scenescale",{"_index":157,"title":{},"body":{"classes/ARManager.html":{}}}],["this.process",{"_index":2504,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.progressitems",{"_index":1672,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.progressitems[id",{"_index":1648,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.removelabel(labelid",{"_index":1278,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.removeobj(object",{"_index":1152,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.render",{"_index":1346,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.renderer",{"_index":3129,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderer.xr",{"_index":3150,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderer.xr.getcontroller(0",{"_index":2820,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(1",{"_index":2823,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(0",{"_index":2827,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(1",{"_index":2832,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.setreferencespacetype('local",{"_index":175,"title":{},"body":{"classes/ARManager.html":{}}}],["this.renderer.xr.setsession(session",{"_index":3143,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderermanager.getmainrenderer().localclippingenabled",{"_index":468,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.renderers",{"_index":2171,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":2174,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.length",{"_index":2178,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":2173,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":2175,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers[0].localclippingenabled",{"_index":2179,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.reset",{"_index":1657,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.resetlabels",{"_index":2943,"title":{},"body":{"interfaces/Window.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":1467,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":1469,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":1454,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestateasjson",{"_index":2427,"title":{},"body":{"classes/StateManager.html":{}}}],["this.scalescene(0.00001",{"_index":173,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scalescene(this.previousvalues.scenescale",{"_index":179,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scene",{"_index":1341,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.scene.add(...particles",{"_index":494,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.getobjectbyname(groupname)?.scale.setscalar(scale",{"_index":185,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id",{"_index":326,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id).visible",{"_index":528,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.remove(...particles",{"_index":502,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.scale.x",{"_index":171,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scenemanager",{"_index":657,"title":{},"body":{"classes/ColorManager.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.changeobjectcolor",{"_index":1275,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.changeobjectcolor(object",{"_index":1160,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.collectionfilter(collectionname",{"_index":1238,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.getobjectbyname(labelid",{"_index":1276,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.getobjectbyname(scenemanager.geometries_id",{"_index":1139,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.getobjectposition(name).setx(value",{"_index":1179,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.scenemanager.getobjectposition(name).sety(value",{"_index":1182,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.scenemanager.getobjectposition(name).setz(value",{"_index":1185,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.scenemanager.getscene",{"_index":667,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.scenemanager.getscene().getobjectbyname(objectsgroup",{"_index":652,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.scenemanager.groupvisibility",{"_index":1217,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.groupvisibility(scenemanager.event_data_id",{"_index":1201,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.groupvisibility(scenemanager.geometries_id",{"_index":1858,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.objectvisibility",{"_index":1138,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.objectvisibility(collectionobject",{"_index":1222,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.objectvisibility(labelobject",{"_index":1271,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.objectvisibility(object",{"_index":1169,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.removegeometry(object",{"_index":1192,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.scaleobject",{"_index":1865,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.scaleobject(object",{"_index":1173,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.scenemanager.setgeometryopacity",{"_index":1863,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.setgeometryopacity(object",{"_index":1165,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.wireframegeometries(value",{"_index":1145,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.scenemanager.wireframeobjects",{"_index":1922,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.selectedcolorbyoption",{"_index":803,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.selectedobject",{"_index":2302,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":2329,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":2335,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice",{"_index":2328,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":2326,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.sessioninit",{"_index":161,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["this.sessiontype",{"_index":3134,"title":{},"body":{"classes/XRManager.html":{}}}],["this.setattribute('color",{"_index":2539,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('counter",{"_index":2540,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('next",{"_index":2536,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('position",{"_index":2534,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('previous",{"_index":2535,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('side",{"_index":2537,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('track_id",{"_index":2538,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setclippingenabled(true",{"_index":2450,"title":{},"body":{"classes/StateManager.html":{}}}],["this.setindex(this._attributes.index",{"_index":2541,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setmainrenderer(renderer",{"_index":2144,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setupvrcontrols",{"_index":2812,"title":{},"body":{"classes/VRManager.html":{}}}],["this.setvalues(params",{"_index":2611,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.shouldcolorbycharge(objectuserdata",{"_index":817,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.side",{"_index":2483,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.startclippingangle.update(angle",{"_index":2459,"title":{},"body":{"classes/StateManager.html":{}}}],["this.startclippingangle.value",{"_index":2435,"title":{},"body":{"classes/StateManager.html":{}}}],["this.statemanager",{"_index":2961,"title":{},"body":{"interfaces/Window.html":{}}}],["this.three.eventdatadepthtest(value",{"_index":1206,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["this.three.getcolormanager",{"_index":1900,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["this.three.getcolormanager().collectioncolor(collectionname",{"_index":1225,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getcolormanager().collectioncolorrandom(collectionname",{"_index":1215,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.three.getobjectposition(name",{"_index":1175,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["this.togglestate",{"_index":1762,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.toload",{"_index":1669,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.length",{"_index":1652,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.push(id",{"_index":1647,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.sort().join",{"_index":1654,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.track_id",{"_index":2485,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.type",{"_index":2479,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.ui",{"_index":2889,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addcollection(objecttype",{"_index":3055,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatafolder",{"_index":2944,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(objecttype",{"_index":3053,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(geom",{"_index":3058,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(object",{"_index":2977,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabel(labelid",{"_index":3111,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabelsfolder",{"_index":2945,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.enablekeyboardcontrols",{"_index":3101,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.init(configuration",{"_index":2895,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.loadeventfolderphoenixmenustate",{"_index":2953,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.removelabel(labelid",{"_index":3110,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":2898,"title":{},"body":{"interfaces/Window.html":{}}}],["this.uniforms.linewidth.value",{"_index":2607,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.uniforms.progress.value",{"_index":2610,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.uniforms.resolution.value",{"_index":2608,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.uniforms.resolution.value.copy(value",{"_index":2609,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.urloptions",{"_index":2677,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('config",{"_index":2697,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('embed",{"_index":2765,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('file",{"_index":2686,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type",{"_index":2687,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type').tolowercase",{"_index":2694,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get(urloption",{"_index":2770,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptionsmanager",{"_index":2900,"title":{},"body":{"interfaces/Window.html":{}}}],["this.urloptionsmanager.applyoptions",{"_index":2903,"title":{},"body":{"interfaces/Window.html":{}}}],["this.value",{"_index":215,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.xractive",{"_index":3140,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera",{"_index":3149,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.name",{"_index":3154,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.position",{"_index":3156,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.position.addscaledvector(direction",{"_index":2860,"title":{},"body":{"classes/VRManager.html":{}}}],["this.xrcamera?.getworlddirection(direction",{"_index":2858,"title":{},"body":{"classes/VRManager.html":{}}}],["thr",{"_index":3036,"title":{},"body":{"interfaces/Window.html":{}}}],["three",{"_index":136,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"dependencies.html":{}}}],["three,js",{"_index":2119,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.getscenemanager",{"_index":1125,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["three.js",{"_index":55,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":1443,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":1441,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer",{"_index":1332,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass",{"_index":1336,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":2289,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/pass",{"_index":1337,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass",{"_index":1335,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/webxr/xrcontrollermodelfactory",{"_index":2803,"title":{},"body":{"classes/VRManager.html":{}}}],["threejs",{"_index":926,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["threemanager",{"_index":1052,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["threemanager(this.infologger",{"_index":2888,"title":{},"body":{"interfaces/Window.html":{}}}],["through",{"_index":282,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["throwing",{"_index":3340,"title":{},"body":{"changelog.html":{}}}],["thus",{"_index":2920,"title":{},"body":{"interfaces/Window.html":{}}}],["time",{"_index":228,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["title",{"_index":3888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tmp1",{"_index":943,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["tmp2",{"_index":942,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["toggle",{"_index":1131,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["toggled",{"_index":3424,"title":{},"body":{"changelog.html":{}}}],["toggles",{"_index":1076,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["toggleselfanddescendants",{"_index":1690,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggleselfanddescendants(value",{"_index":1731,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["togglestate",{"_index":1681,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggling",{"_index":1694,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["tojson",{"_index":3024,"title":{},"body":{"interfaces/Window.html":{}}}],["toload",{"_index":1616,"title":{},"body":{"classes/LoadingManager.html":{}}}],["top",{"_index":68,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{}}}],["totalitems",{"_index":1662,"title":{},"body":{"classes/LoadingManager.html":{}}}],["totalprogress",{"_index":1658,"title":{},"body":{"classes/LoadingManager.html":{}}}],["touch",{"_index":2256,"title":{},"body":{"classes/SelectionManager.html":{}}}],["touchevent",{"_index":2353,"title":{},"body":{"classes/SelectionManager.html":{}}}],["towards",{"_index":2795,"title":{},"body":{"classes/VRManager.html":{}}}],["track",{"_index":341,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{}}}],["track.children[0",{"_index":509,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["track.dparams",{"_index":2062,"title":{},"body":{"classes/RKHelper.html":{}}}],["track.pos",{"_index":2060,"title":{},"body":{"classes/RKHelper.html":{}}}],["track_id",{"_index":2474,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["trackcollection",{"_index":676,"title":{},"body":{"classes/ColorManager.html":{}}}],["trackcollection.children[trackindex].traverse((trackobject",{"_index":679,"title":{},"body":{"classes/ColorManager.html":{}}}],["trackcolor",{"_index":508,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tracking",{"_index":2810,"title":{},"body":{"classes/VRManager.html":{}}}],["trackmlloader",{"_index":3743,"title":{},"body":{"coverage.html":{}}}],["trackobject?.['material']?.color?.set(colorfortracksvertex",{"_index":680,"title":{},"body":{"classes/ColorManager.html":{}}}],["tracks",{"_index":337,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["trackscollection",{"_index":2057,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections",{"_index":2056,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections[trackscollection",{"_index":2059,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollectionsevent",{"_index":2050,"title":{},"body":{"classes/RKHelper.html":{}}}],["tracksmaterial",{"_index":2462,"title":{"classes/TracksMaterial.html":{}},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{}}}],["tracksmesh",{"_index":251,"title":{"classes/TracksMesh.html":{}},"body":{"interfaces/AnimationPreset.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{}}}],["transformations",{"_index":3518,"title":{},"body":{"changelog.html":{}}}],["transforming/changing",{"_index":1948,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":284,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["transparent",{"_index":170,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"changelog.html":{}}}],["traverse",{"_index":332,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["traversed",{"_index":2273,"title":{},"body":{"classes/SelectionManager.html":{}}}],["tree",{"_index":1720,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["true",{"_index":59,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["truncate",{"_index":1691,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["try",{"_index":1516,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tryrungekuttastep",{"_index":1518,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep(state.stepsize",{"_index":1550,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tube",{"_index":3618,"title":{},"body":{"changelog.html":{}}}],["tubegeometry",{"_index":240,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween",{"_index":236,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["tween(animationclipplane).to",{"_index":460,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(animationsphere).to",{"_index":404,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(eventobject.material).to",{"_index":357,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(particle.material",{"_index":496,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(particle.position",{"_index":499,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(this.activecamera.position).to",{"_index":273,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.easing(easing",{"_index":280,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.easing(easing.quartic.out).start",{"_index":433,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.js",{"_index":255,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.start",{"_index":462,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tweenduration",{"_index":285,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["tweenjs/tween.js",{"_index":239,"title":{},"body":{"interfaces/AnimationPreset.html":{},"dependencies.html":{}}}],["tweens",{"_index":432,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["two",{"_index":472,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{}}}],["type",{"_index":53,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3822,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typefolder",{"_index":1207,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["typefolder.addchild",{"_index":1892,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["typefolder.addfolder(collectionname",{"_index":1219,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["typefolder.name",{"_index":1898,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["typename",{"_index":1081,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["typeof",{"_index":270,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["types",{"_index":1737,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["types.ts",{"_index":3827,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["types/three",{"_index":3319,"title":{},"body":{"changelog.html":{}}}],["typing",{"_index":3584,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":1030,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["ui.ts",{"_index":1028,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"coverage.html":{}}}],["ui.ts:109",{"_index":1084,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:11",{"_index":1942,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:116",{"_index":1846,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:16",{"_index":1939,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:175",{"_index":1843,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:187",{"_index":1109,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:19",{"_index":1068,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:200",{"_index":1075,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:201",{"_index":1844,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:21",{"_index":1059,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["ui.ts:219",{"_index":1838,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:23",{"_index":1062,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["ui.ts:230",{"_index":1080,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:25",{"_index":1836,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:254",{"_index":1071,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:27",{"_index":1837,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:273",{"_index":1840,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:28",{"_index":1938,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:29",{"_index":1835,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:32",{"_index":1057,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:332",{"_index":1097,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{}}}],["ui.ts:34",{"_index":1056,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["ui.ts:36",{"_index":1063,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:369",{"_index":1849,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:384",{"_index":1091,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:39",{"_index":1065,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:41",{"_index":1067,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:419",{"_index":1848,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:425",{"_index":1107,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:43",{"_index":1053,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/PhoenixUI.html":{}}}],["ui.ts:440",{"_index":1104,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:460",{"_index":1854,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:475",{"_index":1851,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:484",{"_index":1852,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:49",{"_index":1850,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:54",{"_index":1941,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:61",{"_index":1940,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:63",{"_index":1847,"title":{},"body":{"classes/PhoenixMenuUI.html":{}}}],["ui.ts:67",{"_index":1100,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["ui.ts:68",{"_index":1944,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:75",{"_index":1943,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:78",{"_index":1088,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["uiloop",{"_index":2897,"title":{},"body":{"interfaces/Window.html":{}}}],["uimanager",{"_index":1379,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["uimanager(this.graphicslibrary",{"_index":2890,"title":{},"body":{"interfaces/Window.html":{}}}],["uimenu",{"_index":2760,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["uint32array(this.indices_array",{"_index":2516,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["undefined",{"_index":788,"title":{},"body":{"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["undefined/null",{"_index":1756,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["uniform",{"_index":2554,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["uniforms",{"_index":2598,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["unique",{"_index":1093,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["unit",{"_index":2385,"title":{},"body":{"classes/State.html":{},"classes/VRManager.html":{}}}],["unitc",{"_index":2375,"title":{},"body":{"classes/State.html":{}}}],["units",{"_index":1497,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["unreal",{"_index":1291,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["until",{"_index":1576,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["up",{"_index":547,"title":{},"body":{"classes/CMSObjects.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["update",{"_index":198,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["update(updatedvalue",{"_index":210,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updateanimationsphere",{"_index":407,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updateanimationsphere.containspoint",{"_index":416,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updateanimationsphere.containspoint(obj.position",{"_index":422,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updated",{"_index":150,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["updatedcolorbyoption",{"_index":808,"title":{},"body":{"classes/ColorOptions.html":{}}}],["updatedvalue",{"_index":212,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updating",{"_index":209,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{}}}],["upgrade",{"_index":3330,"title":{},"body":{"changelog.html":{}}}],["upper",{"_index":997,"title":{},"body":{"classes/Cut.html":{},"changelog.html":{}}}],["url",{"_index":865,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["url.createobjecturl(blob",{"_index":3916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urloptions",{"_index":2627,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urloptionsmanager",{"_index":2625,"title":{"classes/URLOptionsManager.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["urloptionsmanager(this",{"_index":2901,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptionwithids",{"_index":2667,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urlsearchparams",{"_index":2638,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["usage",{"_index":3226,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["use",{"_index":84,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":110,"title":{},"body":{"classes/ARManager.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["user",{"_index":3908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":823,"title":{},"body":{"classes/ColorOptions.html":{},"changelog.html":{}}}],["uses",{"_index":947,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"index.html":{}}}],["using",{"_index":254,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["uuid",{"_index":2268,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["v1",{"_index":956,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["v2",{"_index":957,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["v_color",{"_index":2550,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["v_counter",{"_index":2551,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["v_track_id",{"_index":2553,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["val",{"_index":1661,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["val.pos.x",{"_index":2071,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.y",{"_index":2072,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.z",{"_index":2073,"title":{},"body":{"classes/RKHelper.html":{}}}],["valid",{"_index":1013,"title":{},"body":{"classes/Cut.html":{}}}],["value",{"_index":58,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":76,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["variable",{"_index":191,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["variable.ts",{"_index":190,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["variable.ts:12",{"_index":206,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:17",{"_index":205,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:23",{"_index":211,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:32",{"_index":208,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:7",{"_index":201,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variables",{"_index":3191,"title":{"miscellaneous/variables.html":{}},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":2549,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec2",{"_index":2555,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec2(resolution.x",{"_index":2559,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec3",{"_index":2546,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4",{"_index":2565,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4(next",{"_index":2571,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4(position",{"_index":2567,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4(previous",{"_index":2569,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vec4(v_color",{"_index":2597,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vector",{"_index":949,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/VRManager.html":{}}}],["vector.applyquaternion(coordinatehelper.atlasquaternion",{"_index":951,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector.setfromsphericalcoords(radius",{"_index":950,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector2",{"_index":1333,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vector2(1",{"_index":2599,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vector2(window.innerwidth",{"_index":1354,"title":{},"body":{"classes/EffectsManager.html":{}}}],["vector3",{"_index":242,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["vector3().fromarray(hitposition",{"_index":417,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["vector3(0",{"_index":386,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/State.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["version",{"_index":3172,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["versions",{"_index":3178,"title":{},"body":{"changelog.html":{}}}],["vertex",{"_index":455,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["vertexshader",{"_index":2600,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vertices",{"_index":453,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["vertices.traverse((object",{"_index":669,"title":{},"body":{"classes/ColorManager.html":{}}}],["view",{"_index":868,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["view.model",{"_index":881,"title":{},"body":{"interfaces/Configuration.html":{}}}],["view.model.ts",{"_index":1946,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["view.model.ts:16",{"_index":1967,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:18",{"_index":1961,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:20",{"_index":1962,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:22",{"_index":1968,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:24",{"_index":1963,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:26",{"_index":1966,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:28",{"_index":1958,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:59",{"_index":1969,"title":{},"body":{"classes/PresetView.html":{}}}],["views",{"_index":877,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["visibilitytoggle",{"_index":1265,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["visibilitytoggle.onchange((value",{"_index":1267,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["visible",{"_index":398,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/Window.html":{}}}],["void",{"_index":112,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/DatGUIMenuUI.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["volumes",{"_index":3253,"title":{},"body":{"changelog.html":{}}}],["vr",{"_index":2775,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["vrmanager",{"_index":2773,"title":{"classes/VRManager.html":{}},"body":{"classes/VRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["wait",{"_index":2223,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["want",{"_index":2368,"title":{},"body":{"classes/SelectionManager.html":{}}}],["warning",{"_index":2689,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["warnings",{"_index":3181,"title":{},"body":{"changelog.html":{}}}],["web",{"_index":3811,"title":{},"body":{"properties.html":{}}}],["webglrenderer",{"_index":99,"title":{},"body":{"classes/ARManager.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["webglrenderers",{"_index":2111,"title":{},"body":{"classes/RendererManager.html":{}}}],["webpack",{"_index":3297,"title":{},"body":{"changelog.html":{}}}],["webxr",{"_index":145,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["well",{"_index":3266,"title":{},"body":{"changelog.html":{}}}],["whether",{"_index":61,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["whose",{"_index":192,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/PhoenixMenuNode.html":{}}}],["widgets",{"_index":2641,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["width",{"_index":2910,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["window",{"_index":2685,"title":{"interfaces/Window.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["window.addeventlistener('resize",{"_index":2166,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.eventdisplay",{"_index":3071,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":1355,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["window.innerwidth",{"_index":2158,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.location.href.substr(window.location.href.lastindexof",{"_index":2678,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["wireframe",{"_index":1130,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"changelog.html":{}}}],["wireframegeometriesmenu",{"_index":1142,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["wireframegeometriesmenu.onchange((value",{"_index":1144,"title":{},"body":{"classes/DatGUIMenuUI.html":{}}}],["wireframing",{"_index":1141,"title":{},"body":{"classes/DatGUIMenuUI.html":{},"changelog.html":{}}}],["within",{"_index":905,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/Cut.html":{}}}],["without",{"_index":338,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"changelog.html":{},"index.html":{}}}],["work",{"_index":147,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["workaround",{"_index":350,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["working",{"_index":3334,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":124,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["wrapper",{"_index":871,"title":{},"body":{"interfaces/Configuration.html":{},"classes/DatGUIMenuUI.html":{},"classes/PhoenixMenuUI.html":{},"classes/RendererManager.html":{}}}],["wrong",{"_index":3497,"title":{},"body":{"changelog.html":{}}}],["x",{"_index":274,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{}}}],["x,y,z",{"_index":869,"title":{},"body":{"interfaces/Configuration.html":{}}}],["xml",{"_index":2657,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["xr",{"_index":89,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["xr_camera",{"_index":3155,"title":{},"body":{"classes/XRManager.html":{}}}],["xractive",{"_index":31,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["xrcamera",{"_index":32,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["xrcontrollermodelfactory",{"_index":2802,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager",{"_index":15,"title":{"classes/XRManager.html":{}},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["xrmanager:109",{"_index":123,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:135",{"_index":129,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:26",{"_index":108,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:28",{"_index":102,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:30",{"_index":100,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:32",{"_index":91,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:34",{"_index":95,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:36",{"_index":87,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:38",{"_index":109,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:48",{"_index":2799,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:50",{"_index":114,"title":{},"body":{"classes/ARManager.html":{}}}],["xrmanager:53",{"_index":132,"title":{},"body":{"classes/ARManager.html":{}}}],["xrmanager:61",{"_index":2796,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:64",{"_index":111,"title":{},"body":{"classes/ARManager.html":{}}}],["xrmanager:78",{"_index":2800,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:99",{"_index":119,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrsessioninit",{"_index":3316,"title":{},"body":{"changelog.html":{}}}],["xrsessiontype",{"_index":138,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/enumerations.html":{}}}],["xrsessiontype.vr",{"_index":3135,"title":{},"body":{"classes/XRManager.html":{}}}],["xrtype",{"_index":3133,"title":{},"body":{"classes/XRManager.html":{}}}],["y",{"_index":276,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{}}}],["yarn",{"_index":3180,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["yes",{"_index":126,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/ColorOptions.html":{},"classes/DatGUIMenuUI.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixMenuUI.html":{},"interfaces/PhoenixUI.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["z",{"_index":278,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/DatGUIMenuUI.html":{}}}],["z0",{"_index":2067,"title":{},"body":{"classes/RKHelper.html":{}}}],["zero",{"_index":3672,"title":{},"body":{"changelog.html":{}}}],["zip",{"_index":2662,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":3039,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["zoomfactor",{"_index":3044,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":3045,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":3047,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ARManager.html":{"url":"classes/ARManager.html","title":"class - ARManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ARManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/xr/ar-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                AR manager for AR related operations.\n\n            \n\n            \n                Extends\n            \n            \n                        XRManager\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                enableDomOverlay\n                            \n                            \n                                    Private\n                                previousValues\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                            \n                                    Private\n                                scaleScene\n                            \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scene: Scene, camera: PerspectiveCamera)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:22\n                            \n                        \n\n                \n                    \n                            Create the AR manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three.js scene.\n\n                                                        \n                                                \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    PerspectiveCamera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Camera in the scene.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        enableDomOverlay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:17\n                        \n                    \n\n            \n                \n                    Whether to enable DOM overlay which shows Phoenix overlays on top of the AR scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        previousValues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    sceneScale: 1,\n    cameraNear: 10,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:19\n                        \n                    \n\n            \n                \n                    Previous values of scene scale, camera near and camera position.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        SESSION_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'immersive-ar'\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:15\n                        \n                    \n\n            \n                \n                    Session type to use for AR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:36\n\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:32\n\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:34\n\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:30\n\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:28\n\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:26\n\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:38\n\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionEnded()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:64\n\n                \n            \n\n\n            \n                \n                    Callback when the AR session ends.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:50\n\n                \n            \n\n\n            \n                \n                    Callback for when the AR session is started.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The AR session.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        scaleScene\n                        \n                    \n                \n            \n            \n                \n                    \n                    scaleScene(scale: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/ar-manager.ts:75\n                \n            \n\n\n            \n                \n                    Scale the three.js scene.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scale\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Number to scale the scene to.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    endXRSession()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:99\n\n                \n            \n\n\n            \n                \n                    End the current XR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:109\n\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for XR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in XR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                    \n                    getXRCamera()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:135\n\n                \n            \n\n\n            \n                \n                    Get the camera used by XR.\n\n\n                    \n                    \n                    \n                        Returns :     Camera\n\n                    \n                    \n                        The camera used by XR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:53\n\n                \n            \n\n\n            \n                \n                    Set and configure the XR session.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the XR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the XR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the XR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PerspectiveCamera, Scene } from 'three';\nimport { SceneManager } from '../scene-manager';\nimport { XRManager, XRSessionType } from './xr-manager';\n\n// NOTE: This was created on 28/06/2021\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 07/07/2021\n\n/**\n * AR manager for AR related operations.\n */\nexport class ARManager extends XRManager {\n  /** Session type to use for AR. */\n  static readonly SESSION_TYPE: string = 'immersive-ar';\n  /** Whether to enable DOM overlay which shows Phoenix overlays on top of the AR scene. */\n  public static enableDomOverlay: boolean = true;\n  /** Previous values of scene scale, camera near and camera position. */\n  private previousValues = {\n    sceneScale: 1,\n    cameraNear: 10,\n  };\n\n  /**\n   * Create the AR manager.\n   * @param scene The three.js scene.\n   * @param camera Camera in the scene.\n   * @override\n   */\n  constructor(private scene: Scene, private camera: PerspectiveCamera) {\n    super(XRSessionType.AR);\n\n    this.previousValues.sceneScale = scene.scale.x;\n    this.previousValues.cameraNear = camera.near;\n    this.sessionInit = () => {\n      return ARManager.enableDomOverlay\n        ? {\n            optionalFeatures: ['dom-overlay'],\n            domOverlay: { root: document.body },\n          }\n        : {};\n    };\n  }\n\n  /**\n   * Callback for when the AR session is started.\n   * @param session The AR session.\n   * @override\n   */\n  protected async onXRSessionStarted(session: any) {\n    document.body.style.setProperty('background-color', 'transparent');\n    this.previousValues.sceneScale = this.scene.scale.x;\n    this.previousValues.cameraNear = this.camera.near;\n    this.scaleScene(0.00001);\n    this.camera.near = 0.01;\n    this.renderer.xr.setReferenceSpaceType('local');\n    await super.onXRSessionStarted(session);\n  }\n\n  /**\n   * Callback when the AR session ends.\n   * @override\n   */\n  protected onXRSessionEnded() {\n    document.body.style.removeProperty('background-color');\n    this.scaleScene(this.previousValues.sceneScale);\n    this.camera.near = this.previousValues.cameraNear;\n    super.onXRSessionEnded();\n  }\n\n  /**\n   * Scale the three.js scene.\n   * @param scale Number to scale the scene to.\n   */\n  private scaleScene(scale: number) {\n    [\n      SceneManager.EVENT_DATA_ID,\n      SceneManager.GEOMETRIES_ID,\n      SceneManager.LABELS_ID,\n    ].forEach((groupName) => {\n      this.scene.getObjectByName(groupName)?.scale.setScalar(scale);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActiveVariable.html":{"url":"classes/ActiveVariable.html","title":"class - ActiveVariable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActiveVariable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/active-variable.ts\n        \n\n\n            \n                Description\n            \n            \n                An active variable whose value can be changed and the change can be observed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callbacks\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                onUpdate\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value?: T)\n                    \n                \n                        \n                            \n                                Defined in src/helpers/active-variable.ts:7\n                            \n                        \n\n                \n                    \n                            Create the observable active variable.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Initial value.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        callbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CallbackFunction[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/helpers/active-variable.ts:17\n                        \n                    \n\n            \n                \n                    Callbacks to call on update.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/helpers/active-variable.ts:12\n                        \n                    \n\n            \n                \n                    Initial value.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    onUpdate(callback: CallbackFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/active-variable.ts:32\n                \n            \n\n\n            \n                \n                    Call a function on updating the value of variable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                CallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call with updated value when the variable is updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(updatedValue: T)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/active-variable.ts:23\n                \n            \n\n\n            \n                \n                    Update the value of variable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    updatedValue\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        New updated value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export type CallbackFunction = (updatedValue: T) => void;\n\n/**\n * An active variable whose value can be changed and the change can be observed.\n */\nexport class ActiveVariable {\n  /**\n   * Create the observable active variable.\n   * @param value Initial value.\n   */\n  constructor(public value?: T) {}\n\n  /**\n   * Callbacks to call on update.\n   */\n  private callbacks: CallbackFunction[] = [];\n\n  /**\n   * Update the value of variable.\n   * @param updatedValue New updated value.\n   */\n  public update(updatedValue: T) {\n    this.value = updatedValue;\n    this.callbacks.forEach((callback) => callback(updatedValue));\n  }\n\n  /**\n   * Call a function on updating the value of variable.\n   * @param callback Callback to call with updated value when the variable is updated.\n   */\n  public onUpdate(callback: CallbackFunction) {\n    this.callbacks.push(callback);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AnimationPreset.html":{"url":"interfaces/AnimationPreset.html","title":"interface - AnimationPreset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AnimationPreset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/animations-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Type for animation preset.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            animateEventAfterInterval\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            collisionDuration\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            positions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        animateEventAfterInterval\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        animateEventAfterInterval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Time after which to start the event collision animation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        collisionDuration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        collisionDuration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Duration of the event collision.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the Animation\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        positions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        positions:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Positions with duration and easing of each tween forming a path.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Easing, Tween } from '@tweenjs/tween.js';\nimport {\n  TubeGeometry,\n  BufferGeometry,\n  Vector3,\n  Color,\n  MeshBasicMaterial,\n  Mesh,\n  SphereGeometry,\n  Sphere,\n  Object3D,\n  BufferAttribute,\n  Scene,\n  Camera,\n  Plane,\n  Group,\n} from 'three';\nimport { SceneManager } from './scene-manager';\nimport { RendererManager } from './renderer-manager';\nimport { TracksMesh } from '../../loaders/objects/tracks';\n\n/** Type for animation preset. */\nexport interface AnimationPreset {\n  /** Positions with duration and easing of each tween forming a path. */\n  positions: { position: number[]; duration: number; easing?: any }[];\n  /** Time after which to start the event collision animation. */\n  animateEventAfterInterval?: number;\n  /** Duration of the event collision. */\n  collisionDuration?: number;\n  /** Name of the Animation */\n  name: string;\n}\n\n/**\n * Manager for managing animation related operations using three.js and tween.js.\n */\nexport class AnimationsManager {\n  /**\n   * Constructor for the animation manager.\n   * @param scene Three.js scene containing all the objects and event data.\n   * @param activeCamera Currently active camera.\n   * @param rendererManager Manager for managing event display's renderer related functions.\n   */\n  constructor(\n    private scene: Scene,\n    private activeCamera: Camera,\n    private rendererManager: RendererManager\n  ) {\n    this.animateEvent = this.animateEvent.bind(this);\n    this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\n  }\n\n  /**\n   * Get the camera tween for animating camera to a position.\n   * @param pos End position of the camera tween.\n   * @param duration Duration of the tween.\n   * @param easing Animation easing of the tween if any.\n   * @returns Tween object of the camera animation.\n   */\n  public getCameraTween(\n    pos: number[],\n    duration: number = 1000,\n    easing?: typeof Easing.Linear.None\n  ) {\n    const tween = new Tween(this.activeCamera.position).to(\n      { x: pos[0], y: pos[1], z: pos[2] },\n      duration\n    );\n\n    if (easing) {\n      tween.easing(easing);\n    }\n\n    return tween;\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    // Move to start\n    const start = this.getCameraTween(startPos, 1000, Easing.Cubic.Out);\n    // Move to position along the detector axis\n    const alongAxisPosition = [0, 0, startPos[2]];\n    const startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\n\n    const radius = 500;\n    const numOfSteps = 24;\n    const angle = 3 * Math.PI;\n    const step = angle / numOfSteps;\n\n    const rotationPositions = [];\n    for (let i = 1; i  onAnimationEnd?.());\n    startClone.delay(500);\n\n    start.chain(startXAxis);\n    startXAxis.chain(rotateStart);\n    rotate.chain(end);\n    end.chain(startClone);\n\n    start.start();\n  }\n\n  /**\n   * Animate the propagation and generation of event data.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Callback when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   */\n  public animateEvent(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void\n  ) {\n    const extraAnimationSphereDuration = tweenDuration * 0.25;\n    tweenDuration *= 0.75;\n\n    const eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    const animationSphere = new Sphere(new Vector3(), 0);\n    const objectsToAnimateWithSphere: {\n      eventObject: Object3D;\n      position: any;\n    }[] = [];\n\n    const allTweens = [];\n    // Traverse over all event data\n    eventData.traverse((eventObject: any) => {\n      if (eventObject.geometry) {\n        // Animation for extrapolating tracks without changing scale\n        if (eventObject.name === 'Track' || eventObject.name === 'LineHit') {\n          // Check if geometry drawRange count exists\n          let geometryPosCount =\n            eventObject.geometry?.attributes?.position?.count;\n          if (geometryPosCount) {\n            // WORKAROUND\n            // Changing position count for TubeGeometry because\n            // what we get is not the actual and it has Infinity drawRange count\n            if (eventObject.geometry instanceof TubeGeometry) {\n              geometryPosCount *= 6;\n            }\n\n            if (eventObject.geometry instanceof TracksMesh) {\n              eventObject.material.progress = 0;\n              const eventObjectTween = new Tween(eventObject.material).to(\n                {\n                  progress: 1,\n                },\n                tweenDuration\n              );\n              eventObjectTween.onComplete(() => {\n                eventObject.material.progress = 1;\n              });\n              allTweens.push(eventObjectTween);\n            } else if (eventObject.geometry instanceof BufferGeometry) {\n              const oldDrawRangeCount = eventObject.geometry.drawRange.count;\n              eventObject.geometry.setDrawRange(0, 0);\n              const eventObjectTween = new Tween(\n                eventObject.geometry.drawRange\n              ).to(\n                {\n                  count: geometryPosCount,\n                },\n                tweenDuration\n              );\n              eventObjectTween.onComplete(() => {\n                eventObject.geometry.drawRange.count = oldDrawRangeCount;\n              });\n              allTweens.push(eventObjectTween);\n            }\n          }\n        }\n        // Animation for scaling out objects with or without position\n        else if (eventObject.name === 'Jet') {\n          const scaleTween = new Tween({\n            x: 0.01,\n            y: 0.01,\n            z: 0.01,\n          }).to(\n            {\n              x: eventObject.scale.x,\n              y: eventObject.scale.y,\n              z: eventObject.scale.z,\n            },\n            tweenDuration\n          );\n          // Manually updating scale since we need to change position\n          scaleTween.onUpdate((updatedScale: Vector3) => {\n            const previousScale = eventObject.scale.x;\n            eventObject.scale.setScalar(updatedScale.x);\n            // Restoring to original position and then moving again with the current value\n            eventObject.position\n              .divideScalar(previousScale)\n              .multiplyScalar(updatedScale.x);\n          });\n          allTweens.push(scaleTween);\n        } else {\n          const hasPosition = !eventObject.position.equals(\n            new Vector3(0, 0, 0)\n          );\n          let position = hasPosition\n            ? eventObject.position\n            : eventObject.geometry.boundingSphere.center;\n\n          // Edit geometry for hits\n          if (eventObject.name === 'Hit') {\n            position = Array.from(\n              eventObject.geometry.attributes['position'].array\n            );\n            eventObject.geometry.deleteAttribute('position');\n            eventObject.geometry.computeBoundingSphere();\n          } else {\n            // Making the object invisible and will make visible\n            // once the animation sphere reaches the object\n            eventObject.visible = false;\n          }\n\n          objectsToAnimateWithSphere.push({\n            eventObject: eventObject,\n            position: position,\n          });\n        }\n      }\n    });\n\n    // Tween for the animation sphere\n    const animationSphereTween = new Tween(animationSphere).to(\n      { radius: 3000 },\n      tweenDuration\n    );\n\n    const onAnimationSphereUpdate = (updateAnimationSphere: Sphere) => {\n      objectsToAnimateWithSphere.forEach((obj) => {\n        if (obj.eventObject.name === 'Hit') {\n          const geometry = (obj.eventObject as any).geometry;\n\n          const hitsPositions = this.getHitsPositions(obj.position);\n          const reachedHits = hitsPositions.filter((hitPosition) =>\n            updateAnimationSphere.containsPoint(\n              new Vector3().fromArray(hitPosition)\n            )\n          );\n\n          if (reachedHits.length > 0) {\n            geometry.setAttribute(\n              'position',\n              new BufferAttribute(\n                new Float32Array([].concat(...reachedHits)),\n                3\n              )\n            );\n            geometry.computeBoundingSphere();\n          }\n        } else if (updateAnimationSphere.containsPoint(obj.position)) {\n          obj.eventObject.visible = true;\n        }\n      });\n    };\n\n    animationSphereTween.onUpdate(onAnimationSphereUpdate);\n\n    // Animation sphere tween after covering the tracks\n    const animationSphereTweenClone = new Tween(animationSphere).to(\n      { radius: 10000 },\n      extraAnimationSphereDuration\n    );\n    animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\n\n    animationSphereTween.chain(animationSphereTweenClone);\n\n    allTweens.push(animationSphereTween);\n\n    // Call onAnimationStart when the first tween starts\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all tweens\n    for (const tween of allTweens) {\n      tween.easing(Easing.Quartic.Out).start();\n    }\n\n    // Call onEnd when the last tween completes\n    animationSphereTweenClone.onComplete(() => {\n      // Restore all remaining event data items\n      onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data using clipping planes.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   * @param clippingConstant Constant for the clipping planes for distance from the origin.\n   */\n  public animateEventWithClipping(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n    clippingConstant: number = 11000\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Sphere to get spherical set of clipping planes from\n    const sphere = new SphereGeometry(1, 8, 8);\n    // Clipping planes for animation\n    const animationClipPlanes: Plane[] = [];\n\n    // Get clipping planes from the vertices of sphere\n    const position = sphere.attributes.position;\n    const vertex = new Vector3();\n    for (let i = 0; i  {\n      if (eventObject.geometry && eventObject.material) {\n        eventObject.material.clippingPlanes = animationClipPlanes;\n      }\n    });\n\n    const allTweens = [];\n    // Create tweens for the animation clipping planes\n    for (const animationClipPlane of animationClipPlanes) {\n      animationClipPlane.constant = 0;\n      const tween = new Tween(animationClipPlane).to(\n        { constant: clippingConstant },\n        tweenDuration\n      );\n      allTweens.push(tween);\n    }\n\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all the tweens\n    for (const tween of allTweens) {\n      tween.start();\n    }\n\n    allTweens[allTweens.length - 1].onComplete(() => {\n      // Revert local clipping of the renderer\n      if (!prevLocalClipping) {\n        this.rendererManager.getMainRenderer().localClippingEnabled =\n          prevLocalClipping /* false */;\n      }\n      // Remove the applied clipping planes from the event data objects\n      allEventData.traverse((eventObject: any) => {\n        if (eventObject.geometry && eventObject.material) {\n          eventObject.material.clippingPlanes = null;\n        }\n      });\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the collision of two particles.\n   * @param tweenDuration Duration of the particle collision animation tween.\n   * @param particleSize Size of the particles.\n   * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\n   * @param particleColor Color of the particles.\n   * @param onEnd Callback to call when the particle collision ends.\n   */\n  public collideParticles(\n    tweenDuration: number,\n    particleSize: number = 10,\n    distanceFromOrigin: number = 5000,\n    particleColor: Color = new Color(0xffffff),\n    onEnd?: () => void\n  ) {\n    const particleGeometry = new SphereGeometry(particleSize, 32, 32);\n    const particleMaterial = new MeshBasicMaterial({\n      color: particleColor,\n      transparent: true,\n      opacity: 0,\n    });\n\n    const particle1 = new Mesh(particleGeometry, particleMaterial);\n    const particle2 = particle1.clone() as Mesh;\n\n    particle1.position.setZ(distanceFromOrigin);\n    particle2.position.setZ(-distanceFromOrigin);\n\n    const particles = [particle1, particle2];\n\n    this.scene.add(...particles);\n\n    const particleTweens = [];\n\n    for (const particle of particles) {\n      new Tween(particle.material)\n        .to(\n          {\n            opacity: 1,\n          },\n          300\n        )\n        .start();\n\n      const particleToOrigin = new Tween(particle.position)\n        .to(\n          {\n            z: 0,\n          },\n          tweenDuration\n        )\n        .start();\n\n      particleTweens.push(particleToOrigin);\n    }\n\n    particleTweens[0].onComplete(() => {\n      this.scene.remove(...particles);\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param animationFunction Animation function to call after collision.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateWithCollision(\n    animationFunction: (\n      tweenDuration: number,\n      onEnd?: () => void,\n      onAnimationStart?: () => void\n    ) => void,\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Get the color of the first track to use for colliding particles\n    const track = allEventData.getObjectByName('Track');\n    let trackColor: Color;\n    if (track instanceof Group) {\n      trackColor = (track.children[0] as any)?.material?.color;\n    } else {\n      trackColor = (track as any)?.material.color;\n    }\n\n    // Hide event data to show particles collision\n    if (allEventData) {\n      allEventData.visible = false;\n    }\n\n    this.collideParticles(1500, 30, 5000, trackColor, () => {\n      animationFunction(tweenDuration, onEnd, () => {\n        if (allEventData) {\n          allEventData.visible = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    this.animateWithCollision(\n      this.animateEventWithClipping,\n      tweenDuration,\n      onEnd\n    );\n  }\n\n  /**\n   * Get the positions of hits in a multidimensional array\n   * from a single dimensional array.\n   * @param positions Positions of hits in a single dimensional array.\n   * @returns Positions of hits in a multidimensional array.\n   */\n  private getHitsPositions(positions: number[]): number[][] {\n    const hitsPositions: number[][] = [];\n    for (let i = 0; i  void) {\n    const { positions, animateEventAfterInterval, collisionDuration } =\n      animationPreset;\n\n    if (animateEventAfterInterval && collisionDuration) {\n      // Will be made visible after collision animation ends.\n      this.scene.getObjectByName(SceneManager.EVENT_DATA_ID).visible = false;\n      setTimeout(() => {\n        this.animateEventWithCollision(collisionDuration);\n      }, animateEventAfterInterval);\n    }\n\n    const firstTween = this.getCameraTween(\n      positions[0].position,\n      positions[0].duration ?? 2000,\n      positions[0].easing\n    );\n\n    let previousTween = firstTween;\n    positions.slice(1).forEach(({ position, duration, easing }) => {\n      const tween = this.getCameraTween(position, duration ?? 2000, easing);\n      previousTween.chain(tween);\n      previousTween = tween;\n    });\n    previousTween.onComplete(onEnd);\n\n    firstTween.start();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/cms-objects.ts\n        \n\n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getMuonChamber\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/cms-objects.ts:25\n                \n            \n\n\n            \n                \n                    Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonChamberParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon Chamber.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon Chamber object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Object3D,\n  Group,\n  Mesh,\n  MeshBasicMaterial,\n  EdgesGeometry,\n  LineBasicMaterial,\n  DoubleSide,\n  LineSegments,\n  BufferGeometry,\n  BufferAttribute,\n} from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n  /**\n   * Process the Muon Chamber from the given parameters.\n   * and get it as a geometry.\n   * @param muonChamberParams Parameters of the Muon Chamber.\n   * @returns Muon Chamber object.\n   */\n  public static getMuonChamber(muonChamberParams: any): Object3D {\n    let allFacePositions: number[] = [];\n\n    const addFace3 = (...faces: string[]) => {\n      allFacePositions = allFacePositions.concat(\n        ...faces.map((face) => muonChamberParams[face])\n      );\n    };\n\n    // front\n    addFace3('front_1', 'front_2', 'front_3');\n    addFace3('front_3', 'front_4', 'front_1');\n\n    // back\n    addFace3('back_1', 'back_2', 'back_3');\n    addFace3('back_3', 'back_4', 'back_1');\n\n    // top\n    addFace3('back_1', 'back_2', 'front_2');\n    addFace3('front_2', 'front_1', 'back_1');\n\n    // bottom\n    addFace3('back_4', 'back_3', 'front_3');\n    addFace3('front_3', 'front_4', 'back_4');\n\n    // left\n    addFace3('front_1', 'front_4', 'back_4');\n    addFace3('back_4', 'back_1', 'front_1');\n\n    // right\n    addFace3('front_2', 'back_2', 'back_3');\n    addFace3('back_3', 'front_3', 'front_2');\n\n    const boxBuffer = new BufferGeometry();\n    boxBuffer.attributes.position = new BufferAttribute(\n      new Float32Array(allFacePositions),\n      3\n    );\n    boxBuffer.computeVertexNormals();\n\n    const boxObject = new Mesh(\n      boxBuffer,\n      new MeshBasicMaterial({\n        color: muonChamberParams.color ?? EVENT_DATA_TYPE_COLORS.MuonChambers,\n        transparent: true,\n        opacity: 0.1,\n        side: DoubleSide,\n      })\n    );\n\n    boxObject.userData = Object.assign({}, muonChamberParams);\n    boxObject.name = 'MuonChamber';\n\n    // These are the lines along the box edges\n\n    const boxEdges = new EdgesGeometry(boxBuffer);\n    const lineBoxObject = new LineSegments(\n      boxEdges,\n      new LineBasicMaterial({\n        color: 0xffffff,\n        transparent: true,\n        opacity: 0.7,\n      })\n    );\n\n    const muonChamber = new Group();\n    muonChamber.add(boxObject);\n    muonChamber.add(lineBoxObject);\n\n    muonChamberParams.uuid = boxObject.uuid;\n\n    return muonChamber;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorManager.html":{"url":"classes/ColorManager.html","title":"class - ColorManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/color-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Color manager for three.js functions related to coloring of objects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                collectionColor\n                            \n                            \n                                    Public\n                                collectionColorRandom\n                            \n                            \n                                colorObjectsByProperty\n                            \n                            \n                                    Public\n                                colorTracksByVertex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sceneManager: SceneManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/color-manager.ts:7\n                            \n                        \n\n                \n                    \n                            Create the coloring manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sceneManager\n                                                  \n                                                        \n                                                                        SceneManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The scene manager responsible for managing the three.js scene.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        collectionColor\n                        \n                    \n                \n            \n            \n                \n                    \n                    collectionColor(collectionName: string, color: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:38\n                \n            \n\n\n            \n                \n                    Changes the color of all objects inside an event data collection.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hex value representing the color.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        collectionColorRandom\n                        \n                    \n                \n            \n            \n                \n                    \n                    collectionColorRandom(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:55\n                \n            \n\n\n            \n                \n                    Changes the color of all objects inside an event data collection to some random color.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        colorObjectsByProperty\n                        \n                    \n                \n            \n            \n                \ncolorObjectsByProperty(color: any, objectsGroup: string, customCheck: (objectUserData: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:20\n                \n            \n\n\n            \n                \n                    Color objects by a property's value or range.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color to set for the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the object(s) group to color.\n\n                                    \n                                \n                                \n                                    customCheck\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function to custom check values against object params.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        colorTracksByVertex\n                        \n                    \n                \n            \n            \n                \n                    \n                    colorTracksByVertex(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/color-manager.ts:72\n                \n            \n\n\n            \n                \n                    Randomly color tracks by the vertex they are associated with.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Color, MeshPhongMaterial } from 'three';\nimport { SceneManager } from './scene-manager';\n\n/**\n * Color manager for three.js functions related to coloring of objects.\n */\nexport class ColorManager {\n  /**\n   * Create the coloring manager.\n   * @param sceneManager The scene manager responsible for managing the three.js scene.\n   */\n  constructor(private sceneManager: SceneManager) {}\n\n  /**\n   * Color objects by a property's value or range.\n   * @param color Color to set for the object.\n   * @param objectsGroup Name of the object(s) group to color.\n   * @param customCheck Function to custom check values against object params.\n   */\n  colorObjectsByProperty(\n    color: any,\n    objectsGroup: string,\n    customCheck: (objectUserData: any) => boolean\n  ) {\n    const objects = this.sceneManager.getScene().getObjectByName(objectsGroup);\n    objects.traverse((object: any) => {\n      if (object.material?.color && customCheck(object.userData)) {\n        object.material.color.set(color);\n      }\n    });\n  }\n\n  /**\n   * Changes the color of all objects inside an event data collection.\n   * @param collectionName Name of the collection.\n   * @param color Hex value representing the color.\n   */\n  public collectionColor(collectionName: string, color: any) {\n    const collection = this.sceneManager\n      .getScene()\n      .getObjectByName(SceneManager.EVENT_DATA_ID)\n      .getObjectByName(collectionName);\n\n    for (const child of Object.values(collection.children)) {\n      child.traverse((object) => {\n        (object['material']?.color as Color)?.set(color);\n      });\n    }\n  }\n\n  /**\n   * Changes the color of all objects inside an event data collection to some random color.\n   * @param collectionName Name of the collection.\n   */\n  public collectionColorRandom(collectionName: string) {\n    const collection = this.sceneManager\n      .getScene()\n      .getObjectByName(SceneManager.EVENT_DATA_ID)\n      .getObjectByName(collectionName);\n\n    for (const child of Object.values(collection.children)) {\n      child.traverse((object) => {\n        (object['material']?.color as Color)?.set(Math.random() * 0xffffff);\n      });\n    }\n  }\n\n  /**\n   * Randomly color tracks by the vertex they are associated with.\n   * @param collectionName Name of the collection.\n   */\n  public colorTracksByVertex(collectionName: string) {\n    const scene = this.sceneManager.getScene();\n    const vertices = scene.getObjectByName('Vertices');\n    vertices.traverse((object) => {\n      const { linkedTrackCollection, linkedTracks } = object.userData;\n\n      if (\n        object.name === 'Vertex' &&\n        linkedTrackCollection === collectionName &&\n        linkedTracks\n      ) {\n        const colorForTracksVertex = (object['material'] as MeshPhongMaterial)\n          .color;\n        const trackCollection = scene.getObjectByName(linkedTrackCollection);\n\n        linkedTracks.forEach((trackIndex: number) => {\n          trackCollection.children[trackIndex].traverse((trackObject) => {\n            trackObject?.['material']?.color?.set(colorForTracksVertex);\n          });\n        });\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorOptions.html":{"url":"classes/ColorOptions.html","title":"class - ColorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/color-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Color options with functions to color event data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                allColorByOptions\n                            \n                            \n                                    Private\n                                chargeColors\n                            \n                            \n                                    Private\n                                collectionName\n                            \n                            \n                                    Private\n                                colorByOptions\n                            \n                            \n                                    Private\n                                colorOptionsFolder\n                            \n                            \n                                    Private\n                                momColors\n                            \n                            \n                                    Private\n                                selectedColorByOption\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyChargeColorOptions\n                            \n                            \n                                    Private\n                                applyMomColorOptions\n                            \n                            \n                                    Private\n                                applyVertexColorOptions\n                            \n                            \n                                    Private\n                                colorByMomentum\n                            \n                            \n                                    Private\n                                getMomentum\n                            \n                            \n                                    Private\n                                initChargeColorOptions\n                            \n                            \n                                    Private\n                                initColorByOptions\n                            \n                            \n                                    Private\n                                initMomColorOptions\n                            \n                            \n                                    Private\n                                onlySelectedColorByOption\n                            \n                            \n                                    Private\n                                shouldColorByCharge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorManager: ColorManager, collectionFolder: PhoenixMenuNode, collectionColor: Color, colorByOptionsToInclude?: ColorByOptionKeys[])\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/color-options.ts:74\n                            \n                        \n\n                \n                    \n                            Create the color options.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        colorManager\n                                                  \n                                                        \n                                                                        ColorManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Color manager for three.js functions related to coloring of objects.\n\n                                                        \n                                                \n                                                \n                                                        collectionFolder\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Collection folder to add the color by options to.\n\n                                                        \n                                                \n                                                \n                                                        collectionColor\n                                                  \n                                                        \n                                                                    Color\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        colorByOptionsToInclude\n                                                  \n                                                        \n                                                                        ColorByOptionKeys[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Options to include for this collection to color event data by.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        allColorByOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOption[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      key: ColorByOptionKeys.CHARGE,\n      name: 'Charge ' + PrettySymbols.getPrettySymbol('charge'),\n      initialize: this.initChargeColorOptions.bind(this),\n      apply: this.applyChargeColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.MOM,\n      name: 'Momentum ' + PrettySymbols.getPrettySymbol('mom'),\n      initialize: this.initMomColorOptions.bind(this),\n      apply: this.applyMomColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.VERTEX,\n      name: 'Vertex',\n      apply: this.applyVertexColorOptions.bind(this),\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:35\n                        \n                    \n\n            \n                \n                    All color by options possible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        chargeColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    '-1': '#ff0000',\n    '0': '#ff0000',\n    '1': '#ff0000',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:57\n                        \n                    \n\n            \n                \n                    Default values for colors for color by charge.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        collectionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:26\n                        \n                    \n\n            \n                \n                    Collection name of the event data type.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorByOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOption[]\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:28\n                        \n                    \n\n            \n                \n                    Available options to color by in this instance of color options.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorOptionsFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:32\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing color configurations.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        momColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    min: {\n      value: 0,\n      color: '#ff0000',\n    },\n    max: {\n      value: 50000,\n      color: '#ff0000',\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:65\n                        \n                    \n\n            \n                \n                    Default values for colors and min/max for color by momentum.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedColorByOption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOptionKeys\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:30\n                        \n                    \n\n            \n                \n                    Currently selected option to color by.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyChargeColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyChargeColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:176\n                \n            \n\n\n            \n                \n                    Apply charge color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyMomColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyMomColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:246\n                \n            \n\n\n            \n                \n                    Apply momentum color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        applyVertexColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyVertexColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:293\n                \n            \n\n\n            \n                \n                    Apply color by vertex to tracks.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        colorByMomentum\n                        \n                    \n                \n            \n            \n                \n                    \n                    colorByMomentum(minOrMax: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:256\n                \n            \n\n\n            \n                \n                    Color event data based on the momentum property of each object.\nThis is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    minOrMax\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the momentum to color objects by is minimum or maximum momentum.\nThis is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getMomentum\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMomentum(objectParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:282\n                \n            \n\n\n            \n                \n                    Get momentum from object parameters.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters associated to the 3D object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        THe momentum value.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initChargeColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    initChargeColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:150\n                \n            \n\n\n            \n                \n                    Initialize charge color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initColorByOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    initColorByOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:124\n                \n            \n\n\n            \n                \n                    Initialize the color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initMomColorOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    initMomColorOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:207\n                \n            \n\n\n            \n                \n                    Initialize momentum color options.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        onlySelectedColorByOption\n                        \n                    \n                \n            \n            \n                \n                    \n                    onlySelectedColorByOption()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:300\n                \n            \n\n\n            \n                \n                    Show configs of only the currently selected color by option.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        shouldColorByCharge\n                        \n                    \n                \n            \n            \n                \n                    \n                    shouldColorByCharge(objectParams: any, chargeValue: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/color-options.ts:193\n                \n            \n\n\n            \n                \n                    Check if object should be colored based on charge value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters associated to the 3D object.\n\n                                    \n                                \n                                \n                                    chargeValue\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value of charge (-1, 0, 1).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether the charge is equal to the value.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Color } from 'three';\nimport { PrettySymbols } from '../../helpers/pretty-symbols';\nimport { ColorManager } from '../three-manager/color-manager';\nimport { PhoenixMenuNode } from './phoenix-menu/phoenix-menu-node';\n\n/** Keys for options available for coloring event data by. */\nexport enum ColorByOptionKeys {\n  CHARGE = 'charge',\n  MOM = 'mom',\n  VERTEX = 'vertex',\n}\n\n/** Type for a single color by option. */\ntype ColorByOption = {\n  key: ColorByOptionKeys;\n  name: string;\n  initialize?: () => void;\n  apply?: () => void;\n};\n\n/**\n * Color options with functions to color event data.\n */\nexport class ColorOptions {\n  /** Collection name of the event data type. */\n  private collectionName: string;\n  /** Available options to color by in this instance of color options. */\n  private colorByOptions: ColorByOption[];\n  /** Currently selected option to color by. */\n  private selectedColorByOption: ColorByOptionKeys;\n  /** Phoenix menu node containing color configurations. */\n  private colorOptionsFolder: PhoenixMenuNode;\n\n  /** All color by options possible. */\n  private allColorByOptions: ColorByOption[] = [\n    {\n      key: ColorByOptionKeys.CHARGE,\n      name: 'Charge ' + PrettySymbols.getPrettySymbol('charge'),\n      initialize: this.initChargeColorOptions.bind(this),\n      apply: this.applyChargeColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.MOM,\n      name: 'Momentum ' + PrettySymbols.getPrettySymbol('mom'),\n      initialize: this.initMomColorOptions.bind(this),\n      apply: this.applyMomColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.VERTEX,\n      name: 'Vertex',\n      apply: this.applyVertexColorOptions.bind(this),\n    },\n  ];\n\n  // Charge options.\n  /** Default values for colors for color by charge. */\n  private chargeColors = {\n    '-1': '#ff0000',\n    '0': '#ff0000',\n    '1': '#ff0000',\n  };\n\n  // Momentum options.\n  /** Default values for colors and min/max for color by momentum. */\n  private momColors = {\n    min: {\n      value: 0,\n      color: '#ff0000',\n    },\n    max: {\n      value: 50000,\n      color: '#ff0000',\n    },\n  };\n\n  /**\n   * Create the color options.\n   * @param colorManager Color manager for three.js functions related to coloring of objects.\n   * @param collectionFolder Collection folder to add the color by options to.\n   * @param colorByOptionsToInclude Options to include for this collection to color event data by.\n   */\n  constructor(\n    private colorManager: ColorManager,\n    collectionFolder: PhoenixMenuNode,\n    collectionColor: Color,\n    colorByOptionsToInclude?: ColorByOptionKeys[]\n  ) {\n    this.collectionName = collectionFolder.name;\n    this.colorOptionsFolder = collectionFolder.addChild('Color Options');\n\n    this.colorOptionsFolder.addConfig('color', {\n      label: 'Color',\n      color: collectionColor\n        ? `#${collectionColor?.getHexString()}`\n        : undefined,\n      onChange: (value) =>\n        this.colorManager.collectionColor(this.collectionName, value),\n    });\n\n    this.colorOptionsFolder.addConfig('button', {\n      label: 'Random',\n      onClick: () =>\n        this.colorManager.collectionColorRandom(this.collectionName),\n    });\n\n    // Check which color by options are to be included.\n\n    if (colorByOptionsToInclude?.length > 0) {\n      this.colorByOptions = this.allColorByOptions.filter((colorByOption) =>\n        colorByOptionsToInclude.includes(colorByOption.key)\n      );\n\n      this.initColorByOptions();\n      this.colorByOptions.forEach((colorByOption) =>\n        colorByOption.initialize?.()\n      );\n      this.onlySelectedColorByOption();\n    }\n  }\n\n  /**\n   * Initialize the color options.\n   */\n  private initColorByOptions() {\n    this.selectedColorByOption = this.colorByOptions[0].key;\n\n    // Configurations\n\n    this.colorOptionsFolder.addConfig('select', {\n      label: 'Color by',\n      options: this.colorByOptions.map((colorByOption) => colorByOption.name),\n      onChange: (updatedColorByOption) => {\n        const newColorByOption = this.colorByOptions.find(\n          (colorByOption) => colorByOption.name === updatedColorByOption\n        );\n\n        this.selectedColorByOption = newColorByOption?.key;\n        newColorByOption?.apply?.();\n\n        this.onlySelectedColorByOption();\n      },\n    });\n  }\n\n  // Charge options.\n\n  /**\n   * Initialize charge color options.\n   */\n  private initChargeColorOptions() {\n    // Charge configurations\n    [-1, 0, 1].forEach((chargeValue) => {\n      this.colorOptionsFolder.addConfig('color', {\n        label: `${PrettySymbols.getPrettySymbol('charge')}=${chargeValue}`,\n        group: ColorByOptionKeys.CHARGE,\n        color: this.chargeColors[chargeValue],\n        onChange: (color) => {\n          this.chargeColors[chargeValue] = color;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.CHARGE) {\n            this.colorManager.colorObjectsByProperty(\n              color,\n              this.collectionName,\n              (objectUserData) =>\n                this.shouldColorByCharge(objectUserData, chargeValue)\n            );\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Apply charge color options.\n   */\n  private applyChargeColorOptions() {\n    [-1, 0, 1].forEach((chargeValue) => {\n      this.colorManager.colorObjectsByProperty(\n        this.chargeColors[chargeValue],\n        this.collectionName,\n        (objectUserData) =>\n          this.shouldColorByCharge(objectUserData, chargeValue)\n      );\n    });\n  }\n\n  /**\n   * Check if object should be colored based on charge value.\n   * @param objectParams Object parameters associated to the 3D object.\n   * @param chargeValue Value of charge (-1, 0, 1).\n   * @returns Whether the charge is equal to the value.\n   */\n  private shouldColorByCharge(objectParams: any, chargeValue: number) {\n    // For ATLAS data, the charge is calculated from dparams[4] otherwise it exists as an object's userData\n    if (Math.sign(1 / parseInt(objectParams?.dparams?.[4])) === chargeValue) {\n      return true;\n    } else if (objectParams?.charge === chargeValue) {\n      return true;\n    }\n  }\n\n  // Momentum options.\n\n  /**\n   * Initialize momentum color options.\n   */\n  private initMomColorOptions() {\n    // Momentum configurations\n    Object.entries(this.momColors).forEach(([key, momValue]) => {\n      this.colorOptionsFolder.addConfig('slider', {\n        label: PrettySymbols.getPrettySymbol('mom') + ' ' + key,\n        group: ColorByOptionKeys.MOM,\n        min: this.momColors.min.value,\n        max: this.momColors.max.value,\n        value: this.momColors[key].value,\n        step: 10,\n        allowCustomValue: true,\n        onChange: (sliderValue) => {\n          this.momColors[key].value = sliderValue;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.MOM) {\n            this.colorByMomentum('min');\n            this.colorByMomentum('max');\n          }\n        },\n      });\n\n      this.colorOptionsFolder.addConfig('color', {\n        label: PrettySymbols.getPrettySymbol('mom') + ' ' + key + ' color',\n        group: ColorByOptionKeys.MOM,\n        color: momValue.color,\n        onChange: (color) => {\n          this.momColors[key].color = color;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.MOM) {\n            this.colorByMomentum(key);\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Apply momentum color options.\n   */\n  private applyMomColorOptions() {\n    this.colorByMomentum('min');\n    this.colorByMomentum('max');\n  }\n\n  /**\n   * Color event data based on the momentum property of each object.\n   * @param minOrMax If the momentum to color objects by is minimum or maximum momentum.\n   * This is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n   */\n  private colorByMomentum(minOrMax: string) {\n    this.colorManager.colorObjectsByProperty(\n      this.momColors[minOrMax].color,\n      this.collectionName,\n      (objectParams) => {\n        const mom = this.getMomentum(objectParams);\n        const mid = (this.momColors.min.value + this.momColors.max.value) / 2;\n\n        if (minOrMax === 'max' && mom > mid && mom  this.momColors.min.value\n        ) {\n          return true;\n        }\n      }\n    );\n  }\n\n  /**\n   * Get momentum from object parameters.\n   * @param objectParams Parameters associated to the 3D object.\n   * @returns THe momentum value.\n   */\n  private getMomentum(objectParams: any) {\n    return objectParams?.dparams?.[4]\n      ? Math.abs(1 / parseFloat(objectParams?.dparams?.[4]))\n      : objectParams?.mom;\n  }\n\n  // Vertex options.\n\n  /**\n   * Apply color by vertex to tracks.\n   */\n  private applyVertexColorOptions() {\n    this.colorManager.colorTracksByVertex(this.collectionName);\n  }\n\n  /**\n   * Show configs of only the currently selected color by option.\n   */\n  private onlySelectedColorByOption() {\n    this.colorOptionsFolder.configs.forEach((config) => {\n      const groupNotSelected =\n        config.group !== undefined &&\n        config.group !== this.selectedColorByOption;\n\n      config.hidden = groupNotSelected ? true : false;\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Configuration.html":{"url":"interfaces/Configuration.html","title":"interface - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/types/configuration.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration of the event display.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowUrlOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultEventFile\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultView\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            elementId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            enableDatGUIMenu\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            eventDataLoader\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            phoenixMenuRoot\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            presetAnimations\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            presetViews\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowUrlOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowUrlOptions:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to allow URL options or not (true by default).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultEventFile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultEventFile:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default event to load when none given in URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultView\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultView:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default view [x,y,z].\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the wrapper element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDatGUIMenu\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDatGUIMenu:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to enable dat.GUI menu or not.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventDataLoader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventDataLoader:         EventDataLoader\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventDataLoader\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event data loader responsible for processing and loading event data.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phoenixMenuRoot\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phoenixMenuRoot:         PhoenixMenuNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PhoenixMenuNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Root node of the phoenix menu.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presetAnimations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        presetAnimations:         AnimationPreset[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AnimationPreset[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Preset views for switching event display camera.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presetViews\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        presetViews:         PresetView[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PresetView[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Preset views for switching event display camera.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { PresetView } from '../models/preset-view.model';\nimport { EventDataLoader } from '../../loaders/event-data-loader';\nimport { PhoenixMenuNode } from '../../managers/ui-manager/phoenix-menu/phoenix-menu-node';\nimport { AnimationPreset } from '../../managers/three-manager/animations-manager';\n\n/**\n * Configuration of the event display.\n */\nexport interface Configuration {\n  /** Default view [x,y,z]. */\n  defaultView?: number[];\n  /** Preset views for switching event display camera. */\n  presetViews?: PresetView[];\n  /** Preset views for switching event display camera. */\n  presetAnimations?: AnimationPreset[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader?: EventDataLoader;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot?: PhoenixMenuNode;\n  /** Whether to enable dat.GUI menu or not. */\n  enableDatGUIMenu?: boolean;\n  /** ID of the wrapper element. */\n  elementId?: string;\n  /** Default event to load when none given in URL. */\n  defaultEventFile?: { eventFile: string; eventType: string };\n  /** Whether to allow URL options or not (true by default). */\n  allowUrlOptions?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CoordinateHelper.html":{"url":"classes/CoordinateHelper.html","title":"class - CoordinateHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CoordinateHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/coordinate-helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper methods for coordinate conversions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                anglesAreSane\n                            \n                            \n                                    Static\n                                atlasQuaternion\n                            \n                            \n                                    Static\n                                etaPhiToCartesian\n                            \n                            \n                                    Static\n                                etaToTheta\n                            \n                            \n                                    Static\n                                sphericalToCartesian\n                            \n                            \n                                    Static\n                                thetaToEta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        anglesAreSane\n                        \n                    \n                \n            \n            \n                \n                    \n                    anglesAreSane(theta: number, phi: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:13\n                \n            \n\n\n            \n                \n                    Checks if angles are within range: -PI \n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    theta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        equatorial angle\n\n                                    \n                                \n                                \n                                    phi\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        azimuthal angle\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        atlasQuaternion\n                        \n                    \n                \n            \n            \n                \n                    \n                    atlasQuaternion()\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:81\n                \n            \n\n\n            \n                \n                    Returns the Quaternion to rotate to ATLAS coords.\nTemporary. We will need to make this configurable per experiment.\n\n\n                    \n                        Returns :     Quaternion\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        etaPhiToCartesian\n                        \n                    \n                \n            \n            \n                \n                    \n                    etaPhiToCartesian(radius: number, eta: number, phi: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:65\n                \n            \n\n\n            \n                \n                    Get cartesian from eta/phi parameters.\nApplies the necessary rotations to move from threejs native to experimental.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The radius.\n\n                                    \n                                \n                                \n                                    eta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pseudorapidity\n\n                                    \n                                \n                                \n                                    phi\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phi angle.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        etaToTheta\n                        \n                    \n                \n            \n            \n                \n                    \n                    etaToTheta(eta: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:25\n                \n            \n\n\n            \n                \n                    Convert pseudorapidity eta to spherical coordinate theta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Pseudorapidity eta to convert to theta.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        theta in radians\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        sphericalToCartesian\n                        \n                    \n                \n            \n            \n                \n                    \n                    sphericalToCartesian(radius: number, theta: number, phi: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:46\n                \n            \n\n\n            \n                \n                    Get cartesian from spherical parameters.\nApplies the necessary rotations to move from threejs to experimental.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The radius.\n\n                                    \n                                \n                                \n                                    theta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Theta angle.\n\n                                    \n                                \n                                \n                                    phi\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phi angle.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        thetaToEta\n                        \n                    \n                \n            \n            \n                \n                    \n                    thetaToEta(theta: number)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/coordinate-helper.ts:35\n                \n            \n\n\n            \n                \n                    Convert spherical theta to pseudorapidity eta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    theta\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle in radians to convert to pseudorapidity eta.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        pseudorapidity eta\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3, Quaternion } from 'three';\n\n/**\n * Helper methods for coordinate conversions.\n */\nexport class CoordinateHelper {\n  /**\n   * Checks if angles are within range: -PI  phi;\n    const tmp2 = 0  theta;\n    return tmp1 && tmp2;\n  }\n\n  /**\n   * Convert pseudorapidity eta to spherical coordinate theta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param eta Pseudorapidity eta to convert to theta.\n   * @returns theta in radians\n   */\n  public static etaToTheta(eta: number): number {\n    return 2 * Math.atan(Math.pow(Math.E, -eta));\n  }\n\n  /**\n   * Convert spherical theta to pseudorapidity eta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param theta Angle in radians to convert to pseudorapidity eta.\n   * @returns pseudorapidity eta\n   */\n  public static thetaToEta(theta: number): number {\n    return -Math.log(Math.tan(theta / 2.0));\n  }\n\n  /**\n   * Get cartesian from spherical parameters.\n   * Applies the necessary rotations to move from threejs to experimental.\n   * @param radius The radius.\n   * @param theta Theta angle.\n   * @param phi Phi angle.\n   */\n  public static sphericalToCartesian(\n    radius: number,\n    theta: number,\n    phi: number\n  ): Vector3 {\n    // Threejs uses theta as azimuthal, so need to reverse.\n    const vector = new Vector3();\n    vector.setFromSphericalCoords(radius, theta, phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Get cartesian from eta/phi parameters.\n   * Applies the necessary rotations to move from threejs native to experimental.\n   * @param radius The radius.\n   * @param eta Pseudorapidity\n   * @param phi Phi angle.\n   */\n  public static etaPhiToCartesian(\n    radius: number,\n    eta: number,\n    phi: number\n  ): Vector3 {\n    const vector = new Vector3();\n    // Threejs uses theta as azimuthal, so need to reverse.\n    vector.setFromSphericalCoords(radius, this.etaToTheta(eta), phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Returns the Quaternion to rotate to ATLAS coords.\n   * Temporary. We will need to make this configurable per experiment.\n   */\n  public static atlasQuaternion(): Quaternion {\n    // With nothing, we have eta=0 on x, and phi=0 on z\n    // Should be eta=0 on y, and phi=0 on x\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(0, 0, 1);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2); // This puts eta~infinite on z-axis, eta=0 on  but y-positive is phi=PI (and eta=0 on x)\n    const quaternion2 = new Quaternion();\n    quaternion2.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI / 2.0); // Now have eta = 3.0 on -x, eta =0 on +y, and phi = 0 on +z\n    quaternion.multiply(quaternion2);\n    return quaternion;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/cut.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                defaultApplyMaxValue\n                            \n                            \n                                    Private\n                                defaultApplyMinValue\n                            \n                            \n                                    Private\n                                defaultMaxValue\n                            \n                            \n                                    Private\n                                defaultMinValue\n                            \n                            \n                                    Public\n                                field\n                            \n                            \n                                    Public\n                                maxCutActive\n                            \n                            \n                                    Public\n                                maxValue\n                            \n                            \n                                    Public\n                                minCutActive\n                            \n                            \n                                    Public\n                                minValue\n                            \n                            \n                                    Public\n                                step\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cutPassed\n                            \n                            \n                                enableMaxCut\n                            \n                            \n                                enableMinCut\n                            \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number, step: number, minCutActive: boolean, maxCutActive: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/lib/models/cut.model.ts:12\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Size of increment when using slider.\n\n                                                        \n                                                \n                                                \n                                                        minCutActive\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                If true, the minimum cut is appled. Can be overriden later with enableMinCut.\n\n                                                        \n                                                \n                                                \n                                                        maxCutActive\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                If true, the maximum cut is appled. Can be overriden later with enableMaxCut.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultApplyMaxValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:10\n                        \n                    \n\n            \n                \n                    Default if upper bound applied\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultApplyMinValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:12\n                        \n                    \n\n            \n                \n                    Default if lower bound applied\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultMaxValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:8\n                        \n                    \n\n            \n                \n                    Default maximum allowed value of the event data attribute.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultMinValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:6\n                        \n                    \n\n            \n                \n                    Default minimum allowed value of the event data attribute.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:24\n                        \n                    \n\n            \n                \n                    Name of the event data attribute to be filtered.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        maxCutActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:29\n                        \n                    \n\n            \n                \n                    If true, the maximum cut is appled. Can be overriden later with enableMaxCut.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        maxValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:26\n                        \n                    \n\n            \n                \n                    Maximum allowed value of the event data attribute.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        minCutActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:28\n                        \n                    \n\n            \n                \n                    If true, the minimum cut is appled. Can be overriden later with enableMinCut.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        minValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:25\n                        \n                    \n\n            \n                \n                    Minimum allowed value of the event data attribute.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        step\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:27\n                        \n                    \n\n            \n                \n                    Size of increment when using slider.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cutPassed\n                        \n                    \n                \n            \n            \n                \ncutPassed(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/cut.model.ts:48\n                \n            \n\n\n            \n                \n                    Returns true if the passed value is within the active cut range.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enableMaxCut\n                        \n                    \n                \n            \n            \n                \nenableMaxCut(check: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/cut.model.ts:38\n                \n            \n\n\n            \n                \n                    Returns true if upper cut is valid.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    check\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enableMinCut\n                        \n                    \n                \n            \n            \n                \nenableMinCut(check: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/cut.model.ts:43\n                \n            \n\n\n            \n                \n                    Returns true if upper cut is valid.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    check\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reset\n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/cut.model.ts:58\n                \n            \n\n\n            \n                \n                    Reset the minimum and maximum value of the cut to default.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Default minimum allowed value of the event data attribute. */\n  private defaultMinValue: number;\n  /** Default maximum allowed value of the event data attribute. */\n  private defaultMaxValue: number;\n  /** Default if upper bound applied */\n  private defaultApplyMaxValue: boolean;\n  /** Default if lower bound applied */\n  private defaultApplyMinValue: boolean;\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   * @param step Size of increment when using slider.\n   * @param minCutActive If true, the minimum cut is appled. Can be overriden later with enableMinCut.\n   * @param maxCutActive If true, the maximum cut is appled. Can be overriden later with enableMaxCut.\n   *\n   */\n  constructor(\n    public field: string,\n    public minValue: number,\n    public maxValue: number,\n    public step: number = 1,\n    public minCutActive: boolean = true,\n    public maxCutActive: boolean = true\n  ) {\n    this.defaultMinValue = minValue;\n    this.defaultMaxValue = maxValue;\n    this.defaultApplyMinValue = minCutActive;\n    this.defaultApplyMaxValue = maxCutActive;\n  }\n\n  /** Returns true if upper cut is valid. */\n  enableMaxCut(check: boolean) {\n    this.maxCutActive = check;\n  }\n\n  /** Returns true if upper cut is valid. */\n  enableMinCut(check: boolean) {\n    this.minCutActive = check;\n  }\n\n  /** Returns true if the passed value is within the active cut range. */\n  cutPassed(value: number): boolean {\n    return (\n      (!this.maxCutActive || value  this.minValue)\n    );\n  }\n\n  /**\n   * Reset the minimum and maximum value of the cut to default.\n   */\n  reset() {\n    this.minValue = this.defaultMinValue;\n    this.maxValue = this.defaultMaxValue;\n    this.minCutActive = this.defaultApplyMinValue;\n    this.maxCutActive = this.defaultApplyMaxValue;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatGUIMenuUI.html":{"url":"classes/DatGUIMenuUI.html","title":"class - DatGUIMenuUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatGUIMenuUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/dat-gui-ui.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapper class for dat.GUI menu to perform UI related operations.\n\n            \n\n\n            \n                Implements\n            \n            \n                            PhoenixUI\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventFolder\n                            \n                            \n                                    Private\n                                geomFolder\n                            \n                            \n                                    Private\n                                gui\n                            \n                            \n                                    Private\n                                guiParameters\n                            \n                            \n                                    Private\n                                labelsFolder\n                            \n                            \n                                    Private\n                                maxPositionX\n                            \n                            \n                                    Private\n                                maxPositionY\n                            \n                            \n                                    Private\n                                maxPositionZ\n                            \n                            \n                                    Private\n                                sceneManager\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addCollection\n                            \n                            \n                                    Public\n                                addEventDataFolder\n                            \n                            \n                                    Public\n                                addEventDataTypeFolder\n                            \n                            \n                                    Public\n                                addGeometry\n                            \n                            \n                                    Public\n                                addGeometryFolder\n                            \n                            \n                                    Public\n                                addLabel\n                            \n                            \n                                    Public\n                                addLabelsFolder\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getEventDataTypeFolder\n                            \n                            \n                                    Public\n                                removeLabel\n                            \n                            \n                                    Private\n                                removeOBJ\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elementId: string, three: ThreeManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:43\n                            \n                        \n\n                \n                    \n                            Create dat.GUI menu UI with different controls related to detector geometry and event data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ID of the wrapper element.\n\n                                                        \n                                                \n                                                \n                                                        three\n                                                  \n                                                        \n                                                                        ThreeManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three manager for managing three.js related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        eventFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GUI\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:34\n                        \n                    \n\n            \n                \n                    dat.GUI menu folder containing event related data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        geomFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GUI\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:32\n                        \n                    \n\n            \n                \n                    dat.GUI menu folder containing geometries data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        gui\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GUI\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:21\n                        \n                    \n\n            \n                \n                    dat.GUI menu.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        guiParameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    rotate: undefined,\n    axis: undefined,\n    lowRes: undefined,\n    eventData: undefined,\n    geometries: undefined,\n    labels: undefined,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:23\n                        \n                    \n\n            \n                \n                    Options for the dat.GUI menu.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        labelsFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GUI\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:36\n                        \n                    \n\n            \n                \n                    dat.GUI menu folder containing labels.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxPositionX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 4000\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:39\n                        \n                    \n\n            \n                \n                    Max changeable position of an object along the x-axis.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxPositionY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 4000\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:41\n                        \n                    \n\n            \n                \n                    Max changeable position of an object along the y-axis.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxPositionZ\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 4000\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:43\n                        \n                    \n\n            \n                \n                    Max changeable position of an object along the z-axis.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sceneManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SceneManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/dat-gui-ui.ts:19\n                        \n                    \n\n            \n                \n                    Manager for managing functions of the three.js scene.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addCollection\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(eventDataType: string, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:254\n                \n            \n\n\n            \n                \n                    Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDataType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the event data type.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                    \n                                \n                                \n                                    collectionColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default color of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEventDataFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:200\n                \n            \n\n\n            \n                \n                    Add event data folder with functions for event data toggles like show/hide and depthTest.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:230\n                \n            \n\n\n            \n                \n                    Add folder for event data type like tracks or hits to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the type of event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addGeometry\n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometry(object: Object3D, _menuSubfolder?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:109\n                \n            \n\n\n            \n                \n                    Add geometry to the menu's geometry folder and set up its configurable options.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the UI menu.\n\n                                    \n                                \n                                \n                                    _menuSubfolder\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Subfolder in the menu to add the geometry to. Example Folder > Subfolder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addGeometryFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometryFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:78\n                \n            \n\n\n            \n                \n                    Add geometry (detector geometry) folder to the menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabel(labelId: string, onRemoveLabel?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:384\n                \n            \n\n\n            \n                \n                    Add folder for configuration of label.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique ID of the label.\n\n                                    \n                                \n                                \n                                    onRemoveLabel\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function called when label is removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLabelsFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelsFolder(configFunctions: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:332\n                \n            \n\n\n            \n                \n                    Add labels folder to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configFunctions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to attach to the labels folder configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:67\n                \n            \n\n\n            \n                \n                    Clear the menu by removing all folders.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:440\n                \n            \n\n\n            \n                \n                    Get the folder of the event data type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the event data type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     GUI\n\n                    \n                    \n                        Folder of the event data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLabel(labelId: string, labelItemFolder?: GUI)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:425\n                \n            \n\n\n            \n                \n                    Remove label from the menu and scene if it exists.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A unique label ID string.\n\n                                    \n                                \n                                \n                                    labelItemFolder\n                                    \n                                            GUI\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        removeOBJ\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeOBJ(object: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/dat-gui-ui.ts:187\n                \n            \n\n\n            \n                \n                    Remove object from the dat.GUI menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry object to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     () => void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { GUI } from 'dat.gui';\nimport {\n  BufferGeometry,\n  Color,\n  Mesh,\n  MeshPhongMaterial,\n  Object3D,\n} from 'three';\nimport { ThreeManager } from '../three-manager';\nimport { SceneManager } from '../three-manager/scene-manager';\nimport { Cut } from '../../lib/models/cut.model';\nimport { PhoenixUI } from './phoenix-ui';\n\n/**\n * A wrapper class for dat.GUI menu to perform UI related operations.\n */\nexport class DatGUIMenuUI implements PhoenixUI {\n  /** Manager for managing functions of the three.js scene. */\n  private sceneManager: SceneManager;\n  /** dat.GUI menu. */\n  private gui: GUI;\n  /** Options for the dat.GUI menu. */\n  private guiParameters = {\n    rotate: undefined,\n    axis: undefined,\n    lowRes: undefined,\n    eventData: undefined,\n    geometries: undefined,\n    labels: undefined,\n  };\n  /** dat.GUI menu folder containing geometries data. */\n  private geomFolder: GUI;\n  /** dat.GUI menu folder containing event related data. */\n  private eventFolder: GUI;\n  /** dat.GUI menu folder containing labels. */\n  private labelsFolder: GUI;\n\n  /** Max changeable position of an object along the x-axis. */\n  private maxPositionX = 4000;\n  /** Max changeable position of an object along the y-axis. */\n  private maxPositionY = 4000;\n  /** Max changeable position of an object along the z-axis. */\n  private maxPositionZ = 4000;\n\n  /**\n   * Create dat.GUI menu UI with different controls related to detector geometry and event data.\n   * @param elementId ID of the wrapper element.\n   * @param three The three manager for managing three.js related operations.\n   */\n  constructor(elementId: string = 'eventDisplay', private three: ThreeManager) {\n    this.gui = new GUI();\n    this.gui.domElement.id = 'gui';\n    this.gui.domElement.style.cssText =\n      'position: absolute; right: 0; top: 2rem; z-index: 11;';\n    const canvas = document.getElementById(elementId) ?? document.body;\n    canvas.appendChild(this.gui.domElement);\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n\n    this.sceneManager = three.getSceneManager();\n  }\n\n  /**\n   * Clear the menu by removing all folders.\n   */\n  public clear() {\n    const gui = document.getElementById('gui');\n    if (gui != null) {\n      gui.remove();\n    }\n    this.geomFolder = null;\n  }\n\n  /**\n   * Add geometry (detector geometry) folder to the menu.\n   */\n  public addGeometryFolder() {\n    if (this.geomFolder === null) {\n      this.geomFolder = this.gui.addFolder(SceneManager.GEOMETRIES_ID);\n    }\n    this.guiParameters.geometries = { show: true, wireframe: false };\n    // A boolean toggle for showing/hiding the geometries is added to the 'Geometry' folder.\n    const showGeometriesMenu = this.geomFolder\n      .add(this.guiParameters.geometries, 'show')\n      .name('Show')\n      .listen();\n    showGeometriesMenu.onChange((value) => {\n      this.sceneManager.objectVisibility(\n        this.sceneManager.getObjectByName(SceneManager.GEOMETRIES_ID),\n        value\n      );\n    });\n    // A boolean toggle for enabling/disabling the geometries' wireframing.\n    const wireframeGeometriesMenu = this.geomFolder\n      .add(this.guiParameters.geometries, 'wireframe')\n      .name('Wireframe')\n      .listen();\n    wireframeGeometriesMenu.onChange((value) => {\n      this.sceneManager.wireframeGeometries(value);\n    });\n  }\n\n  /**\n   * Add geometry to the menu's geometry folder and set up its configurable options.\n   * @param object Object to add to the UI menu.\n   * @param _menuSubfolder Subfolder in the menu to add the geometry to. Example `Folder > Subfolder`.\n   */\n  public addGeometry(object: Object3D, _menuSubfolder?: string) {\n    const { name, material, visible } = object as Mesh;\n    const color = material?.color;\n\n    // A new folder for the object is added to the 'Geometry' folder\n    this.guiParameters[name] = {\n      show: visible,\n      color: color ?? '#000000',\n      x: 0,\n      y: 0,\n      z: 0,\n      detectorOpacity: 1.0,\n      remove: this.removeOBJ(object),\n      scale: 1,\n    };\n\n    const objFolder = this.geomFolder.addFolder(name);\n    // A color picker is added to the object's folder\n    const colorMenu = objFolder\n      .addColor(this.guiParameters[name], 'color')\n      .name('Color');\n    colorMenu.onChange((value) =>\n      this.sceneManager.changeObjectColor(object, value)\n    );\n\n    const opacity = objFolder\n      .add(this.guiParameters[name], 'detectorOpacity', 0.0, 1.0)\n      .name('Opacity');\n    opacity.onFinishChange((newValue) =>\n      this.sceneManager.setGeometryOpacity(object, newValue)\n    );\n\n    // A boolean toggle for showing/hiding the object is added to its folder\n    const showMenu = objFolder\n      .add(this.guiParameters[name], 'show')\n      .name('Show')\n      .listen();\n    showMenu.onChange((value) =>\n      this.sceneManager.objectVisibility(object, value)\n    );\n    // Scale slider\n    const scaleMenu = objFolder\n      .add(this.guiParameters[name], 'scale', 0, 1000)\n      .name('Scale');\n    scaleMenu.onChange((value) => {\n      this.sceneManager.scaleObject(object, value);\n    });\n    // Controls for positioning.\n    // const position = this.three.getObjectPosition(name);\n    objFolder\n      .add(this.guiParameters[name], 'x', -this.maxPositionX, this.maxPositionX)\n      .name('X')\n      .onChange((value) =>\n        this.sceneManager.getObjectPosition(name).setX(value)\n      );\n    objFolder\n      .add(this.guiParameters[name], 'y', -this.maxPositionY, this.maxPositionY)\n      .name('Y')\n      .onChange((value) =>\n        this.sceneManager.getObjectPosition(name).setY(value)\n      );\n    objFolder\n      .add(this.guiParameters[name], 'z', -this.maxPositionZ, this.maxPositionZ)\n      .name('Z')\n      .onChange((value) =>\n        this.sceneManager.getObjectPosition(name).setZ(value)\n      );\n    // Controls for deleting the obj\n    objFolder.add(this.guiParameters[name], 'remove').name('Remove');\n  }\n\n  /**\n   * Remove object from the dat.GUI menu.\n   * @param object Geometry object to be removed.\n   */\n  private removeOBJ(object: Object3D) {\n    return () => {\n      const folder = this.geomFolder.__folders[object.name];\n      if (folder) {\n        this.geomFolder.removeFolder(folder);\n      }\n      this.sceneManager.removeGeometry(object);\n    };\n  }\n\n  /**\n   * Add event data folder with functions for event data toggles like show/hide and depthTest.\n   */\n  public addEventDataFolder() {\n    // If there is already an event data folder it is deleted and we create a new one.\n    if (this.eventFolder !== null) {\n      this.gui.removeFolder(this.eventFolder);\n    }\n\n    // A new folder for the Event Data is added to the GUI.\n    this.eventFolder = this.gui.addFolder('Event Data');\n    this.guiParameters.eventData = { show: true, depthTest: true };\n    // A boolean toggle for showing/hiding the event data is added to the 'Event Data' folder.\n    const menu = this.eventFolder\n      .add(this.guiParameters.eventData, 'show')\n      .name('Show')\n      .listen();\n    menu.onChange((value) =>\n      this.sceneManager.groupVisibility(SceneManager.EVENT_DATA_ID, value)\n    );\n\n    // A boolean toggle for enabling/disabling depthTest of event data.\n    const depthTestMenu = this.eventFolder\n      .add(this.guiParameters.eventData, 'depthTest')\n      .name('Depth Test')\n      .listen();\n    depthTestMenu.onChange((value) => this.three.eventDataDepthTest(value));\n  }\n\n  /**\n   * Add folder for event data type like tracks or hits to the menu.\n   * @param typeName Name of the type of event data.\n   */\n  public addEventDataTypeFolder(typeName: string): void {\n    const typeFolder = this.eventFolder.addFolder(typeName);\n    this.guiParameters.eventData[typeName] = true;\n    const menu = typeFolder\n      .add(this.guiParameters.eventData, typeName)\n      .name('Show')\n      .listen();\n    menu.onChange((value) =>\n      this.sceneManager.objectVisibility(\n        this.sceneManager\n          .getObjectByName(SceneManager.EVENT_DATA_ID)\n          .getObjectByName(typeName),\n        value\n      )\n    );\n  }\n\n  /**\n   * Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n   * @param eventDataType Name of the event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Default color of the collection.\n   */\n  public addCollection(\n    eventDataType: string,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color\n  ) {\n    const typeFolder = this.eventFolder.__folders[eventDataType];\n    if (!typeFolder) {\n      return;\n    }\n\n    // A new folder for the collection is added to the 'Event Data' folder\n    this.guiParameters[collectionName] = {\n      show: true,\n      color: 0x000000,\n      randomColor: () =>\n        this.three.getColorManager().collectionColorRandom(collectionName),\n      resetCut: () =>\n        this.sceneManager.groupVisibility(\n          collectionName,\n          true,\n          SceneManager.EVENT_DATA_ID\n        ),\n    };\n    const collFolder = typeFolder.addFolder(collectionName);\n\n    // A boolean toggle for showing/hiding the collection is added to its folder\n    const showMenu = collFolder\n      .add(this.guiParameters[collectionName], 'show')\n      .name('Show')\n      .listen();\n    showMenu.onChange((value) => {\n      const collectionObject = this.sceneManager\n        .getObjectByName(SceneManager.EVENT_DATA_ID)\n        .getObjectByName(collectionName);\n      this.sceneManager.objectVisibility(collectionObject, value);\n    });\n\n    // A color picker is added to the collection's folder\n    const colorMenu = collFolder\n      .addColor(this.guiParameters[collectionName], 'color')\n      .name('Color');\n    colorMenu.onChange((value) =>\n      this.three.getColorManager().collectionColor(collectionName, value)\n    );\n    colorMenu.setValue(collectionColor?.getHex());\n    collFolder\n      .add(this.guiParameters[collectionName], 'randomColor')\n      .name('Random Color');\n\n    // Cuts menu\n    if (cuts) {\n      const cutsFolder = collFolder.addFolder('Cuts');\n      cutsFolder\n        .add(this.guiParameters[collectionName], 'resetCut')\n        .name('Reset cuts');\n\n      for (const cut of cuts) {\n        const minCut = cutsFolder\n          .add(cut, 'minValue', cut.minValue, cut.maxValue)\n          .name('min ' + cut.field);\n        minCut.onChange((value) => {\n          this.sceneManager.collectionFilter(collectionName, cuts);\n        });\n        const maxCut = cutsFolder\n          .add(cut, 'maxValue', cut.minValue, cut.maxValue)\n          .name('max ' + cut.field);\n        maxCut.onChange((value) => {\n          this.sceneManager.collectionFilter(collectionName, cuts);\n        });\n      }\n    }\n  }\n\n  /**\n   * Add labels folder to the menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  public addLabelsFolder(configFunctions: any) {\n    if (this.labelsFolder !== null) {\n      return;\n    }\n\n    const {\n      onToggle,\n      onSizeChange,\n      onColorChange,\n      onSaveLabels,\n      onLoadLabels,\n    } = configFunctions;\n\n    this.labelsFolder = this.gui.addFolder(SceneManager.LABELS_ID);\n\n    this.guiParameters.labels = {\n      show: true,\n      size: 1,\n      color: '#a8a8a8',\n      saveLabels: onSaveLabels,\n      loadLabels: onLoadLabels,\n    };\n\n    const showMenu = this.labelsFolder\n      .add(this.guiParameters.labels, 'show')\n      .name('Show')\n      .listen();\n    showMenu.onChange(onToggle);\n\n    const labelsSizeMenu = this.labelsFolder\n      .add(this.guiParameters.labels, 'size', 0, 10)\n      .name('Size');\n    labelsSizeMenu.onFinishChange(onSizeChange);\n\n    const colorMenu = this.labelsFolder\n      .addColor(this.guiParameters.labels, 'color')\n      .name('Color');\n    colorMenu.onChange(onColorChange);\n\n    this.labelsFolder\n      .add(this.guiParameters.labels, 'saveLabels')\n      .name('Save Labels');\n    this.labelsFolder\n      .add(this.guiParameters.labels, 'loadLabels')\n      .name('Load Labels');\n  }\n\n  /**\n   * Add folder for configuration of label.\n   * @param labelId Unique ID of the label.\n   * @param onRemoveLabel Function called when label is removed.\n   */\n  public addLabel(labelId: string, onRemoveLabel?: () => void) {\n    this.guiParameters[labelId] = {\n      show: true,\n      color: 0xafafaf,\n    };\n\n    const labelItem = this.labelsFolder.addFolder(labelId);\n\n    const visibilityToggle = labelItem\n      .add(this.guiParameters[labelId], 'show')\n      .name('Show')\n      .listen();\n    visibilityToggle.onChange((value) => {\n      const labelObject = this.sceneManager\n        .getObjectByName(SceneManager.LABELS_ID)\n        .getObjectByName(labelId);\n      this.sceneManager.objectVisibility(labelObject, value);\n    });\n\n    const colorMenu = labelItem\n      .addColor(this.guiParameters[labelId], 'color')\n      .name('Çolor');\n    colorMenu.onChange((color) =>\n      this.sceneManager.changeObjectColor(\n        this.sceneManager.getObjectByName(labelId),\n        color\n      )\n    );\n\n    this.guiParameters[labelId]['removeLabel'] = () => {\n      onRemoveLabel?.();\n      this.removeLabel(labelId, labelItem);\n    };\n    labelItem.add(this.guiParameters[labelId], 'removeLabel').name('Remove');\n  }\n\n  /**\n   * Remove label from the menu and scene if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelFolderReference Reference to the label folder.\n   */\n  public removeLabel(labelId: string, labelItemFolder?: GUI) {\n    if (!labelItemFolder) {\n      labelItemFolder = this.labelsFolder.__folders[labelId];\n    }\n\n    if (labelItemFolder) {\n      this.labelsFolder.removeFolder(labelItemFolder);\n    }\n  }\n\n  /**\n   * Get the folder of the event data type.\n   * @param typeName Name of the event data type.\n   * @returns Folder of the event data type.\n   */\n  public getEventDataTypeFolder(typeName: string): GUI {\n    return this.eventFolder.__folders[typeName];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EffectsManager.html":{"url":"classes/EffectsManager.html","title":"class - EffectsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EffectsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/effects-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                antialiasing\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Public\n                                composer\n                            \n                            \n                                    Private\n                                defaultRenderPass\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOutlinePassForSelection\n                            \n                            \n                                    Private\n                                antialiasRender\n                            \n                            \n                                    Private\n                                effectsRender\n                            \n                            \n                                    Public\n                                removePass\n                            \n                            \n                                    Public\n                                setAntialiasing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the effects manager which manages effects and three.js passes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The camera inside the scene.\n\n                                                        \n                                                \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The default scene used for event display.\n\n                                                        \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    WebGLRenderer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The main renderer used by the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        antialiasing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:20\n                        \n                    \n\n            \n                \n                    Whether antialiasing is enabled or disabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        camera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:14\n                        \n                    \n\n            \n                \n                    The camera inside the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        composer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EffectComposer\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:12\n                        \n                    \n\n            \n                \n                    Effect composer for effect passes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultRenderPass\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RenderPass\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:18\n                        \n                    \n\n            \n                \n                    Render pass for rendering the default scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        render\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:23\n                        \n                    \n\n            \n                \n                    Render function with (normal render) or without antialias (effects render).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scene\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Scene\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:16\n                        \n                    \n\n            \n                \n                    The default scene used for event display.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addOutlinePassForSelection\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOutlinePassForSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:69\n                \n            \n\n\n            \n                \n                    Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                    \n                    \n                    \n                        Returns :     OutlinePass\n\n                    \n                    \n                        OutlinePass for highlighting hovered over event display elements.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        antialiasRender\n                        \n                    \n                \n            \n            \n                \n                    \n                    antialiasRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:61\n                \n            \n\n\n            \n                \n                    Render for antialias without the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        effectsRender\n                        \n                    \n                \n            \n            \n                \n                    \n                    effectsRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:48\n                \n            \n\n\n            \n                \n                    Render the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removePass\n                        \n                    \n                \n            \n            \n                \n                    \n                    removePass(pass: Pass)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:88\n                \n            \n\n\n            \n                \n                    Remove a pass from the effect composer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pass\n                                    \n                                            Pass\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Effect pass to be removed from the effect composer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setAntialiasing\n                        \n                    \n                \n            \n            \n                \n                    \n                    setAntialiasing(antialias: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/effects-manager.ts:97\n                \n            \n\n\n            \n                \n                    Set the antialiasing of renderer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    antialias\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether antialiasing is to enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { Camera, Scene, WebGLRenderer, Vector2, NormalBlending } from 'three';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass';\n\n/**\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\n */\nexport class EffectsManager {\n  /** Effect composer for effect passes. */\n  public composer: EffectComposer;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The default scene used for event display. */\n  private scene: Scene;\n  /** Render pass for rendering the default scene. */\n  private defaultRenderPass: RenderPass;\n  /** Whether antialiasing is enabled or disabled. */\n  public antialiasing: boolean = true;\n\n  /** Render function with (normal render) or without antialias (effects render). */\n  public render: (scene: Scene, camera: Camera) => void;\n\n  /**\n   * Constructor for the effects manager which manages effects and three.js passes.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   * @param renderer The main renderer used by the event display.\n   */\n  constructor(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n    this.composer = new EffectComposer(renderer);\n    this.camera = camera;\n    this.scene = scene;\n\n    this.defaultRenderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.defaultRenderPass);\n\n    // Set the starting render function\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n\n  /**\n   * Render the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private effectsRender(scene: Scene, camera: Camera) {\n    if (this.composer) {\n      this.defaultRenderPass.camera = camera;\n      this.defaultRenderPass.scene = scene;\n      this.composer.render();\n    }\n  }\n\n  /**\n   * Render for antialias without the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private antialiasRender(scene: Scene, camera: Camera) {\n    this.composer.renderer.render(scene, camera);\n  }\n\n  /**\n   * Initialize the outline pass for highlighting hovered over event display elements.\n   * @returns OutlinePass for highlighting hovered over event display elements.\n   */\n  public addOutlinePassForSelection(): OutlinePass {\n    const outlinePass = new OutlinePass(\n      new Vector2(window.innerWidth, window.innerHeight),\n      this.scene,\n      this.camera\n    );\n    outlinePass.overlayMaterial.blending = NormalBlending;\n    outlinePass.visibleEdgeColor.set(0xffff66);\n    outlinePass.visibleEdgeColor.set(0xdf5330);\n\n    this.composer.addPass(outlinePass);\n\n    return outlinePass;\n  }\n\n  /**\n   * Remove a pass from the effect composer.\n   * @param pass Effect pass to be removed from the effect composer.\n   */\n  public removePass(pass: Pass) {\n    const passIndex = this.composer.passes.indexOf(pass);\n    this.composer.passes.splice(passIndex, 1);\n  }\n\n  /**\n   * Set the antialiasing of renderer.\n   * @param antialias Whether antialiasing is to enabled or disabled.\n   */\n  public setAntialiasing(antialias: boolean) {\n    this.antialiasing = antialias;\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/event-data-loader.ts\n        \n\n\n            \n                Description\n            \n            \n                Event data loader for implementing different event data loaders.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addLabelToEventObject\n                                    \n                                \n                                \n                                    \n                                        buildEventData\n                                    \n                                \n                                \n                                    \n                                        getCollection\n                                    \n                                \n                                \n                                    \n                                        getCollections\n                                    \n                                \n                                \n                                    \n                                        getEventMetadata\n                                    \n                                \n                                \n                                    \n                                        getEventsList\n                                    \n                                \n                                \n                                    \n                                        getLabelsObject\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addLabelToEventObject\n                        \n                    \n                \n            \n            \n                \naddLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:57\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to add to the event object.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEventData\n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:17\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Logger for logging event display data..\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCollection\n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:42\n                \n            \n\n\n            \n                \n                    Get all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the collection that will be retrieved.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Object containing all physics objects from the desired collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCollections\n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:35\n                \n            \n\n\n            \n                \n                    Get the different collections for the current stored event.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of strings, each representing a collection of the event displayed.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventMetadata\n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:48\n                \n            \n\n\n            \n                \n                    Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the displayed event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventsList\n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:29\n                \n            \n\n\n            \n                \n                    Takes an object containing multiple events and returns the keys of these events.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that contains the different events.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of keys of the different events.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLabelsObject\n                        \n                    \n                \n            \n            \n                \ngetLabelsObject()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/event-data-loader.ts:67\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeManager } from '../managers/three-manager';\nimport { UIManager } from '../managers/ui-manager';\nimport { InfoLogger } from '../helpers/info-logger';\n\n/**\n * Event data loader for implementing different event data loaders.\n */\nexport interface EventDataLoader {\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Manager containing functionality to draw the 3D objects.\n   * @param ui Manager for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Logger for logging event display data..\n   */\n  buildEventData(\n    eventData: any,\n    graphicsLibrary: ThreeManager,\n    ui: UIManager,\n    infoLogger: InfoLogger\n  ): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n  /**\n   * Add label of event object to the labels object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @returns A unique label ID string.\n   */\n  addLabelToEventObject(\n    label: string,\n    collection: string,\n    indexInCollection: number\n  ): string;\n\n  /**\n   * Get the object containing labels.\n   * @returns The labels object.\n   */\n  getLabelsObject(): { [key: string]: any };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/export-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        exportPhoenixScene\n                        \n                    \n                \n            \n            \n                \n                    \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:27\n                \n            \n\n\n            \n                \n                    Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        exportSceneToOBJ\n                        \n                    \n                \n            \n            \n                \n                    \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:14\n                \n            \n\n\n            \n                \n                    Exports scene to OBJ file format.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        saveEventDataConfiguration\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:66\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded event data.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        saveGeometriesConfiguration\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:85\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded geometries.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        saveSceneConfig\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/export-manager.ts:52\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Curently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { eventData: {}; geometries: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\nimport { saveFile } from '../../helpers/file';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n  /**\n   * Exports scene to OBJ file format.\n   * @param scene The scene to be exported.\n   */\n  public exportSceneToOBJ(scene: Scene) {\n    // Instantiate a exporter\n    const exporter = new OBJExporter();\n    const result = exporter.parse(scene);\n    saveFile(result, 'phoenix-obj.obj', 'text/plain');\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   * @param scene The scene to be exported.\n   * @param eventData Currently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  public exportPhoenixScene(\n    scene: Scene,\n    eventData: Object3D,\n    geometries: Object3D\n  ) {\n    const exporter = new GLTFExporter();\n\n    const sceneConfig = this.saveSceneConfig(eventData, geometries);\n    // Parse the input and generate the glTF output\n    exporter.parse(\n      scene,\n      (result) => {\n        const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n        const output = JSON.stringify(jsonResult, null, 2);\n        saveFile(output, 'phoenix-scene.phnx', 'text/plain');\n      },\n      null\n    );\n  }\n\n  /**\n   * Save the configuration of the currently loaded scene including event data and geometries.\n   * @param eventData Curently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n    const eventDataConfig = this.saveEventDataConfiguration(eventData);\n    const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n    const sceneConfig = {\n      eventData: eventDataConfig,\n      geometries: geometriesConfig,\n    };\n    return sceneConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded event data.\n   * @param eventData Currently loaded event data.\n   */\n  private saveEventDataConfiguration(eventData: any) {\n    const eventDataConfig = {};\n    for (const objectType of eventData.children) {\n      if (objectType.name) {\n        eventDataConfig[objectType.name] = [];\n        for (const collection of objectType.children) {\n          if (collection.name) {\n            eventDataConfig[objectType.name].push(collection.name);\n          }\n        }\n      }\n    }\n    return eventDataConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded geometries.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveGeometriesConfiguration(geometries: Object3D) {\n    const geometriesConfig = [];\n    geometries.children.forEach((object) => {\n      if (object.name !== 'EventData') {\n        geometriesConfig.push(object.name);\n      }\n    });\n    return geometriesConfig;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                 Default class to define the field.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(field: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:192\n                \n            \n\n\n            \n                \n                    Returns field as a Vector3 in Tesla.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoLogger.html":{"url":"classes/InfoLogger.html","title":"class - InfoLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/info-logger.ts\n        \n\n\n            \n                Description\n            \n            \n                Logger for logging event display data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        infoLoggerList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/helpers/info-logger.ts:6\n                        \n                    \n\n            \n                \n                    List that contains all the info logs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxEntries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/helpers/info-logger.ts:8\n                        \n                    \n\n            \n                \n                    Max entries to be shown inside the information panel\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/info-logger.ts:15\n                \n            \n\n\n            \n                \n                    Add an entry to the info logger\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data of the info log\n\n                                    \n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Label of the info log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInfoLoggerList\n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/info-logger.ts:26\n                \n            \n\n\n            \n                \n                    Get the info logger list being used by the info logger service\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        The info logger list containing log data\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class InfoLogger {\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? label + ': ' + data : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingManager.html":{"url":"classes/LoadingManager.html","title":"class - LoadingManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/loading-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Phoenix loading manager for managing loadable items.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                    Public\n                                loaded\n                            \n                            \n                                    Private\n                                onLoadCallbacks\n                            \n                            \n                                    Private\n                                onProgressCallbacks\n                            \n                            \n                                    Private\n                                progressItems\n                            \n                            \n                                    Public\n                                toLoad\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadableItem\n                            \n                            \n                                    Public\n                                addLoadListener\n                            \n                            \n                                    Public\n                                addLoadListenerWithCheck\n                            \n                            \n                                    Public\n                                addProgressListener\n                            \n                            \n                                    Public\n                                itemLoaded\n                            \n                            \n                                    Public\n                                onProgress\n                            \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                            Create the singleton Phoenix loading manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoadingManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:6\n                        \n                    \n\n            \n                \n                    Instance of the loading manager\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loaded\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:11\n                        \n                    \n\n            \n                \n                    Items loaded\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onLoadCallbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (function)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:14\n                        \n                    \n\n            \n                \n                    Callbacks to call on load.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onProgressCallbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (function)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:16\n                        \n                    \n\n            \n                \n                    Callbacks to call on progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        progressItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:19\n                        \n                    \n\n            \n                \n                    Progress for each named item.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toLoad\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:9\n                        \n                    \n\n            \n                \n                    Items to load.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLoadableItem\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadableItem(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:37\n                \n            \n\n\n            \n                \n                    Add an item which is to be loaded.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item to be loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLoadListener\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListener(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:84\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLoadListenerWithCheck\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListenerWithCheck(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:93\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded with check if there\nare any items to load when the listener is added.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addProgressListener\n                        \n                    \n                \n            \n            \n                \n                    \n                    addProgressListener(callback: (progress: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:105\n                \n            \n\n\n            \n                \n                    Add a callback to listen when the progress of an item increases.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when the progress of a loading item increases.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        itemLoaded\n                        \n                    \n                \n            \n            \n                \n                    \n                    itemLoaded(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:46\n                \n            \n\n\n            \n                \n                    Function to call when an item has finished loading.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onProgress\n                        \n                    \n                \n            \n            \n                \n                    \n                    onProgress(id: string, progress: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:64\n                \n            \n\n\n            \n                \n                    Function to call when loading of an item progresses.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the item with the progress.\n\n                                    \n                                \n                                \n                                    progress\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Progress of the item.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        reset\n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:112\n                \n            \n\n\n            \n                \n                    Reset the loading manager and its items.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class LoadingManager {\n  /** Instance of the loading manager */\n  private static instance: LoadingManager;\n\n  /** Items to load. */\n  public toLoad: string[] = [];\n  /** Items loaded */\n  public loaded: string[] = [];\n\n  /** Callbacks to call on load. */\n  private onLoadCallbacks: (() => void)[] = [];\n  /** Callbacks to call on progress. */\n  private onProgressCallbacks: ((progress: number) => void)[] = [];\n\n  /** Progress for each named item. */\n  private progressItems: { [key: string]: number } = {};\n\n  /**\n   * Create the singleton Phoenix loading manager.\n   * @returns The loading manager instance.\n   */\n  constructor() {\n    if (LoadingManager.instance === undefined) {\n      LoadingManager.instance = this;\n    }\n\n    return LoadingManager.instance;\n  }\n\n  /**\n   * Add an item which is to be loaded.\n   * @param id ID of the item to be loaded.\n   */\n  public addLoadableItem(id: string = '') {\n    this.toLoad.push(id);\n    this.progressItems[id] = 0;\n  }\n\n  /**\n   * Function to call when an item has finished loading.\n   * @param id ID of the item loaded.\n   */\n  public itemLoaded(id: string = '') {\n    this.loaded.push(id);\n    this.onProgress(id, 100);\n\n    if (\n      this.toLoad.length === this.loaded.length &&\n      this.toLoad.sort().join(',') === this.loaded.sort().join(',')\n    ) {\n      this.onLoadCallbacks.forEach((callback) => callback());\n      this.reset();\n    }\n  }\n\n  /**\n   * Function to call when loading of an item progresses.\n   * @param id ID of the item with the progress.\n   * @param progress Progress of the item.\n   */\n  public onProgress(id: string, progress: number) {\n    this.progressItems[id] = progress;\n\n    const totalProgress = Object.values(this.progressItems).reduce(\n      (acc, val) => acc + val,\n      0\n    );\n    const totalItems = Object.keys(this.progressItems).length;\n\n    const averageProgress = totalProgress / totalItems;\n\n    for (const callback of this.onProgressCallbacks) {\n      callback(averageProgress);\n    }\n  }\n\n  /**\n   * Add a listener for when all items have loaded.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListener(callback: () => void) {\n    this.onLoadCallbacks.push(callback);\n  }\n\n  /**\n   * Add a listener for when all items have loaded with check if there\n   * are any items to load when the listener is added.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListenerWithCheck(callback: () => void) {\n    if (this.toLoad.length > 0 && this.toLoad.length !== this.loaded.length) {\n      this.onLoadCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Add a callback to listen when the progress of an item increases.\n   * @param callback Callback to call when the progress of a loading item increases.\n   */\n  public addProgressListener(callback: (progress: number) => void) {\n    this.onProgressCallbacks.push(callback);\n  }\n\n  /**\n   * Reset the loading manager and its items.\n   */\n  public reset() {\n    this.toLoad = [];\n    this.loaded = [];\n    this.onLoadCallbacks = [];\n    this.onProgressCallbacks = [];\n    this.progressItems = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuNode.html":{"url":"classes/PhoenixMenuNode.html","title":"class - PhoenixMenuNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n        \n\n\n            \n                Description\n            \n            \n                A single node of phoenix menu item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                childrenActive\n                            \n                            \n                                    Private\n                                childrenToggleState\n                            \n                            \n                                configActive\n                            \n                            \n                                configs\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                nodeLevel\n                            \n                            \n                                onToggle\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                toggleState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                addConfig\n                            \n                            \n                                applyConfigState\n                            \n                            \n                                findInTree\n                            \n                            \n                                findInTreeOrCreate\n                            \n                            \n                                getNodeState\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                remove\n                            \n                            \n                                removeChild\n                            \n                            \n                                toggleSelfAndDescendants\n                            \n                            \n                                truncate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, icon?: string, onToggle?: (value?: boolean) => void, children?: PhoenixMenuNode[], configs?: [], parent?: PhoenixMenuNode)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:32\n                            \n                        \n\n                \n                    \n                            Create the phoenix menu node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the node.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Icon of the node.\n\n                                                        \n                                                \n                                                \n                                                        onToggle\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function on toggling the node.\n\n                                                        \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                        PhoenixMenuNode[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Children of the node.\n\n                                                        \n                                                \n                                                \n                                                        configs\n                                                  \n                                                        \n                                                                    []\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Configuration options in the node.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Parent of the node.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:16\n                        \n                    \n\n            \n                \n                    Children of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        childrenActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:30\n                        \n                    \n\n            \n                \n                    If the node children are active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        childrenToggleState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:27\n                        \n                    \n\n            \n                \n                    Previous toggle state of child nodes. This is so that the\nprevious state of child can be restored if we toggle the parent back on.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:32\n                        \n                    \n\n            \n                \n                    If the node configuration options are active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:18\n                        \n                    \n\n            \n                \n                    Configuration options in the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:10\n                        \n                    \n\n            \n                \n                    Icon of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:8\n                        \n                    \n\n            \n                \n                    Name of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeLevel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:20\n                        \n                    \n\n            \n                \n                    Level of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onToggle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:12\n                        \n                    \n\n            \n                \n                    Function on toggling the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:22\n                        \n                    \n\n            \n                \n                    Parent of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:14\n                        \n                    \n\n            \n                \n                    If the node toggle state is true or false.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addChild\n                        \n                    \n                \n            \n            \n                \naddChild(name: string, onToggle?: (value?: boolean) => void, icon?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:66\n                \n            \n\n\n            \n                \n                    Add a child to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the child.\n\n                                    \n                                \n                                \n                                    onToggle\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function on toggling the child.\n\n                                    \n                                \n                                \n                                    icon\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Icon of the child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The child node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addConfig\n                        \n                    \n                \n            \n            \n                \naddConfig(type: T, options: Omit)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:115\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Add a config to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type of configuration.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                            Omit\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options for the config.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        applyConfigState\n                        \n                    \n                \n            \n            \n                \napplyConfigState(config: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:149\n                \n            \n\n\n            \n                \n                    Apply the current values of config by calling the change function.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Config whose values are to be applied.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findInTree\n                        \n                    \n                \n            \n            \n                \nfindInTree(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:242\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findInTreeOrCreate\n                        \n                    \n                \n            \n            \n                \nfindInTreeOrCreate(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:260\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name or create one.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find or create.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found or created node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeState\n                        \n                    \n                \n            \n            \n                \ngetNodeState()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:175\n                \n            \n\n\n            \n                \n                    Get current state of the node as an object.\n\n\n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        State of the node as an object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadStateFromJSON\n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:196\n                \n            \n\n\n            \n                \n                    Load the state of the phoenix menu node from JSON.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON containing the phoenix menu node state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:92\n                \n            \n\n\n            \n                \n                    Remove the current node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeChild\n                        \n                    \n                \n            \n            \n                \nremoveChild(child: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:83\n                \n            \n\n\n            \n                \n                    Remove a child node.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The child node to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleSelfAndDescendants\n                        \n                    \n                \n            \n            \n                \ntoggleSelfAndDescendants(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:129\n                \n            \n\n\n            \n                \n                    Function for toggling the current and all child nodes.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the node itself and descendants are to be made true or false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        truncate\n                        \n                    \n                \n            \n            \n                \ntruncate()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:105\n                \n            \n\n\n            \n                \n                    Remove all children.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixMenuConfigs } from './config-types';\n\n/**\n * A single node of phoenix menu item.\n */\nexport class PhoenixMenuNode {\n  /** Name of the node. */\n  name: string;\n  /** Icon of the node. */\n  icon: string;\n  /** Function on toggling the node. */\n  onToggle: (value: boolean) => void;\n  /** If the node toggle state is true or false. */\n  toggleState: boolean = true;\n  /** Children of the node. */\n  children: PhoenixMenuNode[] = [];\n  /** Configuration options in the node. */\n  configs: PhoenixMenuConfigs[keyof PhoenixMenuConfigs][] = [];\n  /** Level of the node. */\n  nodeLevel: number = 0;\n  /** Parent of the node. */\n  private parent: PhoenixMenuNode;\n  /**\n   * Previous toggle state of child nodes. This is so that the\n   * previous state of child can be restored if we toggle the parent back on.\n   */\n  private childrenToggleState = {};\n\n  /** If the node children are active or not. */\n  childrenActive: boolean = false;\n  /** If the node configuration options are active or not. */\n  configActive: boolean = false;\n\n  /**\n   * Create the phoenix menu node.\n   * @param name Name of the node.\n   * @param icon Icon of the node.\n   * @param onToggle Function on toggling the node.\n   * @param children Children of the node.\n   * @param configs Configuration options in the node.\n   * @param parent Parent of the node.\n   */\n  constructor(\n    name: string,\n    icon?: string,\n    onToggle?: (value: boolean) => void,\n    children?: PhoenixMenuNode[],\n    configs?: PhoenixMenuConfigs[keyof PhoenixMenuConfigs][],\n    parent?: PhoenixMenuNode\n  ) {\n    this.name = name;\n    this.icon = icon;\n    this.onToggle = onToggle;\n    if (children) this.children = children;\n    if (configs) this.configs = configs;\n    if (parent) this.parent = parent;\n  }\n\n  /**\n   * Add a child to the phoenix menu item.\n   * @param name Name of the child.\n   * @param onToggle Function on toggling the child.\n   * @param icon Icon of the child.\n   * @returns The child node.\n   */\n  addChild(\n    name: string,\n    onToggle?: (value: boolean) => void,\n    icon?: string\n  ): PhoenixMenuNode {\n    const child = new PhoenixMenuNode(name, icon, onToggle);\n    child.parent = this;\n    child.nodeLevel = this.nodeLevel + 1;\n    this.children.push(child);\n    return child;\n  }\n\n  /**\n   * Remove a child node.\n   * @param child The child node to be removed.\n   * @returns The current node.\n   */\n  removeChild(child: PhoenixMenuNode): PhoenixMenuNode {\n    const childIndex = this.children.indexOf(child);\n    this.children.splice(childIndex, 1);\n    return this;\n  }\n\n  /**\n   * Remove the current node.\n   */\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    } else {\n      console.error(\n        'Cannot delete root node of phoenix menu. Set it to undefined/null instead.'\n      );\n    }\n  }\n\n  /**\n   * Remove all children.\n   */\n  truncate() {\n    this.children = [];\n  }\n\n  /**\n   * Add a config to the phoenix menu item.\n   * @param type Type of configuration.\n   * @param options Options for the config.\n   * @returns The current node.\n   */\n  addConfig(\n    type: T,\n    options: Omit\n  ): PhoenixMenuNode {\n    const configsLength = this.configs.push({ type, ...options });\n    // Apply the values of config\n    this.applyConfigState(this.configs[configsLength - 1]);\n    return this;\n  }\n\n  /**\n   * Function for toggling the current and all child nodes.\n   * @param value If the node itself and descendants are to be made true or false.\n   */\n  toggleSelfAndDescendants(value: boolean) {\n    this.onToggle?.(value);\n    this.toggleState = value;\n    for (const child of this.children) {\n      if (!value) {\n        // Save previous toggle state of children and toggle them false\n        this.childrenToggleState[child.name] = child.toggleState;\n        child.toggleSelfAndDescendants(value);\n      } else {\n        // Restore previous toggle state of children\n        child.toggleState = this.childrenToggleState[child.name];\n        child.toggleSelfAndDescendants(child.toggleState);\n      }\n    }\n  }\n\n  /**\n   * Apply the current values of config by calling the change function.\n   * @param config Config whose values are to be applied.\n   */\n  applyConfigState(config: any) {\n    // Apply configs of different config types - manual\n    if (config.type === 'checkbox' && config?.['isChecked']) {\n      config.onChange?.(config?.['isChecked']);\n    } else if (config.type === 'color' && config?.['color'] && !config.group) {\n      // Ignore color by options with `!config.group`, otherwise the collection color is overridden\n      config.onChange?.(config?.['color']);\n    } else if (config.type === 'slider' && config?.['value']) {\n      config.onChange?.(config?.['value']);\n    } else if (\n      config.type === 'rangeSlider' &&\n      config?.['value'] !== undefined\n    ) {\n      config.onChange?.({\n        value: config?.['value'],\n        highValue: config?.['highValue'],\n      });\n      config.setEnableMin?.(config?.['enableMin']);\n      config.setEnableMax?.(config?.['enableMax']);\n    }\n  }\n\n  /**\n   * Get current state of the node as an object.\n   * @returns State of the node as an object.\n   */\n  getNodeState(): { [key: string]: any } {\n    const phoenixNodeJSON: { [key: string]: any } = {};\n\n    phoenixNodeJSON['name'] = this.name;\n    phoenixNodeJSON['nodeLevel'] = this.nodeLevel;\n    phoenixNodeJSON['toggleState'] = this.toggleState;\n    phoenixNodeJSON['childrenActive'] = this.childrenActive;\n    phoenixNodeJSON['configs'] = this.configs;\n    phoenixNodeJSON['children'] = [];\n\n    for (const child of this.children) {\n      phoenixNodeJSON['children'].push(child.getNodeState());\n    }\n\n    return phoenixNodeJSON;\n  }\n\n  /**\n   * Load the state of the phoenix menu node from JSON.\n   * @param json JSON containing the phoenix menu node state.\n   */\n  loadStateFromJSON(json: string | { [key: string]: any }) {\n    let jsonObject: any;\n    if (typeof json === 'string') {\n      jsonObject = JSON.parse(json);\n    } else {\n      jsonObject = json;\n    }\n\n    this.childrenActive = jsonObject['childrenActive'];\n    this.toggleState = jsonObject['toggleState'];\n    this.toggleState !== undefined && this.onToggle?.(this.toggleState);\n\n    for (const configState of jsonObject['configs']) {\n      const nodeConfig = this.configs.find(\n        (nodeConfig) =>\n          nodeConfig.type === configState['type'] &&\n          nodeConfig.label === configState['label']\n      );\n\n      if (nodeConfig) {\n        for (const prop in configState) {\n          nodeConfig[prop] = configState[prop];\n        }\n\n        this.applyConfigState(nodeConfig);\n      }\n    }\n\n    for (const childState of jsonObject['children']) {\n      const nodeChild = this.children.filter(\n        (nodeChild) =>\n          nodeChild.name === childState.name &&\n          nodeChild.nodeLevel === childState.nodeLevel\n      )[0];\n\n      if (nodeChild) {\n        nodeChild.loadStateFromJSON(childState);\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name.\n   * @param name Name of the node to find.\n   * @returns The found node.\n   */\n  findInTree(name: string): PhoenixMenuNode {\n    if (this.name === name) {\n      return this;\n    } else {\n      for (const child of this.children) {\n        const nodeFound = child.findInTree(name);\n        if (nodeFound) {\n          return nodeFound;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name or create one.\n   * @param name Name of the node to find or create.\n   * @returns The found or created node.\n   */\n  findInTreeOrCreate(name: string): PhoenixMenuNode {\n    let prevNode: PhoenixMenuNode = this;\n    name.split('>').forEach((nodeName) => {\n      nodeName = nodeName.trim();\n      const nodeFound = prevNode.findInTree(nodeName);\n      // const nodeFound = prevNode.children.find(child => child.name === nodeName);\n\n      prevNode = nodeFound ? nodeFound : prevNode.addChild(nodeName, () => {});\n    });\n    return prevNode;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuUI.html":{"url":"classes/PhoenixMenuUI.html","title":"class - PhoenixMenuUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapper class for Phoenix menu to perform UI related operations.\n\n            \n\n\n            \n                Implements\n            \n            \n                            PhoenixUI\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventFolder\n                            \n                            \n                                    Private\n                                eventFolderState\n                            \n                            \n                                    Private\n                                geomFolder\n                            \n                            \n                                    Private\n                                labelsFolder\n                            \n                            \n                                    Private\n                                sceneManager\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addCollection\n                            \n                            \n                                    Private\n                                addCutOptions\n                            \n                            \n                                    Private\n                                addDrawOptions\n                            \n                            \n                                    Public\n                                addEventDataFolder\n                            \n                            \n                                    Public\n                                addEventDataTypeFolder\n                            \n                            \n                                    Public\n                                addGeometry\n                            \n                            \n                                    Public\n                                addGeometryFolder\n                            \n                            \n                                    Public\n                                addLabel\n                            \n                            \n                                    Public\n                                addLabelsFolder\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getEventDataTypeFolder\n                            \n                            \n                                    Public\n                                loadEventFolderState\n                            \n                            \n                                    Public\n                                removeLabel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(phoenixMenuRoot: PhoenixMenuNode, three: ThreeManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:29\n                            \n                        \n\n                \n                    \n                            Create Phoenix menu UI with different controls related to detector geometry and event data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        phoenixMenuRoot\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Root node of the Phoenix menu.\n\n                                                        \n                                                \n                                                \n                                                        three\n                                                  \n                                                        \n                                                                        ThreeManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three manager for managing three.js related operations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        eventFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:23\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing event related data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        eventFolderState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:25\n                        \n                    \n\n            \n                \n                    State of the Phoenix menu node containing event related data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        geomFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:21\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing geometries data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        labelsFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:27\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing labels.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sceneManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SceneManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:29\n                        \n                    \n\n            \n                \n                    Manager for managing functions of the three.js scene.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addCollection\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(eventDataType: string, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:219\n                \n            \n\n\n            \n                \n                    Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDataType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the event data type.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                    \n                                \n                                \n                                    collectionColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default color of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        addCutOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCutOptions(collectionNode: PhoenixMenuNode, collectionName: string, cuts: Cut[])\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:273\n                \n            \n\n\n            \n                \n                    Add Cut Options folder to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionNode\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The parent node to attach folder to\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the collection\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        addDrawOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    addDrawOptions(collectionNode: PhoenixMenuNode, collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:332\n                \n            \n\n\n            \n                \n                    Add Draw Options folder to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionNode\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The parent node to attach folder to\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the collection\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEventDataFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:175\n                \n            \n\n\n            \n                \n                    Add event data folder with functions for event data toggles like show/hide and depthTest.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:201\n                \n            \n\n\n            \n                \n                    Add folder for event data type like tracks or hits to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the type of event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addGeometry\n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometry(object: Object3D, menuSubfolder?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:116\n                \n            \n\n\n            \n                \n                    Add geometry to the menu's geometry folder and set up its configurable options.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the UI menu.\n\n                                    \n                                \n                                \n                                    menuSubfolder\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Subfolder in the menu to add the geometry to. Example Folder > Subfolder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addGeometryFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addGeometryFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:63\n                \n            \n\n\n            \n                \n                    Add geometry (detector geometry) folder to the menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabel(labelId: string, onRemoveLabel?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:419\n                \n            \n\n\n            \n                \n                    Add folder for configuration of label.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique ID of the label.\n\n                                    \n                                \n                                \n                                    onRemoveLabel\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function called when label is removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addLabelsFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelsFolder(configFunctions: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:369\n                \n            \n\n\n            \n                \n                    Add labels folder to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configFunctions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to attach to the labels folder configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:49\n                \n            \n\n\n            \n                \n                    Clear the menu by removing all folders.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:475\n                \n            \n\n\n            \n                \n                    Get the folder of the event data type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the event data type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        Folder of the event data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        loadEventFolderState\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadEventFolderState()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:484\n                \n            \n\n\n            \n                \n                    Load previous state of the event data folder in Phoenix menu if any.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLabel(labelId: string, labelNode?: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts:460\n                \n            \n\n\n            \n                \n                    Remove label from the menu and scene if it exists.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A unique label ID string.\n\n                                    \n                                \n                                \n                                    labelNode\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BufferGeometry,\n  Color,\n  Mesh,\n  MeshPhongMaterial,\n  Object3D,\n} from 'three';\nimport { SceneManager } from '../../three-manager/scene-manager';\nimport { ThreeManager } from '../../three-manager';\nimport { PhoenixMenuNode } from './phoenix-menu-node';\nimport { Cut } from '../../../lib/models/cut.model';\nimport { PrettySymbols } from '../../../helpers/pretty-symbols';\nimport { ColorByOptionKeys, ColorOptions } from '../color-options';\nimport { PhoenixUI } from '../phoenix-ui';\n\n/**\n * A wrapper class for Phoenix menu to perform UI related operations.\n */\nexport class PhoenixMenuUI implements PhoenixUI {\n  /** Phoenix menu node containing geometries data */\n  private geomFolder: PhoenixMenuNode;\n  /** Phoenix menu node containing event related data. */\n  private eventFolder: PhoenixMenuNode;\n  /** State of the Phoenix menu node containing event related data. */\n  private eventFolderState: any;\n  /** Phoenix menu node containing labels. */\n  private labelsFolder: PhoenixMenuNode;\n  /** Manager for managing functions of the three.js scene. */\n  private sceneManager: SceneManager;\n\n  /**\n   * Create Phoenix menu UI with different controls related to detector geometry and event data.\n   * @param phoenixMenuRoot Root node of the Phoenix menu.\n   * @param three The three manager for managing three.js related operations.\n   */\n  constructor(\n    private phoenixMenuRoot: PhoenixMenuNode,\n    private three: ThreeManager\n  ) {\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n    this.sceneManager = three.getSceneManager();\n  }\n\n  /**\n   * Clear the menu by removing all folders.\n   */\n  public clear() {\n    if (this.phoenixMenuRoot) {\n      this.phoenixMenuRoot.truncate();\n      this.phoenixMenuRoot = undefined;\n    }\n\n    this.geomFolder = null;\n    this.eventFolder = null;\n    this.labelsFolder = null;\n  }\n\n  /**\n   * Add geometry (detector geometry) folder to the menu.\n   */\n  public addGeometryFolder() {\n    // Phoenix menu\n    if (this.geomFolder === null) {\n      this.geomFolder = this.phoenixMenuRoot.addChild(\n        'Detector',\n        (value) => {\n          this.sceneManager.groupVisibility(SceneManager.GEOMETRIES_ID, value);\n        },\n        'perspective'\n      );\n    }\n\n    this.geomFolder\n      .addConfig('checkbox', {\n        label: 'Wireframe',\n        isChecked: false,\n        onChange: (value) => {\n          this.sceneManager.wireframeGeometries(value);\n        },\n      })\n      .addConfig('slider', {\n        label: 'Opacity',\n        min: 0,\n        max: 1,\n        step: 0.01,\n        allowCustomValue: true,\n        onChange: (value) => {\n          this.sceneManager.setGeometryOpacity(\n            this.sceneManager.getObjectByName(SceneManager.GEOMETRIES_ID),\n            value\n          );\n        },\n      })\n      .addConfig('slider', {\n        label: 'Scale',\n        min: 0,\n        max: 20,\n        step: 0.01,\n        allowCustomValue: true,\n        onChange: (scale) => {\n          this.sceneManager.scaleObject(\n            this.sceneManager.getObjectByName(SceneManager.GEOMETRIES_ID),\n            scale\n          );\n        },\n      });\n  }\n\n  /**\n   * Add geometry to the menu's geometry folder and set up its configurable options.\n   * @param object Object to add to the UI menu.\n   * @param menuSubfolder Subfolder in the menu to add the geometry to. Example `Folder > Subfolder`.\n   */\n  public addGeometry(object: Object3D, menuSubfolder?: string) {\n    const { name, material, visible } = object as Mesh;\n    const color = material?.color;\n\n    let parentNode: PhoenixMenuNode = this.geomFolder;\n    if (menuSubfolder) {\n      parentNode = this.geomFolder.findInTreeOrCreate(menuSubfolder);\n    }\n\n    // find out where the actual object name starts, providing that the name\n    // is hierarchical and contents higher level menu names too\n    let nameStart = name.lastIndexOf(' > ');\n    if (nameStart  '\n    }\n    const objFolder = parentNode.addChild(\n      name.substring(nameStart),\n      (value: boolean) => {\n        this.sceneManager.objectVisibility(object, value);\n      }\n    );\n\n    objFolder.toggleState = visible;\n\n    objFolder\n      .addConfig('color', {\n        label: 'Color',\n        color: color ? `#${new Color(color).getHexString()}` : undefined,\n        onChange: (value) => {\n          this.sceneManager.changeObjectColor(object, value);\n        },\n      })\n      .addConfig('slider', {\n        label: 'Opacity',\n        min: 0,\n        max: 1,\n        step: 0.05,\n        allowCustomValue: true,\n        onChange: (opacity) => {\n          this.sceneManager.setGeometryOpacity(object, opacity);\n        },\n      })\n      .addConfig('button', {\n        label: 'Remove',\n        onClick: () => {\n          objFolder.remove();\n          this.sceneManager.removeGeometry(object);\n        },\n      });\n  }\n\n  /**\n   * Add event data folder with functions for event data toggles like show/hide and depthTest.\n   */\n  public addEventDataFolder() {\n    // Phoenix menu\n    if (this.eventFolder !== null) {\n      this.eventFolderState = this.eventFolder.getNodeState();\n      this.eventFolder.remove();\n    }\n    this.eventFolder = this.phoenixMenuRoot.addChild(\n      'Event Data',\n      (value: boolean) => {\n        this.sceneManager.groupVisibility(SceneManager.EVENT_DATA_ID, value);\n      },\n      'event-folder'\n    );\n    this.eventFolder.addConfig('checkbox', {\n      label: 'Depth Test',\n      isChecked: true,\n      onChange: (value) => {\n        this.three.eventDataDepthTest(value);\n      },\n    });\n  }\n\n  /**\n   * Add folder for event data type like tracks or hits to the menu.\n   * @param typeName Name of the type of event data.\n   */\n  public addEventDataTypeFolder(typeName: string): void {\n    this.eventFolder.addChild(typeName, (value: boolean) => {\n      this.sceneManager.objectVisibility(\n        this.sceneManager\n          .getObjectByName(SceneManager.EVENT_DATA_ID)\n          .getObjectByName(typeName),\n        value\n      );\n    });\n  }\n\n  /**\n   * Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n   * @param eventDataType Name of the event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Default color of the collection.\n   */\n  public addCollection(\n    eventDataType: string,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color\n  ) {\n    const typeFolder = this.eventFolder.children.find(\n      (eventDataTypeNode) => eventDataTypeNode.name === eventDataType\n    );\n\n    if (!typeFolder) {\n      return;\n    }\n\n    const collectionNode = typeFolder.addChild(\n      collectionName,\n      (value: boolean) => {\n        const collectionObject = this.sceneManager\n          .getObjectByName(SceneManager.EVENT_DATA_ID)\n          .getObjectByName(collectionName);\n        this.sceneManager.objectVisibility(collectionObject, value);\n      }\n    );\n\n    this.addDrawOptions(collectionNode, collectionName);\n\n    if (cuts && cuts.length > 0) {\n      this.addCutOptions(collectionNode, collectionName, cuts);\n    }\n\n    const colorByOptions: ColorByOptionKeys[] = [];\n\n    // Extra config options specific to tracks\n    if (typeFolder.name === 'Tracks') {\n      colorByOptions.push(\n        ColorByOptionKeys.CHARGE,\n        ColorByOptionKeys.MOM,\n        ColorByOptionKeys.VERTEX\n      );\n    }\n\n    new ColorOptions(\n      this.three.getColorManager(),\n      collectionNode,\n      collectionColor,\n      colorByOptions\n    );\n  }\n\n  /**\n   * Add Cut Options folder to the menu.\n   * @param collectionNode The parent node to attach folder to\n   * @param collectionName The name of the collection\n   */\n  private addCutOptions(\n    collectionNode: PhoenixMenuNode,\n    collectionName: string,\n    cuts: Cut[]\n  ) {\n    const cutsOptionsNode = collectionNode.addChild('Cut Options');\n\n    cutsOptionsNode\n      .addConfig('label', {\n        label: 'Cuts',\n      })\n      .addConfig('button', {\n        label: 'Reset cuts',\n        onClick: () => {\n          this.sceneManager.groupVisibility(\n            collectionName,\n            true,\n            SceneManager.EVENT_DATA_ID\n          );\n\n          for (const cut of cuts) {\n            cut.reset();\n          }\n        },\n      });\n\n    // Add range sliders for cuts\n    for (const cut of cuts) {\n      cutsOptionsNode.addConfig('rangeSlider', {\n        label: PrettySymbols.getPrettySymbol(cut.field),\n        min: cut.minValue,\n        max: cut.maxValue,\n        step: cut.step,\n        value: cut.minValue,\n        highValue: cut.maxValue,\n        enableMin: cut.minCutActive,\n        enableMax: cut.maxCutActive,\n        onChange: ({ value, highValue }) => {\n          cut.minValue = value;\n          cut.maxValue = highValue;\n          this.sceneManager.collectionFilter(collectionName, cuts);\n        },\n        setEnableMin: (checked: boolean) => {\n          cut.enableMinCut(checked);\n          this.sceneManager.collectionFilter(collectionName, cuts);\n        },\n        setEnableMax: (checked: boolean) => {\n          cut.enableMaxCut(checked);\n          this.sceneManager.collectionFilter(collectionName, cuts);\n        },\n      });\n    }\n  }\n\n  /**\n   * Add Draw Options folder to the menu.\n   * @param collectionNode The parent node to attach folder to\n   * @param collectionName The name of the collection\n   */\n  private addDrawOptions(\n    collectionNode: PhoenixMenuNode,\n    collectionName: string\n  ) {\n    const drawOptionsNode = collectionNode.addChild('Draw Options');\n\n    drawOptionsNode.addConfig('slider', {\n      label: 'Opacity',\n      min: 0.1,\n      step: 0.1,\n      max: 1,\n      onChange: (value) => {\n        this.sceneManager.setGeometryOpacity(\n          this.sceneManager\n            .getObjectByName(SceneManager.EVENT_DATA_ID)\n            .getObjectByName(collectionName),\n          value\n        );\n      },\n    });\n\n    drawOptionsNode.addConfig('checkbox', {\n      label: 'Wireframe',\n      onChange: (value) =>\n        this.sceneManager.wireframeObjects(\n          this.sceneManager\n            .getObjectByName(SceneManager.EVENT_DATA_ID)\n            .getObjectByName(collectionName),\n          value\n        ),\n    });\n  }\n\n  /**\n   * Add labels folder to the menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  public addLabelsFolder(configFunctions: any) {\n    if (this.labelsFolder !== null) {\n      return;\n    }\n\n    const {\n      onToggle,\n      onSizeChange,\n      onColorChange,\n      onSaveLabels,\n      onLoadLabels,\n    } = configFunctions;\n\n    this.labelsFolder = this.phoenixMenuRoot.addChild(\n      SceneManager.LABELS_ID,\n      onToggle,\n      'info'\n    );\n\n    this.labelsFolder.addConfig('slider', {\n      label: 'Size',\n      min: 0,\n      max: 10,\n      step: 0.01,\n      allowCustomValue: true,\n      onChange: onSizeChange,\n    });\n\n    this.labelsFolder.addConfig('color', {\n      label: 'Color',\n      color: '#a8a8a8',\n      onChange: onColorChange,\n    });\n\n    this.labelsFolder.addConfig('button', {\n      label: 'Save Labels',\n      onClick: onSaveLabels,\n    });\n\n    this.labelsFolder.addConfig('button', {\n      label: 'Load Labels',\n      onClick: onLoadLabels,\n    });\n  }\n\n  /**\n   * Add folder for configuration of label.\n   * @param labelId Unique ID of the label.\n   * @param onRemoveLabel Function called when label is removed.\n   */\n  public addLabel(labelId: string, onRemoveLabel?: () => void) {\n    let labelNode = this.labelsFolder.children.find(\n      (phoenixMenuNode) => phoenixMenuNode.name === labelId\n    );\n\n    if (labelNode) {\n      return;\n    }\n\n    labelNode = this.labelsFolder.addChild(labelId, (value) => {\n      const labelObject = this.sceneManager\n        .getObjectByName(SceneManager.LABELS_ID)\n        .getObjectByName(labelId);\n      this.sceneManager.objectVisibility(labelObject, value);\n    });\n\n    labelNode.addConfig('color', {\n      label: 'Color',\n      color: '#a8a8a8',\n      onChange: (value) => {\n        this.sceneManager.changeObjectColor(\n          this.sceneManager.getObjectByName(labelId),\n          value\n        );\n      },\n    });\n\n    labelNode.addConfig('button', {\n      label: 'Remove',\n      onClick: () => {\n        onRemoveLabel?.();\n        this.removeLabel(labelId, labelNode);\n      },\n    });\n  }\n\n  /**\n   * Remove label from the menu and scene if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelFolderReference Reference to the label folder.\n   */\n  public removeLabel(labelId: string, labelNode?: PhoenixMenuNode) {\n    if (!labelNode) {\n      labelNode = this.labelsFolder?.children.find(\n        (singleLabelNode) => singleLabelNode.name === labelId\n      );\n    }\n\n    labelNode?.remove();\n  }\n\n  /**\n   * Get the folder of the event data type.\n   * @param typeName Name of the event data type.\n   * @returns Folder of the event data type.\n   */\n  public getEventDataTypeFolder(typeName: string): PhoenixMenuNode {\n    return this.eventFolder.children.find(\n      (eventDataTypeNode) => eventDataTypeNode.name === typeName\n    );\n  }\n\n  /**\n   * Load previous state of the event data folder in Phoenix menu if any.\n   */\n  public loadEventFolderState() {\n    if (this.eventFolderState) {\n      this.eventFolder.loadStateFromJSON(this.eventFolderState);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PhoenixUI.html":{"url":"interfaces/PhoenixUI.html","title":"interface - PhoenixUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PhoenixUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-ui.ts\n        \n\n\n            \n                Description\n            \n            \n                Common interface for implement Phoenix UI menu.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addCollection\n                                    \n                                \n                                \n                                    \n                                        addEventDataFolder\n                                    \n                                \n                                \n                                    \n                                        addEventDataTypeFolder\n                                    \n                                \n                                \n                                    \n                                        addGeometry\n                                    \n                                \n                                \n                                    \n                                        addGeometryFolder\n                                    \n                                \n                                \n                                    \n                                        addLabel\n                                    \n                                \n                                \n                                    \n                                        addLabelsFolder\n                                    \n                                \n                                \n                                    \n                                        clear\n                                    \n                                \n                                \n                                    \n                                        getEventDataTypeFolder\n                                    \n                                \n                                \n                                    \n                                        removeLabel\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addCollection\n                        \n                    \n                \n            \n            \n                \naddCollection(eventDataType: string, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:43\n                \n            \n\n\n            \n                \n                    Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDataType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the event data type.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                    \n                                \n                                \n                                    collectionColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default color of the collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addEventDataFolder\n                        \n                    \n                \n            \n            \n                \naddEventDataFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:28\n                \n            \n\n\n            \n                \n                    Add event data folder with functions for event data toggles like show/hide and depthTest.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \naddEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:34\n                \n            \n\n\n            \n                \n                    Add folder for event data type like tracks or hits to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the type of event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addGeometry\n                        \n                    \n                \n            \n            \n                \naddGeometry(object: Object3D, menuSubfolder?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:23\n                \n            \n\n\n            \n                \n                    Add geometry to the menu's geometry folder and set up its configurable options.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object to add to the UI menu.\n\n                                    \n                                \n                                \n                                    menuSubfolder\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Subfolder in the menu to add the geometry to. Example Folder > Subfolder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addGeometryFolder\n                        \n                    \n                \n            \n            \n                \naddGeometryFolder()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:16\n                \n            \n\n\n            \n                \n                    Add geometry (detector geometry) folder to the menu.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addLabel\n                        \n                    \n                \n            \n            \n                \naddLabel(labelId: string, onRemoveLabel: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:61\n                \n            \n\n\n            \n                \n                    Add folder for configuration of label.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique ID of the label.\n\n                                    \n                                \n                                \n                                    onRemoveLabel\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function called when label is removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addLabelsFolder\n                        \n                    \n                \n            \n            \n                \naddLabelsFolder(configFunctions: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:54\n                \n            \n\n\n            \n                \n                    Add labels folder to the menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configFunctions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to attach to the labels folder configuration.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:11\n                \n            \n\n\n            \n                \n                    Clear the menu by removing all folders.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \ngetEventDataTypeFolder(typeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:75\n                \n            \n\n\n            \n                \n                    Get the folder of the event data type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the event data type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        Folder of the event data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeLabel\n                        \n                    \n                \n            \n            \n                \nremoveLabel(labelId: string, labelFolderReference?: T)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/ui-manager/phoenix-ui.ts:68\n                \n            \n\n\n            \n                \n                    Remove label from the menu and scene if it exists.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    labelId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A unique label ID string.\n\n                                    \n                                \n                                \n                                    labelFolderReference\n                                    \n                                            T\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Reference to the label folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Color, Object3D } from 'three';\nimport { Cut } from '../../lib/models/cut.model';\n\n/**\n * Common interface for implement Phoenix UI menu.\n */\nexport interface PhoenixUI {\n  /**\n   * Clear the menu by removing all folders.\n   */\n  clear(): void;\n\n  /**\n   * Add geometry (detector geometry) folder to the menu.\n   */\n  addGeometryFolder(): void;\n\n  /**\n   * Add geometry to the menu's geometry folder and set up its configurable options.\n   * @param object Object to add to the UI menu.\n   * @param menuSubfolder Subfolder in the menu to add the geometry to. Example `Folder > Subfolder`.\n   */\n  addGeometry(object: Object3D, menuSubfolder?: string): void;\n\n  /**\n   * Add event data folder with functions for event data toggles like show/hide and depthTest.\n   */\n  addEventDataFolder(): void;\n\n  /**\n   * Add folder for event data type like tracks or hits to the menu.\n   * @param typeName Name of the type of event data.\n   */\n  addEventDataTypeFolder(typeName: string): void;\n\n  /**\n   * Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n   * @param eventDataType Name of the event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Default color of the collection.\n   */\n  addCollection(\n    eventDataType: string,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color\n  ): void;\n\n  /**\n   * Add labels folder to the menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  addLabelsFolder(configFunctions: any): void;\n\n  /**\n   * Add folder for configuration of label.\n   * @param labelId Unique ID of the label.\n   * @param onRemoveLabel Function called when label is removed.\n   */\n  addLabel(labelId: string, onRemoveLabel: () => void): void;\n\n  /**\n   * Remove label from the menu and scene if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelFolderReference Reference to the label folder.\n   */\n  removeLabel(labelId: string, labelFolderReference?: T): void;\n\n  /**\n   * Get the folder of the event data type.\n   * @param typeName Name of the event data type.\n   * @returns Folder of the event data type.\n   */\n  getEventDataTypeFolder(typeName: string): T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/preset-view.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\nAlso allows to point the camera to a given target and to define the default clipping for that view\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                cameraTarget\n                            \n                            \n                                    Public\n                                clipping\n                            \n                            \n                                    Public\n                                clippingOpeningAngle\n                            \n                            \n                                    Public\n                                clippingStartAngle\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], cameraTarget: number[], icon: string, clipping: ClippingSetting, clippingStartAngle: number, clippingOpeningAngle: number)\n                    \n                \n                        \n                            \n                                Defined in src/lib/models/preset-view.model.ts:28\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        cameraTarget\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Target to which the camera is pointing.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                                \n                                                        clipping\n                                                  \n                                                        \n                                                                        ClippingSetting\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        clippingStartAngle\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        clippingOpeningAngle\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraPos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:18\n                        \n                    \n\n            \n                \n                    Position to which the camera is to be set.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraTarget\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:20\n                        \n                    \n\n            \n                \n                    Target to which the camera is pointing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clipping\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClippingSetting\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:24\n                        \n                    \n\n            \n                \n                    Whether clipping should be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clippingOpeningAngle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:28\n                        \n                    \n\n            \n                \n                    In case of clipping, value of the opening angle.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clippingStartAngle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:26\n                        \n                    \n\n            \n                \n                    In case of clipping, value of the start angle.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:16\n                        \n                    \n\n            \n                \n                    Icon of the preset view (to describe the view angle).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:22\n                        \n                    \n\n            \n                \n                    Name of the preset view.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getIconURL\n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/preset-view.model.ts:59\n                \n            \n\n\n            \n                \n                    Get the URL of the preset view icon.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Icon URL.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export enum ClippingSetting {\n  NotForced,\n  On,\n  Off,\n}\n\n/**\n * Preset view for easily transforming/changing camera position to a specified position.\n * Also allows to point the camera to a given target and to define the default clipping for that view\n */\nexport class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Target to which the camera is pointing. */\n  public cameraTarget: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /** Whether clipping should be used. */\n  public clipping: ClippingSetting;\n  /** In case of clipping, value of the start angle. */\n  public clippingStartAngle: number;\n  /** In case of clipping, value of the opening angle. */\n  public clippingOpeningAngle: number;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param cameraTarget Target to which the camera is pointing.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(\n    name: string,\n    cameraPos: number[],\n    cameraTarget: number[],\n    icon: string,\n    clipping: ClippingSetting = ClippingSetting.NotForced,\n    clippingStartAngle: number = 0,\n    clippingOpeningAngle: number = 0\n  ) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.cameraTarget = cameraTarget;\n    this.icon = icon;\n    this.clipping = clipping;\n    this.clippingStartAngle = clippingStartAngle;\n    this.clippingOpeningAngle = clippingOpeningAngle;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrettySymbols.html":{"url":"classes/PrettySymbols.html","title":"class - PrettySymbols","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrettySymbols\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/pretty-symbols.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper for pretty symbols functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                symbols\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPrettyParams\n                            \n                            \n                                    Static\n                                getPrettySymbol\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        symbols\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  }\n                    \n                \n                    \n                        \n                                Defined in src/helpers/pretty-symbols.ts:6\n                        \n                    \n\n            \n                \n                    Pretty symbols for object params.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getPrettyParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettyParams(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:37\n                \n            \n\n\n            \n                \n                    Get pretty printed parameters of an object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters to be pretty printed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        New pretty printed parameterss.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getPrettySymbol\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettySymbol(param: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:24\n                \n            \n\n\n            \n                \n                    Get pretty symbol of a parameter.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameter of a physics object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PrettySymbols {\n  /** Pretty symbols for object params. */\n  public static readonly symbols: { [key: string]: string[] } = {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  };\n\n  /**\n   * Get pretty symbol of a parameter.\n   * @param param Parameter of a physics object.\n   */\n  public static getPrettySymbol(param: string) {\n    const prettySymbol = Object.keys(PrettySymbols.symbols).find((symbol) =>\n      PrettySymbols.symbols[symbol].includes(param)\n    );\n\n    return prettySymbol ? prettySymbol : param;\n  }\n\n  /**\n   * Get pretty printed parameters of an object.\n   * @param params Object parameters to be pretty printed.\n   * @returns New pretty printed parameterss.\n   */\n  public static getPrettyParams(params: { [key: string]: any }): {\n    [key: string]: any;\n  } {\n    // Create a copy of the params so we don't overwrite the original object\n    const paramsCopy = Object.assign({}, params);\n    // Go through all the parameters\n    for (const paramKey of Object.keys(paramsCopy)) {\n      // Get the pretty printed symbol\n      const symbol = PrettySymbols.getPrettySymbol(paramKey);\n      // If we do get a symbol\n      if (symbol !== paramKey) {\n        // Add a parameter with pretty printed symbol\n        paramsCopy[symbol] = paramsCopy[paramKey];\n        delete paramsCopy[paramKey];\n      }\n    }\n\n    // Delete 'pos' since it's too long and not needed\n    delete paramsCopy['pos'];\n\n    // Pretty print the dparams if any\n    if (paramsCopy?.dparams) {\n      const prettyDParams: { [key: string]: any } = {};\n\n      prettyDParams['θ'] = paramsCopy.dparams[3];\n      prettyDParams['ϕ'] = paramsCopy.dparams[2];\n      prettyDParams['|p|'] = Math.abs(1 / paramsCopy.dparams[4]);\n      prettyDParams['q'] = Math.sign(1 / paramsCopy.dparams[4]);\n      prettyDParams['d0'] = paramsCopy.dparams[0];\n      prettyDParams['z0'] = paramsCopy.dparams[1];\n\n      delete paramsCopy.dparams;\n\n      return { ...paramsCopy, ...prettyDParams };\n    }\n\n    return paramsCopy;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RKHelper.html":{"url":"classes/RKHelper.html","title":"class - RKHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RKHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/rk-helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper methods for RungeKutta functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                extrapolateTrackPositions\n                            \n                            \n                                    Static\n                                extrapolationLimit\n                            \n                            \n                                    Static\n                                getTracksWithRungeKutta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        extrapolateTrackPositions\n                        \n                    \n                \n            \n            \n                \n                    \n                    extrapolateTrackPositions(track: literal type, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:44\n                \n            \n\n\n            \n                \n                    Extrapolate tracks using RungeKutta propagator.\nis out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Track which is to be extrapolated.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        RKHelper.extrapolationLimit\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An array of track positions.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        extrapolationLimit\n                        \n                    \n                \n            \n            \n                \n                    \n                    extrapolationLimit(pos: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:14\n                \n            \n\n\n            \n                \n                    Function used by the extrapolator to check if the extrapolation should continue.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Location to be tested\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        A boolean: true, if the position is in-bounds, false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getTracksWithRungeKutta\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:24\n                \n            \n\n\n            \n                \n                    Get extrapolated tracks using RungeKutta.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tracksCollectionsEvent\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing tracks collections.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RungeKutta } from './runge-kutta';\nimport { Vector3 } from 'three';\nimport { CoordinateHelper } from './coordinate-helper';\n\n/**\n * Helper methods for RungeKutta functions.\n */\nexport class RKHelper {\n  /**\n   * Function used by the extrapolator to check if the extrapolation should continue.\n   * @param pos Location to be tested\n   * @returns A boolean: true, if the position is in-bounds, false otherwise.\n   */\n  public static extrapolationLimit(pos: Vector3) {\n    if (pos.z > 3000) return false;\n    if (Math.sqrt(pos.x * pos.x + pos.y * pos.y) > 1100) return false;\n    return true;\n  }\n\n  /**\n   * Get extrapolated tracks using RungeKutta.\n   * @param tracksCollectionsEvent Event containing tracks collections.\n   */\n  public static getTracksWithRungeKutta(tracksCollectionsEvent: any) {\n    const tracksCollections = Object.assign({}, tracksCollectionsEvent);\n    const Tracks = {};\n    for (const tracksCollection of Object.keys(tracksCollections)) {\n      for (const track of tracksCollections[tracksCollection]) {\n        track.pos = RKHelper.extrapolateTrackPositions(track);\n      }\n    }\n\n    return Tracks;\n  }\n\n  /**\n   * Extrapolate tracks using RungeKutta propagator.\n   * @param track Track which is to be extrapolated.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n   * @returns An array of track positions.\n\n   */\n  public static extrapolateTrackPositions(\n    track: { dparams: any },\n    inbounds: (pos: Vector3) => boolean = RKHelper.extrapolationLimit\n  ): any {\n    const dparams = track.dparams;\n    // ATLAS uses mm, MeV\n    const d0 = dparams[0];\n    const z0 = dparams[1];\n    const phi = dparams[2];\n    let theta = dparams[3];\n    const qop = dparams[4];\n\n    if (theta  [\n      val.pos.x,\n      val.pos.y,\n      val.pos.z,\n    ]);\n\n    return positions.concat(extrapolatedPos);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/renderer-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                    Public\n                                getLocalClipping\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                initRenderer\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                            Create the renderer manager by initializing the main renderer.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fixedOverlay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:14\n                        \n                    \n\n            \n                \n                    If the overlay is fixed or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mainRenderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:8\n                        \n                    \n\n            \n                \n                    Main renderer to be used by the event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayRenderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:10\n                        \n                    \n\n            \n                \n                    Overlay renderer for rendering a secondary overlay canvas.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:12\n                        \n                    \n\n            \n                \n                    A list of all available/created renderers.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addRenderer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:153\n                \n            \n\n\n            \n                \n                    Add a renderer to the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        containsObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:187\n                \n            \n\n\n            \n                \n                    Check if the list of available renderers contains a renderer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of available renderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the renderer or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getLocalClipping\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalClipping()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:210\n                \n            \n\n\n            \n                \n                    Get if the local clipping for the first renderer is enabled or disabled.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        If the renderer local clipping is enabled or disabled.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMainRenderer\n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:127\n                \n            \n\n\n            \n                \n                    Get the main renderer.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The main renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOverlayRenderer\n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:135\n                \n            \n\n\n            \n                \n                    Get the renderer used for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The overlay renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRenderers\n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:143\n                \n            \n\n\n            \n                \n                    Get all the available renderers.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer[]\n\n                    \n                    \n                        A list of three.js WebGLRenderers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:34\n                \n            \n\n\n            \n                \n                    Initialize the renderer manager by setting up the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'eventDisplay'\n                                    \n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        initRenderer\n                        \n                    \n                \n            \n            \n                \n                    \n                    initRenderer(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:64\n                \n            \n\n\n            \n                \n                    Set up the renderer with the DOM.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFixedOverlay\n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:220\n                \n            \n\n\n            \n                \n                    Check if the overlay is fixed or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the overlay is fixed or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeControls\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:163\n                \n            \n\n\n            \n                \n                    Remove a renderer from the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three,js WebGLRenderer to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:46\n                \n            \n\n\n            \n                \n                    Render the overlay.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display scene to render.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera for render.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFixOverlay\n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:228\n                \n            \n\n\n            \n                \n                    Set if the overlay is to be fixed or not.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the overlay is to be fixed or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setLocalClippingEnabled\n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:200\n                \n            \n\n\n            \n                \n                    Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the local clipping is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMainRenderer\n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:97\n                \n            \n\n\n            \n                \n                    Set the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setOverlayRenderer\n                        \n                    \n                \n            \n            \n                \n                    \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:105\n                \n            \n\n\n            \n                \n                    Set the renderer for overlay event display view.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overlayCanvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas on which the overlay is to be rendered.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRenderers\n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:119\n                \n            \n\n\n            \n                \n                    Set the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderers\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of three.js WebGLRenderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        swapRenderers\n                        \n                    \n                \n            \n            \n                \n                    \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/renderer-manager.ts:175\n                \n            \n\n\n            \n                \n                    Swap any two renderers.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rendererA\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer A to be swapped with renderer B.\n\n                                    \n                                \n                                \n                                    rendererB\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer B to be swapped with renderer A.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, Camera } from 'three';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n  /**\n   * Create the renderer manager by initializing the main renderer.\n   */\n  constructor() {\n    const renderer: WebGLRenderer = new WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      powerPreference: 'high-performance',\n    });\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n  }\n\n  /**\n   * Initialize the renderer manager by setting up the main renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  public init(elementId: string = 'eventDisplay') {\n    // Reset the animation loop\n    this.getMainRenderer().setAnimationLoop(null);\n    // Main renderer for current browsers\n    this.initRenderer(elementId);\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene to render.\n   * @param camera Camera for render.\n   */\n  public render(scene: Scene, camera: Camera) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(scene, camera);\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set up the renderer with the DOM.\n   * @param elementId ID of the wrapper element.\n   */\n  private initRenderer(elementId: string) {\n    let canvasWrapper = document.getElementById(elementId);\n    if (!canvasWrapper) {\n      canvasWrapper = document.body;\n    }\n\n    const rendererWidth = () =>\n      canvasWrapper.offsetWidth > 0\n        ? canvasWrapper.offsetWidth\n        : window.innerWidth;\n    const rendererHeight = () =>\n      canvasWrapper.offsetHeight > 0\n        ? canvasWrapper.offsetHeight\n        : window.innerHeight;\n\n    const mainRenderer = this.getMainRenderer();\n    mainRenderer.setSize(rendererWidth(), rendererHeight(), false);\n    mainRenderer.setPixelRatio(window.devicePixelRatio);\n    mainRenderer.domElement.id = 'three-canvas';\n\n    canvasWrapper.appendChild(this.getMainRenderer().domElement);\n\n    window.addEventListener('resize', () => {\n      mainRenderer.setSize(rendererWidth(), rendererHeight());\n    });\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer({\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true,\n    });\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Get if the local clipping for the first renderer is enabled or disabled.\n   * @returns If the renderer local clipping is enabled or disabled.\n   */\n  public getLocalClipping() {\n    if (this.renderers.length > 0) {\n      return this.renderers[0].localClippingEnabled;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RungeKutta.html":{"url":"classes/RungeKutta.html","title":"class - RungeKutta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RungeKutta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                Class for performing Runge-Kutta operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                propagate\n                            \n                            \n                                    Static\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        propagate\n                        \n                    \n                \n            \n            \n                \n                    \n                    propagate(startPos: Vector3, startDir: Vector3, p: number, q: number, mss: number, plength: number, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:126\n                \n            \n\n\n            \n                \n                    Propagate using the given properties by performing the Runge-Kutta steps.\nis out of bounds, when it returns false.\nthrough the Runge-Kutta steps.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting position in 3D space.\n\n                                    \n                                \n                                \n                                    startDir\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting direction in 3D space.\n\n                                    \n                                \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Momentum.\n\n                                    \n                                \n                                \n                                    q\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Charge.\n\n                                    \n                                \n                                \n                                    mss\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        Max step size.\n\n                                    \n                                \n                                \n                                    plength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Path length.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type[]\n\n                    \n                    \n                        An array containing position and direction at that position calculated\nthrough the Runge-Kutta steps.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        step\n                        \n                    \n                \n            \n            \n                \n                    \n                    step(state: State)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:12\n                \n            \n\n\n            \n                \n                    Perform a Runge-Kutta step for the given state.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                State\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State at which the step is to be performed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The computed step size.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScriptLoader.html":{"url":"classes/ScriptLoader.html","title":"class - ScriptLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScriptLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/script-loader.ts\n        \n\n\n            \n                Description\n            \n            \n                Script loader for dynamically loading external scripts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                loadScript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        loadScript\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadScript(scriptURL: string, scriptFor?: string, parentElement: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:15\n                \n            \n\n\n            \n                \n                    Load a script dynamically from a URL.\nDefaults to  tag.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scriptURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        URL of the script to be loaded.\n\n                                    \n                                \n                                \n                                    scriptFor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Optional data attribute to identify what the script is for. [data-scriptFor]\n\n                                    \n                                \n                                \n                                    parentElement\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        document.getElementsByTagName('head')[0]\n                                    \n\n                                    \n                                        Parent element to which the script is to be appended.\nDefaults to  tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for the script load.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoadingManager } from '../managers/loading-manager';\n\n/**\n * Script loader for dynamically loading external scripts.\n */\nexport class ScriptLoader {\n  /**\n   * Load a script dynamically from a URL.\n   * @param scriptURL URL of the script to be loaded.\n   * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\n   * @param parentElement Parent element to which the script is to be appended.\n   * Defaults to `` tag.\n   * @returns Promise for the script load.\n   */\n  public static loadScript(\n    scriptURL: string,\n    scriptFor?: string,\n    parentElement: HTMLElement = document.getElementsByTagName('head')[0]\n  ): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('single_script');\n\n    return new Promise((resolve, reject) => {\n      const scriptExists = document.querySelectorAll(\n        'script[src=\"' + scriptURL + '\"]'\n      );\n\n      // If no script exists - add one\n      if (scriptExists.length === 0) {\n        const scriptElement = document.createElement('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = scriptURL;\n        if (scriptFor) {\n          scriptElement.setAttribute('data-scriptfor', scriptFor);\n        }\n\n        scriptElement.addEventListener('load', () => {\n          scriptElement.setAttribute('data-loaded', 'true');\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        });\n        scriptElement.onerror = (event) => {\n          console.error('ERROR LOADING SCRIPT: ', event);\n          reject();\n          loadingManager.itemLoaded('single_script');\n        };\n\n        parentElement.appendChild(scriptElement);\n      } else {\n        // If script has already loaded then resolve else wait for it to load\n        if (scriptExists[0].dataset.loaded === 'true') {\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        } else {\n          scriptExists[0].addEventListener('load', () => {\n            resolve();\n            loadingManager.itemLoaded('single_script');\n          });\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/selection-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                effectsManager\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                preSelectionAntialias\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/selection-manager.ts:43\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        activeObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable('')\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:30\n                        \n                    \n\n            \n                \n                    The currently selected object which is observable for changes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        camera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:24\n                        \n                    \n\n            \n                \n                    The camera inside the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        effectsManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EffectsManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:38\n                        \n                    \n\n            \n                \n                    Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ignoreList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:32\n                        \n                    \n\n            \n                \n                    Objects to be ignored on hovering over the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        infoLogger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InfoLogger\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:41\n                        \n                    \n\n            \n                \n                    Service for logging data to the information panel.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:22\n                        \n                    \n\n            \n                \n                    Is initialized.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onDocumentMouseDown\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:158\n                        \n                    \n\n            \n                \n                    Function to call on mouse click when object selection is enabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onTouchDown\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:207\n                        \n                    \n\n            \n                \n                    Function to call on touch when object selection is enabled.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    event\n                                                    \n                                                            Event containing touch data.\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onTouchMove\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:145\n                        \n                    \n\n            \n                \n                    Function to call on mouse move when object selection is enabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        outlinePass\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutlinePass\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:36\n                        \n                    \n\n            \n                \n                    Outline pass for highlighting the hovered over event display elements.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        preSelectionAntialias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:43\n                        \n                    \n\n            \n                \n                    Performance mode value before enabling selection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scene\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Scene\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:26\n                        \n                    \n\n            \n                \n                    The scene used for event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedObject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:28\n                        \n                    \n\n            \n                \n                    Object used to display the information of the selected 3D object.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        disableSelecting\n                        \n                    \n                \n            \n            \n                \n                    \n                    disableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:128\n                \n            \n\n\n            \n                \n                    Disable selecting of event display elements and remove mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        enableSelecting\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:111\n                \n            \n\n\n            \n                \n                    Enable selecting of event display elements and set mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getActiveObjectId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveObjectId()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:94\n                \n            \n\n\n            \n                \n                    Get the uuid of the currently selected object.\n\n\n                    \n                    \n                    \n                        Returns :         ActiveVariable\n\n                    \n                    \n                        uuid of the currently selected object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        highlightObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:241\n                \n            \n\n\n            \n                \n                    Highlight the object with the given uuid by giving it an outline.\nwith the given uuid.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        uuid of the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init(camera: Camera, scene: Scene, effectsManager: EffectsManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:65\n                \n            \n\n\n            \n                \n                    Initialize the selection manager.\nlike outline pass and unreal bloom.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    effectsManager\n                                    \n                                                EffectsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing three.js event display effects\nlike outline pass and unreal bloom.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        intersectObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    intersectObject(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:218\n                \n            \n\n\n            \n                \n                    Check if any object intersects on mouse move.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing data of the mouse move.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Intersected or hovered over object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setSelectedObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:83\n                \n            \n\n\n            \n                \n                    Set the currently selected object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selectedObject\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The currently selected object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setSelecting\n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelecting(enable: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/selection-manager.ts:102\n                \n            \n\n\n            \n                \n                    Set if selecting is to be enabled or disabled.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enable\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If selecting is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector2,\n  Raycaster,\n  Camera,\n  Scene,\n  Object3D,\n  DirectionalLight,\n  AmbientLight,\n  AxesHelper,\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { InfoLogger } from '../../helpers/info-logger';\nimport { EffectsManager } from './effects-manager';\nimport { PrettySymbols } from '../../helpers/pretty-symbols';\nimport { ActiveVariable } from '../../helpers/active-variable';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n  /** Is initialized. */\n  private isInit: boolean;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The scene used for event display. */\n  private scene: Scene;\n  /** Object used to display the information of the selected 3D object. */\n  private selectedObject: { name: string; attributes: any[] };\n  /** The currently selected object which is observable for changes. */\n  private activeObject = new ActiveVariable('');\n  /** Objects to be ignored on hovering over the scene. */\n  private ignoreList: string[];\n\n  // Post processing\n  /** Outline pass for highlighting the hovered over event display elements. */\n  private outlinePass: OutlinePass;\n  /** Manager for managing three.js event display effects like outline pass and unreal bloom. */\n  private effectsManager: EffectsManager;\n\n  /** Service for logging data to the information panel. */\n  private infoLogger: InfoLogger;\n  /** Performance mode value before enabling selection. */\n  private preSelectionAntialias: boolean;\n\n  /**\n   * Constructor for the selection manager.\n   */\n  constructor() {\n    this.isInit = false;\n    this.ignoreList = [\n      new AmbientLight().type,\n      new DirectionalLight().type,\n      new AxesHelper().type,\n    ];\n  }\n\n  /**\n   * Initialize the selection manager.\n   * @param camera The camera inside the scene.\n   * @param scene The scene used for event display.\n   * @param effectsManager Manager for managing three.js event display effects\n   * like outline pass and unreal bloom.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public init(\n    camera: Camera,\n    scene: Scene,\n    effectsManager: EffectsManager,\n    infoLogger: InfoLogger\n  ) {\n    this.camera = camera;\n    this.scene = scene;\n    this.isInit = true;\n    this.infoLogger = infoLogger;\n    this.effectsManager = effectsManager;\n    this.outlinePass = this.effectsManager.addOutlinePassForSelection();\n  }\n\n  /**\n   * Set the currently selected object.\n   * @param selectedObject The currently selected object.\n   */\n  public setSelectedObject(selectedObject: {\n    name: string;\n    attributes: any[];\n  }) {\n    this.selectedObject = selectedObject;\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.activeObject;\n  }\n\n  /**\n   * Set if selecting is to be enabled or disabled.\n   * @param enable If selecting is to be enabled or disabled.\n   */\n  public setSelecting(enable: boolean) {\n    if (this.isInit) {\n      enable ? this.enableSelecting() : this.disableSelecting();\n    }\n  }\n\n  /**\n   * Enable selecting of event display elements and set mouse move and click events.\n   */\n  private enableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .addEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .addEventListener('touchstart', this.onTouchDown);\n    this.preSelectionAntialias = this.effectsManager.antialiasing;\n    this.effectsManager.setAntialiasing(false);\n  }\n\n  /**\n   * Disable selecting of event display elements and remove mouse move and click events.\n   */\n  private disableSelecting() {\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('mousemove', this.onTouchMove, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('click', this.onDocumentMouseDown, true);\n    document\n      .getElementById('three-canvas')\n      .removeEventListener('touchstart', this.onTouchDown);\n    this.outlinePass.selectedObjects = [];\n    this.effectsManager.setAntialiasing(this.preSelectionAntialias);\n  }\n\n  /**\n   * Function to call on mouse move when object selection is enabled.\n   */\n  private onTouchMove = (event: any) => {\n    const intersectedObject = this.intersectObject(event);\n    if (intersectedObject) {\n      if (this.ignoreList.includes(intersectedObject.type)) {\n        return;\n      }\n      this.outlinePass.selectedObjects = [intersectedObject];\n    }\n  };\n\n  /**\n   * Function to call on mouse click when object selection is enabled.\n   */\n  private onDocumentMouseDown = () => {\n    const intersectedObject = this.outlinePass.selectedObjects[0];\n    if (intersectedObject) {\n      this.selectedObject.name = intersectedObject.name;\n      this.selectedObject.attributes.splice(\n        0,\n        this.selectedObject.attributes.length\n      );\n\n      this.activeObject.update(intersectedObject.uuid);\n\n      const prettyParams = PrettySymbols.getPrettyParams(\n        intersectedObject.userData\n      );\n\n      for (const key of Object.keys(prettyParams)) {\n        this.selectedObject.attributes.push({\n          attributeName: key,\n          attributeValue: prettyParams[key],\n        });\n      }\n\n      // Process properties of the selected object\n      const props = Object.keys(intersectedObject.userData)\n        .map((key) => {\n          // Only take properties that are a string or number (no arrays or objects)\n          if (\n            ['string', 'number'].includes(\n              typeof intersectedObject.userData[key]\n            )\n          ) {\n            return key + '=' + intersectedObject.userData[key];\n          }\n        })\n        .filter((val) => val);\n      // Build the log text and add to the logger\n      const log =\n        intersectedObject.name +\n        (props.length > 0 ? ' with ' + props.join(', ') : '');\n      if (log) {\n        this.infoLogger.add(log, 'Clicked');\n      }\n    }\n  };\n\n  /**\n   * Function to call on touch when object selection is enabled.\n   * @param event Event containing touch data.\n   */\n  private onTouchDown = (event: TouchEvent) => {\n    event.preventDefault();\n    this.onTouchMove(event.targetTouches[0]);\n    this.onDocumentMouseDown();\n  };\n\n  /**\n   * Check if any object intersects on mouse move.\n   * @param event Event containing data of the mouse move.\n   * @returns Intersected or hovered over object.\n   */\n  private intersectObject(event: any): Object3D {\n    event.preventDefault?.();\n    const mouse = new Vector2();\n    const rendererElement = this.effectsManager.composer.renderer.domElement;\n    mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera(mouse, this.camera);\n    raycaster.params.Line.threshold = 3;\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n    if (intersects.length > 0) {\n      // We want the closest one\n      return intersects[0].object;\n    }\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param objectsGroup Group of objects to be traversed for finding the object\n   * with the given uuid.\n   */\n  public highlightObject(uuid: string, objectsGroup: Object3D) {\n    const object = objectsGroup.getObjectByProperty('uuid', uuid);\n    if (object) {\n      this.outlinePass.selectedObjects = [object];\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                State of the particle.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dir\n                            \n                            \n                                maxStepSize\n                            \n                            \n                                p\n                            \n                            \n                                pathLength\n                            \n                            \n                                pos\n                            \n                            \n                                q\n                            \n                            \n                                stepSize\n                            \n                            \n                                unitC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dir\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Vector3\n\n                    \n                \n                \n                    \n                        Default value : new Vector3(0, 0, 0)\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:170\n                        \n                    \n\n            \n                \n                    Direction.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxStepSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:180\n                        \n                    \n\n            \n                \n                    Max step size.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:172\n                        \n                    \n\n            \n                \n                    Momentum.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:182\n                        \n                    \n\n            \n                \n                    Path length..\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Vector3\n\n                    \n                \n                \n                    \n                        Default value : new Vector3(0, 0, 0)\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:168\n                        \n                    \n\n            \n                \n                    Position.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        q\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:174\n                        \n                    \n\n            \n                \n                    Charge.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stepSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:178\n                        \n                    \n\n            \n                \n                    Step size.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unitC\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3.3333\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:176\n                        \n                    \n\n            \n                \n                    Unit.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6)\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6)\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StateManager.html":{"url":"classes/StateManager.html","title":"class - StateManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StateManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/state-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A singleton manager for managing the scene's state.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeCamera\n                            \n                            \n                                clippingEnabled\n                            \n                            \n                                eventDisplay\n                            \n                            \n                                eventMetadata\n                            \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                openingClippingAngle\n                            \n                            \n                                phoenixMenuRoot\n                            \n                            \n                                startClippingAngle\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                getOpeningClippingAngle\n                            \n                            \n                                getStartClippingAngle\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                saveStateAsJSON\n                            \n                            \n                                setCamera\n                            \n                            \n                                setClippingEnabled\n                            \n                            \n                                setEventDisplay\n                            \n                            \n                                setOpeningClippingAngle\n                            \n                            \n                                setPhoenixMenuRoot\n                            \n                            \n                                setStartClippingAngle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/state-manager.ts:29\n                            \n                        \n\n                \n                    \n                            Create the state manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        activeCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:22\n                        \n                    \n\n            \n                \n                    The active camera.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clippingEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(false)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:16\n                        \n                    \n\n            \n                \n                    Whether the clipping is enabled or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventDisplay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventDisplay\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:24\n                        \n                    \n\n            \n                \n                    The event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    runNumber: '000',\n    eventNumber: '000',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:26\n                        \n                    \n\n            \n                \n                    Current loaded event's metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StateManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:12\n                        \n                    \n\n            \n                \n                    Instance of the state manager.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openingClippingAngle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(0)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:20\n                        \n                    \n\n            \n                \n                    Opening angle of the clipping.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoenixMenuRoot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:14\n                        \n                    \n\n            \n                \n                    Root node of the phoenix menu.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startClippingAngle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(0)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:18\n                        \n                    \n\n            \n                \n                    Starting angle of the clipping.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:46\n                \n            \n\n\n            \n                \n                    Get the instance of state manager.\n\n\n                    \n                    \n                    \n                        Returns :         StateManager\n\n                    \n                    \n                        The state manager instance.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOpeningClippingAngle\n                        \n                    \n                \n            \n            \n                \ngetOpeningClippingAngle()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:179\n                \n            \n\n\n            \n                \n                    Get the opening angle of clipping.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The opening angle of clipping.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStartClippingAngle\n                        \n                    \n                \n            \n            \n                \ngetStartClippingAngle()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:163\n                \n            \n\n\n            \n                \n                    Get the start clipping angle of clipping.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The starting angle of clipping.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadStateFromJSON\n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:104\n                \n            \n\n\n            \n                \n                    Load the state from JSON.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON for state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveStateAsJSON\n                        \n                    \n                \n            \n            \n                \nsaveStateAsJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:80\n                \n            \n\n\n            \n                \n                    Save the state of the event display as JSON.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCamera\n                        \n                    \n                \n            \n            \n                \nsetCamera(camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:187\n                \n            \n\n\n            \n                \n                    Set the scene camera for state.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setClippingEnabled\n                        \n                    \n                \n            \n            \n                \nsetClippingEnabled(clipping: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:147\n                \n            \n\n\n            \n                \n                    Set the state of clipping.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clipping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether the clipping is enabled or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEventDisplay\n                        \n                    \n                \n            \n            \n                \nsetEventDisplay(eventDisplay: EventDisplay)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:195\n                \n            \n\n\n            \n                \n                    Set the event display.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDisplay\n                                    \n                                                EventDisplay\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setOpeningClippingAngle\n                        \n                    \n                \n            \n            \n                \nsetOpeningClippingAngle(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:171\n                \n            \n\n\n            \n                \n                    Set the opening angle of clipping.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle for clipping.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPhoenixMenuRoot\n                        \n                    \n                \n            \n            \n                \nsetPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:54\n                \n            \n\n\n            \n                \n                    Set the root node of Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoenixMenuRoot\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phoenix menu root node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setStartClippingAngle\n                        \n                    \n                \n            \n            \n                \nsetStartClippingAngle(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:155\n                \n            \n\n\n            \n                \n                    Set the start clipping angle of clipping.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle for clipping.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDisplay } from '../event-display';\nimport { Camera } from 'three';\nimport { PhoenixMenuNode } from './ui-manager/phoenix-menu/phoenix-menu-node';\nimport { loadFile, saveFile } from '../helpers/file';\nimport { ActiveVariable } from '../helpers/active-variable';\n\n/**\n * A singleton manager for managing the scene's state.\n */\nexport class StateManager {\n  /** Instance of the state manager. */\n  private static instance: StateManager;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether the clipping is enabled or not. */\n  clippingEnabled = new ActiveVariable(false);\n  /** Starting angle of the clipping. */\n  startClippingAngle = new ActiveVariable(0);\n  /** Opening angle of the clipping. */\n  openingClippingAngle = new ActiveVariable(0);\n  /** The active camera. */\n  activeCamera: Camera;\n  /** The event display. */\n  eventDisplay: EventDisplay;\n  /** Current loaded event's metadata. */\n  eventMetadata: { runNumber: string; eventNumber: string } = {\n    runNumber: '000',\n    eventNumber: '000',\n  };\n\n  /**\n   * Create the state manager.\n   * @returns The state manager instance.\n   */\n  constructor() {\n    if (StateManager.instance === undefined) {\n      StateManager.instance = this;\n    }\n    return StateManager.instance;\n  }\n\n  /**\n   * Get the instance of state manager.\n   * @returns The state manager instance.\n   */\n  static getInstance(): StateManager {\n    return StateManager.instance;\n  }\n\n  /**\n   * Set the root node of Phoenix menu.\n   * @param phoenixMenuRoot Phoenix menu root node.\n   */\n  setPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuRoot;\n\n    if (this.phoenixMenuRoot) {\n      // Add save and load config buttons to the root node\n      this.phoenixMenuRoot\n        .addConfig('button', {\n          label: 'Save state',\n          onClick: () => {\n            this.saveStateAsJSON();\n          },\n        })\n        .addConfig('button', {\n          label: 'Load state',\n          onClick: () => {\n            loadFile((data) => {\n              this.loadStateFromJSON(JSON.parse(data));\n            });\n          },\n        });\n    }\n  }\n\n  /**\n   * Save the state of the event display as JSON.\n   */\n  saveStateAsJSON() {\n    const state: { [key: string]: any } = {\n      phoenixMenu: this.phoenixMenuRoot.getNodeState(),\n      eventDisplay: {\n        cameraPosition: this.activeCamera.position.toArray(),\n        startClippingAngle: this.clippingEnabled.value\n          ? this.startClippingAngle.value\n          : null,\n        openingClippingAngle: this.clippingEnabled.value\n          ? this.openingClippingAngle.value\n          : null,\n      },\n    };\n\n    saveFile(\n      JSON.stringify(state),\n      `run${this.eventMetadata.runNumber}_evt${this.eventMetadata.eventNumber}.json`\n    );\n  }\n\n  /**\n   * Load the state from JSON.\n   * @param json JSON for state.\n   */\n  loadStateFromJSON(json: string | { [key: string]: any }) {\n    const jsonData: { [key: string]: any } =\n      typeof json === 'string' ? JSON.parse(json) : json;\n\n    if (jsonData['phoenixMenu'] && this.phoenixMenuRoot) {\n      this.phoenixMenuRoot.loadStateFromJSON(jsonData['phoenixMenu']);\n      this.phoenixMenuRoot.configActive = false;\n    }\n\n    if (jsonData['eventDisplay']) {\n      this.activeCamera.position.fromArray(\n        jsonData['eventDisplay']?.['cameraPosition']\n      );\n\n      const startAngle = jsonData['eventDisplay']?.['startClippingAngle'];\n      const openingAngle = jsonData['eventDisplay']?.['openingClippingAngle'];\n\n      if (startAngle || openingAngle) {\n        this.setClippingEnabled(true);\n        this.eventDisplay.getUIManager().setClipping(true);\n\n        if (startAngle) {\n          this.eventDisplay\n            .getUIManager()\n            .rotateStartAngleClipping(\n              jsonData['eventDisplay']['startClippingAngle']\n            );\n        }\n        if (openingAngle) {\n          this.eventDisplay\n            .getUIManager()\n            .rotateOpeningAngleClipping(\n              jsonData['eventDisplay']['openingClippingAngle']\n            );\n        }\n      }\n    }\n  }\n\n  /**\n   * Set the state of clipping.\n   * @param clipping Whether the clipping is enabled or not.\n   */\n  setClippingEnabled(clipping: boolean) {\n    this.clippingEnabled.update(clipping);\n  }\n\n  /**\n   * Set the start clipping angle of clipping.\n   * @param angle Angle for clipping.\n   */\n  setStartClippingAngle(angle: number) {\n    this.startClippingAngle.update(angle);\n  }\n\n  /**\n   * Get the start clipping angle of clipping.\n   * @returns The starting angle of clipping.\n   */\n  getStartClippingAngle(): number {\n    return this.startClippingAngle.value;\n  }\n\n  /**\n   * Set the opening angle of clipping.\n   * @param angle Angle for clipping.\n   */\n  setOpeningClippingAngle(angle: number) {\n    this.openingClippingAngle.update(angle);\n  }\n\n  /**\n   * Get the opening angle of clipping.\n   * @returns The opening angle of clipping.\n   */\n  getOpeningClippingAngle(): number {\n    return this.openingClippingAngle.value;\n  }\n\n  /**\n   * Set the scene camera for state.\n   * @param camera The camera.\n   */\n  setCamera(camera: Camera) {\n    this.activeCamera = camera;\n  }\n\n  /**\n   * Set the event display.\n   * @param eventDisplay The event display.\n   */\n  setEventDisplay(eventDisplay: EventDisplay) {\n    this.eventDisplay = eventDisplay;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TracksMaterial.html":{"url":"classes/TracksMaterial.html","title":"class - TracksMaterial","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TracksMaterial\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/tracks.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom material for the tracks.\n\n            \n\n            \n                Extends\n            \n            \n                    ShaderMaterial\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isTracksMaterial\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params)\n                    \n                \n                        \n                            \n                                Defined in src/loaders/objects/tracks.ts:230\n                            \n                        \n\n                \n                    \n                            Create the tracks material.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Params for creating the tracks material.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isTracksMaterial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:230\n                        \n                    \n\n            \n                \n                    If the material is of track.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BufferGeometry,\n  BufferAttribute,\n  ShaderMaterial,\n  ShaderChunk,\n  Vector2,\n  Vector3,\n  Color,\n  ColorRepresentation,\n} from 'three';\n\n/**\n * Custom mesh for tracks.\n */\nexport class TracksMesh extends BufferGeometry {\n  /** ID of the next track. */\n  next_track_id: number;\n  /** Positions. */\n  positions: number[];\n  /** Previous. */\n  previous: number[];\n  /** Next. */\n  next: number[];\n  /** Colors. */\n  colors: number[];\n  /** Counter. */\n  counter: number[];\n  /** Track ID. */\n  track_id: any[];\n  /** Side. */\n  side: any[];\n  /** Indices. */\n  indices_array: any[];\n  /** Attributes. */\n  _attributes: any;\n\n  /**\n   * Create the tracks mesh.\n   */\n  constructor() {\n    super();\n    this.type = 'TracksMesh';\n    this.positions = [];\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.counter = [];\n    this.track_id = [];\n    this.colors = [];\n    this.indices_array = [];\n    this.next_track_id = 0;\n  }\n\n  /**\n   * Add a track to the tracks mesh.\n   * @param points Points for constructing the track.\n   * @param color Color of the track.\n   * @returns ID of the track.\n   */\n  addTrack(points: Vector3[], color: ColorRepresentation) {\n    const id = this.next_track_id++;\n\n    const col = new Color(color);\n\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n\n    for (let i = 0; i  0) {\n        this.next.push(p.x, p.y, p.z);\n        this.next.push(p.x, p.y, p.z);\n      }\n    }\n\n    const i = points.length - 1;\n    this.next.push(points[i].x, points[i].y, points[i].z);\n    this.next.push(points[i].x, points[i].y, points[i].z);\n\n    //this.process()\n    return id;\n  }\n\n  /**\n   * Process the track mesh.\n   */\n  process() {\n    if (\n      !this._attributes ||\n      this._attributes.position.count !== this.positions.length\n    ) {\n      this._attributes = {\n        position: new BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new BufferAttribute(new Float32Array(this.previous), 3),\n        next: new BufferAttribute(new Float32Array(this.next), 3),\n        side: new BufferAttribute(new Float32Array(this.side), 1),\n        track_id: new BufferAttribute(new Int32Array(this.track_id), 1),\n        color: new BufferAttribute(new Float32Array(this.colors), 3),\n        counter: new BufferAttribute(new Float32Array(this.counter), 1),\n        index: new BufferAttribute(new Uint32Array(this.indices_array), 1),\n      };\n    } else {\n      (this._attributes.position as BufferAttribute).copyArray(\n        new Float32Array(this.positions)\n      );\n      this._attributes.position.needsUpdate = true;\n      (this._attributes.previous as BufferAttribute).copyArray(\n        new Float32Array(this.previous)\n      );\n      this._attributes.previous.needsUpdate = true;\n      (this._attributes.next as BufferAttribute).copyArray(\n        new Float32Array(this.next)\n      );\n      this._attributes.next.needsUpdate = true;\n      (this._attributes.side as BufferAttribute).copyArray(\n        new Float32Array(this.side)\n      );\n      this._attributes.side.needsUpdate = true;\n      (this._attributes.track_id as BufferAttribute).copyArray(\n        new Int32Array(this.track_id)\n      );\n      this._attributes.track_id.needsUpdate = true;\n      (this._attributes.color as BufferAttribute).copyArray(\n        new Float32Array(this.colors)\n      );\n      this._attributes.color.needsUpdate = true;\n      (this._attributes.counter as BufferAttribute).copyArray(\n        new Float32Array(this.counter)\n      );\n      this._attributes.counter.needsUpdate = true;\n      (this._attributes.index as BufferAttribute).copyArray(\n        new Uint32Array(this.indices_array)\n      );\n      this._attributes.index.needsUpdate = true;\n    }\n\n    this.setAttribute('position', this._attributes.position);\n    this.setAttribute('previous', this._attributes.previous);\n    this.setAttribute('next', this._attributes.next);\n    this.setAttribute('side', this._attributes.side);\n    this.setAttribute('track_id', this._attributes.track_id);\n    this.setAttribute('color', this._attributes.color);\n    this.setAttribute('counter', this._attributes.counter);\n\n    this.setIndex(this._attributes.index as BufferAttribute);\n\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n}\n\n/** Custom vertex shader for tracks. */\nShaderChunk['tracks_vert'] = [\n  'attribute vec3 previous;',\n  'attribute vec3 next;',\n  'attribute int track_id;',\n  'attribute float side;',\n  'attribute vec3 color;',\n  'attribute float counter;',\n\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n\n  'uniform vec2 resolution;',\n  'uniform float lineWidth;',\n  'void main() {',\n  '  vec2 aspect = vec2(resolution.x / resolution.y, 1.0);',\n  '',\n  '  v_color = color;',\n  '  v_counter = counter;',\n  '  v_track_id = track_id;',\n  '',\n  '  mat4 m = projectionMatrix * modelViewMatrix;',\n  '  vec4 finalPosition = m * vec4(position, 1.0);',\n  '  vec4 prevPos = m * vec4(previous, 1.0);',\n  '  vec4 nextPos = m * vec4(next, 1.0);',\n  '',\n  '  vec2 curP = finalPosition.xy / finalPosition.w * aspect;',\n  '  vec2 prevP = prevPos.xy / prevPos.w * aspect;',\n  '  vec2 nextP = nextPos.xy / nextPos.w * aspect;',\n  '',\n  '  vec2 dir;',\n  '  if (curP == prevP) dir = normalize(nextP - curP);',\n  '  else if (curP == nextP) dir = normalize(curP - prevP);',\n  '  else dir = normalize(curP - prevP);',\n  '',\n  '  vec2 normal = vec2(-dir.y, dir.x);',\n  '  normal.xy *= .5 * lineWidth;',\n  '  normal.x /= aspect.x;',\n  '  normal.xy *= finalPosition.w * 0.001;',\n\n  '  finalPosition.xy += normal.xy * side;',\n  '  gl_Position = finalPosition;',\n  '}',\n].join('\\n');\n\n/** Custom fragment shadre for track. */\nShaderChunk['tracks_frag'] = [\n  'uniform float progress;',\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n  'void main() {',\n  '  if (v_counter > progress) discard;',\n  '  gl_FragColor = vec4(v_color, 1.0);',\n  '}',\n].join('\\n');\n\n/**\n * Custom material for the tracks.\n */\nexport class TracksMaterial extends ShaderMaterial {\n  /** If the material is of track. */\n  isTracksMaterial: boolean;\n\n  /**\n   * Create the tracks material.\n   * @param params Params for creating the tracks material.\n   */\n  constructor(params) {\n    super({\n      uniforms: Object.assign(\n        {},\n        {\n          lineWidth: { value: 1 },\n          resolution: { value: new Vector2(1, 1) },\n          progress: { value: 1 },\n        }\n      ),\n      vertexShader: ShaderChunk.tracks_vert,\n      fragmentShader: ShaderChunk.tracks_frag,\n    });\n    this.isTracksMaterial = true;\n    this.type = 'TracksMaterial';\n\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.lineWidth.value;\n        },\n        set: function (value) {\n          this.uniforms.lineWidth.value = value;\n        },\n      },\n      resolution: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.resolution.value;\n        },\n        set: function (value) {\n          this.uniforms.resolution.value.copy(value);\n        },\n      },\n      progress: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.progress.value;\n        },\n        set: function (value) {\n          this.uniforms.progress.value = value;\n        },\n      },\n    });\n\n    this.setValues(params);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TracksMesh.html":{"url":"classes/TracksMesh.html","title":"class - TracksMesh","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TracksMesh\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/tracks.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom mesh for tracks.\n\n            \n\n            \n                Extends\n            \n            \n                    BufferGeometry\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _attributes\n                            \n                            \n                                colors\n                            \n                            \n                                counter\n                            \n                            \n                                indices_array\n                            \n                            \n                                next\n                            \n                            \n                                next_track_id\n                            \n                            \n                                positions\n                            \n                            \n                                previous\n                            \n                            \n                                side\n                            \n                            \n                                track_id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addTrack\n                            \n                            \n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/objects/tracks.ts:35\n                            \n                        \n\n                \n                    \n                            Create the tracks mesh.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _attributes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:35\n                        \n                    \n\n            \n                \n                    Attributes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:25\n                        \n                    \n\n            \n                \n                    Colors.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:27\n                        \n                    \n\n            \n                \n                    Counter.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        indices_array\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:33\n                        \n                    \n\n            \n                \n                    Indices.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:23\n                        \n                    \n\n            \n                \n                    Next.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next_track_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:17\n                        \n                    \n\n            \n                \n                    ID of the next track.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        positions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:19\n                        \n                    \n\n            \n                \n                    Positions.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        previous\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:21\n                        \n                    \n\n            \n                \n                    Previous.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        side\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:31\n                        \n                    \n\n            \n                \n                    Side.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        track_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:29\n                        \n                    \n\n            \n                \n                    Track ID.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addTrack\n                        \n                    \n                \n            \n            \n                \naddTrack(points: Vector3[], color: ColorRepresentation)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/tracks.ts:60\n                \n            \n\n\n            \n                \n                    Add a track to the tracks mesh.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    points\n                                    \n                                            Vector3[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Points for constructing the track.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                            ColorRepresentation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        ID of the track.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        process\n                        \n                    \n                \n            \n            \n                \nprocess()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/tracks.ts:102\n                \n            \n\n\n            \n                \n                    Process the track mesh.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BufferGeometry,\n  BufferAttribute,\n  ShaderMaterial,\n  ShaderChunk,\n  Vector2,\n  Vector3,\n  Color,\n  ColorRepresentation,\n} from 'three';\n\n/**\n * Custom mesh for tracks.\n */\nexport class TracksMesh extends BufferGeometry {\n  /** ID of the next track. */\n  next_track_id: number;\n  /** Positions. */\n  positions: number[];\n  /** Previous. */\n  previous: number[];\n  /** Next. */\n  next: number[];\n  /** Colors. */\n  colors: number[];\n  /** Counter. */\n  counter: number[];\n  /** Track ID. */\n  track_id: any[];\n  /** Side. */\n  side: any[];\n  /** Indices. */\n  indices_array: any[];\n  /** Attributes. */\n  _attributes: any;\n\n  /**\n   * Create the tracks mesh.\n   */\n  constructor() {\n    super();\n    this.type = 'TracksMesh';\n    this.positions = [];\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.counter = [];\n    this.track_id = [];\n    this.colors = [];\n    this.indices_array = [];\n    this.next_track_id = 0;\n  }\n\n  /**\n   * Add a track to the tracks mesh.\n   * @param points Points for constructing the track.\n   * @param color Color of the track.\n   * @returns ID of the track.\n   */\n  addTrack(points: Vector3[], color: ColorRepresentation) {\n    const id = this.next_track_id++;\n\n    const col = new Color(color);\n\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n\n    for (let i = 0; i  0) {\n        this.next.push(p.x, p.y, p.z);\n        this.next.push(p.x, p.y, p.z);\n      }\n    }\n\n    const i = points.length - 1;\n    this.next.push(points[i].x, points[i].y, points[i].z);\n    this.next.push(points[i].x, points[i].y, points[i].z);\n\n    //this.process()\n    return id;\n  }\n\n  /**\n   * Process the track mesh.\n   */\n  process() {\n    if (\n      !this._attributes ||\n      this._attributes.position.count !== this.positions.length\n    ) {\n      this._attributes = {\n        position: new BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new BufferAttribute(new Float32Array(this.previous), 3),\n        next: new BufferAttribute(new Float32Array(this.next), 3),\n        side: new BufferAttribute(new Float32Array(this.side), 1),\n        track_id: new BufferAttribute(new Int32Array(this.track_id), 1),\n        color: new BufferAttribute(new Float32Array(this.colors), 3),\n        counter: new BufferAttribute(new Float32Array(this.counter), 1),\n        index: new BufferAttribute(new Uint32Array(this.indices_array), 1),\n      };\n    } else {\n      (this._attributes.position as BufferAttribute).copyArray(\n        new Float32Array(this.positions)\n      );\n      this._attributes.position.needsUpdate = true;\n      (this._attributes.previous as BufferAttribute).copyArray(\n        new Float32Array(this.previous)\n      );\n      this._attributes.previous.needsUpdate = true;\n      (this._attributes.next as BufferAttribute).copyArray(\n        new Float32Array(this.next)\n      );\n      this._attributes.next.needsUpdate = true;\n      (this._attributes.side as BufferAttribute).copyArray(\n        new Float32Array(this.side)\n      );\n      this._attributes.side.needsUpdate = true;\n      (this._attributes.track_id as BufferAttribute).copyArray(\n        new Int32Array(this.track_id)\n      );\n      this._attributes.track_id.needsUpdate = true;\n      (this._attributes.color as BufferAttribute).copyArray(\n        new Float32Array(this.colors)\n      );\n      this._attributes.color.needsUpdate = true;\n      (this._attributes.counter as BufferAttribute).copyArray(\n        new Float32Array(this.counter)\n      );\n      this._attributes.counter.needsUpdate = true;\n      (this._attributes.index as BufferAttribute).copyArray(\n        new Uint32Array(this.indices_array)\n      );\n      this._attributes.index.needsUpdate = true;\n    }\n\n    this.setAttribute('position', this._attributes.position);\n    this.setAttribute('previous', this._attributes.previous);\n    this.setAttribute('next', this._attributes.next);\n    this.setAttribute('side', this._attributes.side);\n    this.setAttribute('track_id', this._attributes.track_id);\n    this.setAttribute('color', this._attributes.color);\n    this.setAttribute('counter', this._attributes.counter);\n\n    this.setIndex(this._attributes.index as BufferAttribute);\n\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n}\n\n/** Custom vertex shader for tracks. */\nShaderChunk['tracks_vert'] = [\n  'attribute vec3 previous;',\n  'attribute vec3 next;',\n  'attribute int track_id;',\n  'attribute float side;',\n  'attribute vec3 color;',\n  'attribute float counter;',\n\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n\n  'uniform vec2 resolution;',\n  'uniform float lineWidth;',\n  'void main() {',\n  '  vec2 aspect = vec2(resolution.x / resolution.y, 1.0);',\n  '',\n  '  v_color = color;',\n  '  v_counter = counter;',\n  '  v_track_id = track_id;',\n  '',\n  '  mat4 m = projectionMatrix * modelViewMatrix;',\n  '  vec4 finalPosition = m * vec4(position, 1.0);',\n  '  vec4 prevPos = m * vec4(previous, 1.0);',\n  '  vec4 nextPos = m * vec4(next, 1.0);',\n  '',\n  '  vec2 curP = finalPosition.xy / finalPosition.w * aspect;',\n  '  vec2 prevP = prevPos.xy / prevPos.w * aspect;',\n  '  vec2 nextP = nextPos.xy / nextPos.w * aspect;',\n  '',\n  '  vec2 dir;',\n  '  if (curP == prevP) dir = normalize(nextP - curP);',\n  '  else if (curP == nextP) dir = normalize(curP - prevP);',\n  '  else dir = normalize(curP - prevP);',\n  '',\n  '  vec2 normal = vec2(-dir.y, dir.x);',\n  '  normal.xy *= .5 * lineWidth;',\n  '  normal.x /= aspect.x;',\n  '  normal.xy *= finalPosition.w * 0.001;',\n\n  '  finalPosition.xy += normal.xy * side;',\n  '  gl_Position = finalPosition;',\n  '}',\n].join('\\n');\n\n/** Custom fragment shadre for track. */\nShaderChunk['tracks_frag'] = [\n  'uniform float progress;',\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n  'void main() {',\n  '  if (v_counter > progress) discard;',\n  '  gl_FragColor = vec4(v_color, 1.0);',\n  '}',\n].join('\\n');\n\n/**\n * Custom material for the tracks.\n */\nexport class TracksMaterial extends ShaderMaterial {\n  /** If the material is of track. */\n  isTracksMaterial: boolean;\n\n  /**\n   * Create the tracks material.\n   * @param params Params for creating the tracks material.\n   */\n  constructor(params) {\n    super({\n      uniforms: Object.assign(\n        {},\n        {\n          lineWidth: { value: 1 },\n          resolution: { value: new Vector2(1, 1) },\n          progress: { value: 1 },\n        }\n      ),\n      vertexShader: ShaderChunk.tracks_vert,\n      fragmentShader: ShaderChunk.tracks_frag,\n    });\n    this.isTracksMaterial = true;\n    this.type = 'TracksMaterial';\n\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.lineWidth.value;\n        },\n        set: function (value) {\n          this.uniforms.lineWidth.value = value;\n        },\n      },\n      resolution: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.resolution.value;\n        },\n        set: function (value) {\n          this.uniforms.resolution.value.copy(value);\n        },\n      },\n      progress: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.progress.value;\n        },\n        set: function (value) {\n          this.uniforms.progress.value = value;\n        },\n      },\n    });\n\n    this.setValues(params);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/URLOptionsManager.html":{"url":"classes/URLOptionsManager.html","title":"class - URLOptionsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  URLOptionsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/url-options-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A manager for managing options given through URL.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                urlOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applyEmbedOption\n                            \n                            \n                                    Public\n                                applyEventOptions\n                            \n                            \n                                    Public\n                                applyHideWidgetsOptions\n                            \n                            \n                                    Public\n                                applyOptions\n                            \n                            \n                                    Public\n                                getURLOptions\n                            \n                            \n                                    Private\n                                    Async\n                                handleJiveXMLEvent\n                            \n                            \n                                    Private\n                                    Async\n                                handleJSONEvent\n                            \n                            \n                                    Private\n                                    Async\n                                handleZipFileEvents\n                            \n                            \n                                    Private\n                                hideIdsWithURLOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventDisplay: EventDisplay, configuration: Configuration)\n                    \n                \n                        \n                            \n                                Defined in src/managers/url-options-manager.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor for the URL options manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        eventDisplay\n                                                  \n                                                        \n                                                                        EventDisplay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Phoenix event display.\n\n                                                        \n                                                \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        Configuration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Configuration of the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        urlOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     URLSearchParams\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/url-options-manager.ts:24\n                        \n                    \n\n            \n                \n                    Variable containing all URL search parameters.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyEmbedOption\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyEmbedOption()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:227\n                \n            \n\n\n            \n                \n                    Hide all overlay widgets and enable embed menu if \"hideWidgets\" option from the URL is true.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyEventOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyEventOptions(defaultEventPath?: string, defaultEventType?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:59\n                \n            \n\n\n            \n                \n                    Initialize the event display with event data and configuration from URL.\n(Only JiveXML and JSON)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    defaultEventPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event path to fallback to if none in URL.\n\n                                    \n                                \n                                \n                                    defaultEventType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event type to fallback to if none in URL.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyHideWidgetsOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyHideWidgetsOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:209\n                \n            \n\n\n            \n                \n                    Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        applyOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:43\n                \n            \n\n\n            \n                \n                    Initialize and apply all URL options on page load.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getURLOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getURLOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:268\n                \n            \n\n\n            \n                \n                    Get options from URL set through query parameters.\n\n\n                    \n                    \n                    \n                        Returns :     URLSearchParams\n\n                    \n                    \n                        URL options.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        handleJiveXMLEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleJiveXMLEvent(fileURL: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:143\n                \n            \n\n\n            \n                \n                    Handle JiveXML event from file URL.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fileURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        URL to the XML file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An empty promise. ;(\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        handleJSONEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleJSONEvent(fileURL: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:158\n                \n            \n\n\n            \n                \n                    Handle JSON event from file URL.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fileURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        URL to the JSON file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An empty promise. ;(\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        handleZipFileEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleZipFileEvents(fileURL: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:169\n                \n            \n\n\n            \n                \n                    Handle zip containing event data files.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    fileURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        URL to the zip file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An empty promise. ;(\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        hideIdsWithURLOption\n                        \n                    \n                \n            \n            \n                \n                    \n                    hideIdsWithURLOption(urlOptionWithIds: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:252\n                \n            \n\n\n            \n                \n                    Hide element with IDs based on a URL option.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    urlOptionWithIds\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        IDs to hide with keys as the URL option and its array value as IDs.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JiveXMLLoader } from '../loaders/jivexml-loader';\nimport { PhoenixLoader } from '../loaders/phoenix-loader';\nimport { Configuration } from '../lib/types/configuration';\nimport { EventDisplay } from '../event-display';\nimport { StateManager } from './state-manager';\nimport { readZipFile } from '../helpers/zip';\n\n/**\n * Model for Phoenix URL options.\n */\nexport const phoenixURLOptions = {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n  embed: false,\n};\n\n/**\n * A manager for managing options given through URL.\n */\nexport class URLOptionsManager {\n  /** Variable containing all URL search parameters. */\n  private urlOptions: URLSearchParams;\n\n  /**\n   * Constructor for the URL options manager.\n   * @param eventDisplay The Phoenix event display.\n   * @param configuration Configuration of the event display.\n   */\n  constructor(\n    private eventDisplay: EventDisplay,\n    private configuration: Configuration\n  ) {\n    this.urlOptions = new URLSearchParams(\n      window.location.href.substr(window.location.href.lastIndexOf('?'))\n    );\n  }\n\n  /**\n   * Initialize and apply all URL options on page load.\n   */\n  public applyOptions() {\n    // Initialize event with data from URL if there is any\n    this.applyEventOptions(\n      this.configuration.defaultEventFile?.eventFile,\n      this.configuration.defaultEventFile?.eventType\n    );\n    this.applyHideWidgetsOptions();\n    this.applyEmbedOption();\n  }\n\n  /**\n   * Initialize the event display with event data and configuration from URL.\n   * (Only JiveXML and JSON)\n   * @param defaultEventPath Default event path to fallback to if none in URL.\n   * @param defaultEventType Default event type to fallback to if none in URL.\n   */\n  public applyEventOptions(\n    defaultEventPath?: string,\n    defaultEventType?: string\n  ) {\n    if (!('fetch' in window)) {\n      return;\n    }\n\n    let file: string, type: string;\n\n    if (\n      (!this.urlOptions.get('file') && this.urlOptions.get('type')) ||\n      (this.urlOptions.get('file') && !this.urlOptions.get('type'))\n    ) {\n      console.log(\n        'WARNING - if you set one of type or file, then you need to set both!'\n      );\n      console.log('WARNING - reverting to defaults!');\n    }\n\n    if (!this.urlOptions.get('file') || !this.urlOptions.get('type')) {\n      console.log('Setting and config from defaults');\n      file = defaultEventPath;\n      type = defaultEventType;\n    } else {\n      console.log('Setting and config from urlOptions');\n      file = this.urlOptions.get('file');\n      type = this.urlOptions.get('type').toLowerCase();\n    }\n\n    console.log('Loading ', file, 'of type', type);\n    // Load config from URL\n    const loadConfig = () => {\n      if (this.urlOptions.get('config')) {\n        this.eventDisplay.getLoadingManager().addLoadableItem('url_config');\n        fetch(this.urlOptions.get('config'))\n          .then((res) => res.json())\n          .then((jsonState) => {\n            const stateManager = new StateManager();\n            stateManager.loadStateFromJSON(jsonState);\n          })\n          .finally(() => {\n            this.eventDisplay.getLoadingManager().itemLoaded('url_config');\n          });\n      }\n    };\n\n    const processEventFile = (fileURL: string) => {\n      if (type === 'jivexml') {\n        console.log('Opening JiveXML');\n        return this.handleJiveXMLEvent(fileURL);\n      } else if (type === 'zip') {\n        console.log('Opening zip file');\n        return this.handleZipFileEvents(fileURL);\n      } else {\n        return this.handleJSONEvent(fileURL);\n      }\n    };\n\n    // Load event file from URL\n    if (file && type) {\n      this.eventDisplay.getLoadingManager().addLoadableItem('url_event');\n      processEventFile(file)\n        .catch((error) => {\n          this.eventDisplay\n            .getInfoLogger()\n            .add('Could not find the file specified in URL.', 'Error');\n          console.error('Could not find the file specified in URL.', error);\n        })\n        .finally(() => {\n          // Load config from URL after loading the event\n          loadConfig();\n          this.eventDisplay.getLoadingManager().itemLoaded('url_event');\n        });\n    } else {\n      loadConfig();\n    }\n  }\n\n  /**\n   * Handle JiveXML event from file URL.\n   * @param fileURL URL to the XML file.\n   * @returns An empty promise. ;(\n   */\n  private async handleJiveXMLEvent(fileURL: string) {\n    const fileData = await (await fetch(fileURL)).text();\n    const loader = new JiveXMLLoader();\n    this.configuration.eventDataLoader = loader;\n    // Parse the XML to extract events and their data\n    loader.process(fileData);\n    const eventData = loader.getEventData();\n    this.eventDisplay.buildEventDataFromJSON(eventData);\n  }\n\n  /**\n   * Handle JSON event from file URL.\n   * @param fileURL URL to the JSON file.\n   * @returns An empty promise. ;(\n   */\n  private async handleJSONEvent(fileURL: string) {\n    const fileData = await (await fetch(fileURL)).json();\n    this.configuration.eventDataLoader = new PhoenixLoader();\n    this.eventDisplay.parsePhoenixEvents(fileData);\n  }\n\n  /**\n   * Handle zip containing event data files.\n   * @param fileURL URL to the zip file.\n   * @returns An empty promise. ;(\n   */\n  private async handleZipFileEvents(fileURL: string) {\n    const fileBuffer = await (await fetch(fileURL)).arrayBuffer();\n    const allEventsObject = {};\n    let filesWithData: { [fileName: string]: string };\n\n    // Using a try catch block to catch any errors in Promises\n    try {\n      filesWithData = await readZipFile(fileBuffer);\n    } catch (error) {\n      console.error('Error while reading zip', error);\n      this.eventDisplay.getInfoLogger().add('Could not read zip file', 'Error');\n      return;\n    }\n\n    // JSON event data\n    Object.keys(filesWithData)\n      .filter((fileName) => fileName.endsWith('.json'))\n      .forEach((fileName) => {\n        Object.assign(allEventsObject, JSON.parse(filesWithData[fileName]));\n      });\n\n    // JiveXML event data\n    const jiveloader = new JiveXMLLoader();\n    Object.keys(filesWithData)\n      .filter((fileName) => {\n        return fileName.endsWith('.xml') || fileName.startsWith('JiveXML');\n      })\n      .forEach((fileName) => {\n        jiveloader.process(filesWithData[fileName]);\n        const eventData = jiveloader.getEventData();\n        Object.assign(allEventsObject, { [fileName]: eventData });\n      });\n    // For some reason the above doesn't pick up JiveXML_XXX_YYY.zip\n\n    this.eventDisplay.parsePhoenixEvents(allEventsObject);\n  }\n\n  /**\n   * Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n   */\n  public applyHideWidgetsOptions() {\n    const hideWidgetsOptions = {\n      hideWidgets: [\n        'mainLogo', // Main logo\n        'uiMenu', // UI menu\n        'experimentInfo', // Experiment info\n        'phoenixMenu', // Phoenix menu\n        'statsElement', // Stats at the bottom left\n        'gui', // dat.GUI menu\n      ],\n    };\n\n    this.hideIdsWithURLOption(hideWidgetsOptions);\n  }\n\n  /**\n   * Hide all overlay widgets and enable embed menu if \"hideWidgets\" option from the URL is true.\n   */\n  public applyEmbedOption() {\n    if (this.urlOptions.get('embed') === 'true') {\n      const hideWidgetsOptions = {\n        embed: [\n          'mainLogo', // Main logo\n          'uiMenu', // UI menu\n          'experimentInfo', // Experiment info\n          'phoenixMenu', // Phoenix menu\n          'statsElement', // Stats at the bottom left\n          'gui', // dat.GUI menu\n        ],\n      };\n\n      this.hideIdsWithURLOption(hideWidgetsOptions);\n\n      document\n        .getElementById('embedMenu')\n        ?.style.setProperty('display', 'block');\n    }\n  }\n\n  /**\n   * Hide element with IDs based on a URL option.\n   * @param urlOptionWithIds IDs to hide with keys as the URL option and its array value as IDs.\n   */\n  private hideIdsWithURLOption(urlOptionWithIds: { [key: string]: string[] }) {\n    Object.entries(urlOptionWithIds).forEach(([urlOption, idsToHide]) => {\n      if (this.urlOptions.get(urlOption) === 'true') {\n        idsToHide.forEach((singleId) => {\n          document\n            .getElementById(singleId)\n            ?.style.setProperty('display', 'none');\n        });\n      }\n    });\n  }\n\n  /**\n   * Get options from URL set through query parameters.\n   * @returns URL options.\n   */\n  public getURLOptions() {\n    return this.urlOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VRManager.html":{"url":"classes/VRManager.html","title":"class - VRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/xr/vr-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                VR manager for VR related operations.\n\n            \n\n            \n                Extends\n            \n            \n                        XRManager\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                controller1\n                            \n                            \n                                    Private\n                                controller2\n                            \n                            \n                                    Private\n                                controllerGrip1\n                            \n                            \n                                    Private\n                                controllerGrip2\n                            \n                            \n                                    Private\n                                onControllerSelectEnd\n                            \n                            \n                                    Private\n                                onControllerSelectStart\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                moveInDirection\n                            \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Private\n                                setupVRControls\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:28\n                            \n                        \n\n                \n                    \n                            Create the VR manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controller1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:17\n                        \n                    \n\n            \n                \n                    The VR controller for movement.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controller2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:19\n                        \n                    \n\n            \n                \n                    The VR controller for movement.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controllerGrip1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:21\n                        \n                    \n\n            \n                \n                    The VR controller representation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controllerGrip2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:23\n                        \n                    \n\n            \n                \n                    The VR controller representation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onControllerSelectEnd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:28\n                        \n                    \n\n            \n                \n                    Listener for when the \"Select Start\" button is released.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onControllerSelectStart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:26\n                        \n                    \n\n            \n                \n                    Listener for when the \"Select Start\" button is pushed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        SESSION_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'immersive-vr'\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:15\n                        \n                    \n\n            \n                \n                    Session type to use for VR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:36\n\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:32\n\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:34\n\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:30\n\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:28\n\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:26\n\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:38\n\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        moveInDirection\n                        \n                    \n                \n            \n            \n                \n                    \n                    moveInDirection(direction: Vector3, stepDistance: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/vr-manager.ts:149\n                \n            \n\n\n            \n                \n                    Move the camera in the given direction.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Direction to move towards.\n\n                                    \n                                \n                                \n                                    stepDistance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Distance to move by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionEnded()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:61\n\n                \n            \n\n\n            \n                \n                    Callback when the VR session ends.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        setupVRControls\n                        \n                    \n                \n            \n            \n                \n                    \n                    setupVRControls()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/vr-manager.ts:77\n                \n            \n\n\n            \n                \n                    Set up VR controls for moving around the event display.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:48\n\n                \n            \n\n\n            \n                \n                    Set and configure the VR session.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the VR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    endXRSession()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:99\n\n                \n            \n\n\n            \n                \n                    End the current XR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:109\n\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for XR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in XR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                    \n                    getXRCamera()\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:135\n\n                \n            \n\n\n            \n                \n                    Get the camera used by XR.\n\n\n                    \n                    \n                    \n                        Returns :     Camera\n\n                    \n                    \n                        The camera used by XR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n            \n                \n                    Inherited from         XRManager\n\n                \n            \n            \n                \n                        Defined in         XRManager:78\n\n                \n            \n\n\n            \n                \n                    Callback for when the XR session is started.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The XR session.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Vector3, BufferGeometry, Line } from 'three';\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';\nimport { XRManager, XRSessionType } from './xr-manager';\n\n// NOTE: This was created on 29/08/2020\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 20/06/2021\n\n/**\n * VR manager for VR related operations.\n */\nexport class VRManager extends XRManager {\n  /** Session type to use for VR. */\n  static readonly SESSION_TYPE: string = 'immersive-vr';\n  /** The VR controller for movement. */\n  private controller1: any;\n  /** The VR controller for movement. */\n  private controller2: any;\n  /** The VR controller representation */\n  private controllerGrip1: any;\n  /** The VR controller representation */\n  private controllerGrip2: any;\n\n  /** Listener for when the \"Select Start\" button is pushed. */\n  private onControllerSelectStart: () => void;\n  /** Listener for when the \"Select Start\" button is released. */\n  private onControllerSelectEnd: () => void;\n\n  /**\n   * Create the VR manager.\n   * @override\n   */\n  constructor() {\n    super(XRSessionType.VR);\n    this.sessionInit = () => ({\n      optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking'],\n    });\n  }\n\n  /**\n   * Set and configure the VR session.\n   * @param renderer Renderer to set the VR session for.\n   * @param onSessionStarted Callback to call when the VR session starts.\n   * @param onSessionEnded Callback to call when the VR session ends.\n   * @override\n   */\n  public setXRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void\n  ) {\n    super.setXRSession(renderer, onSessionStarted, onSessionEnded);\n    this.setupVRControls();\n  }\n\n  /**\n   * Callback when the VR session ends.\n   * @override\n   */\n  protected onXRSessionEnded() {\n    super.onXRSessionEnded();\n\n    this.controller1?.removeEventListener(\n      'selectstart',\n      this.onControllerSelectStart\n    );\n    this.controller1?.removeEventListener(\n      'selectend',\n      this.onControllerSelectEnd\n    );\n  }\n\n  /**\n   * Set up VR controls for moving around the event display.\n   */\n  private setupVRControls() {\n    // Get the controllers\n    this.controller1 = this.renderer.xr.getController(0);\n    this.getCameraGroup().add(this.controller1);\n    this.controller2 = this.renderer.xr.getController(1);\n    this.getCameraGroup().add(this.controller2);\n\n    const controllerModelFactory = new XRControllerModelFactory();\n    this.controllerGrip1 = this.renderer.xr.getControllerGrip(0);\n    this.controllerGrip1.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip1)\n    );\n    this.getCameraGroup().add(this.controllerGrip1);\n\n    this.controllerGrip2 = this.renderer.xr.getControllerGrip(1);\n    this.controllerGrip2.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip2)\n    );\n    this.getCameraGroup().add(this.controllerGrip2);\n\n    const geometry = new BufferGeometry().setFromPoints([\n      new Vector3(0, 0, 0),\n      new Vector3(0, 0, -1),\n    ]);\n\n    const line = new Line(geometry);\n    line.name = 'line';\n    line.scale.z = 50;\n\n    this.controller1.add(line.clone());\n    this.controller2.add(line.clone());\n\n    // Set up movement\n\n    // Distance for a single step\n    const stepDistance = 30;\n    // Unit vector in camera direction\n    const direction = new Vector3();\n    // Interval ID for the movement interval\n    let intervalId: NodeJS.Timeout;\n\n    this.onControllerSelectStart = () => {\n      console.log(\n        'Select: c1 position ' + this.controller1.position.toArray().join(', ')\n      );\n      console.log(\n        'Select: CG position ' + this.cameraGroup.position.toArray().join(', ')\n      );\n\n      // Start movement in camera direction\n      intervalId = setInterval(() => {\n        this.moveInDirection(direction, stepDistance);\n      }, 20);\n    };\n\n    this.onControllerSelectEnd = () => {\n      // Stop the movement\n      clearInterval(intervalId);\n    };\n\n    this.controller1.addEventListener(\n      'selectstart',\n      this.onControllerSelectStart\n    );\n    this.controller1.addEventListener('selectend', this.onControllerSelectEnd);\n  }\n\n  /**\n   * Move the camera in the given direction.\n   * @param direction Direction to move towards.\n   * @param stepDistance Distance to move by.\n   */\n  private moveInDirection(direction: Vector3, stepDistance: number) {\n    // Get the direction the controller is facing\n    //! this.controller.getWorldDirection(direction);\n\n    // Get direction the camera is facing\n    this.xrCamera?.getWorldDirection(direction);\n\n    // Move the camera in the given direction\n    this.cameraGroup.position.addScaledVector(direction, stepDistance);\n    this.xrCamera.position.addScaledVector(direction, stepDistance);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-display.ts\n        \n\n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            EventDisplay\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { httpRequest } from 'jsroot';\nimport { settings as jsrootSettings } from 'jsroot';\nimport { build } from 'jsroot/geom';\nimport { openFile } from 'jsroot/io';\nimport { ThreeManager } from './managers/three-manager';\nimport { UIManager } from './managers/ui-manager';\nimport { InfoLogger } from './helpers/info-logger';\nimport { Configuration } from './lib/types/configuration';\nimport { StateManager } from './managers/state-manager';\nimport { LoadingManager } from './managers/loading-manager';\nimport { URLOptionsManager } from './managers/url-options-manager';\nimport { ActiveVariable } from './helpers/active-variable';\nimport { AnimationPreset } from './managers/three-manager/animations-manager';\nimport { XRSessionType } from './managers/three-manager/xr/xr-manager';\nimport { getLabelTitle } from './helpers/labels';\nimport { PhoenixLoader } from './loaders/phoenix-loader';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Phoenix event display class for managing detector geometries and event data.\n */\nexport class EventDisplay {\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n  /** Three manager for three.js operations. */\n  private graphicsLibrary: ThreeManager;\n  /** Info logger for storing event display logs. */\n  private infoLogger: InfoLogger;\n  /** UI manager for UI menu. */\n  private ui: UIManager;\n  /** Loading manager for loadable resources */\n  private loadingManager: LoadingManager;\n  /** State manager for managing event display state. */\n  private stateManager: StateManager;\n  /** URL manager for managing options given through URL. */\n  private urlOptionsManager: URLOptionsManager;\n\n  /**\n   * Create the Phoenix event display and intitialize all the elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  constructor(configuration?: Configuration) {\n    this.loadingManager = new LoadingManager();\n    this.infoLogger = new InfoLogger();\n    this.graphicsLibrary = new ThreeManager(this.infoLogger);\n    this.ui = new UIManager(this.graphicsLibrary);\n    if (configuration) {\n      this.init(configuration);\n    }\n  }\n\n  /**\n   * Initialize all the Phoenix event display elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n\n    // Initialize the three manager with configuration\n    this.graphicsLibrary.init(configuration);\n    // Initialize the UI with configuration\n    this.ui.init(configuration);\n    // Set up for the state manager\n    this.getStateManager().setEventDisplay(this);\n\n    // Animate loop\n    const uiLoop = () => {\n      this.ui.updateUI();\n    };\n    this.graphicsLibrary.setAnimationLoop(uiLoop);\n\n    // Process and apply URL options\n    this.urlOptionsManager = new URLOptionsManager(this, configuration);\n    if (configuration.allowUrlOptions !== false) {\n      this.urlOptionsManager.applyOptions();\n    }\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n    // Allow keyboard controls\n    this.enableKeyboardControls();\n  }\n\n  /**\n   * Takes a screen shot of the current view\n   * @param width the width of the picture to be created\n   * @param height the height of the picture to be created\n   * @param fitting the type of fitting to use in case width and height\n   * ratio do not match the current screen ratio. Posible values are\n   *    - Crop : current view is cropped on both side or up and done to fit ratio\n   *             thus it is not stretched, but some parts are lost\n   *    - Stretch : current view is stretched to given format\n   *               this is the default and used also for any other value given to fitting\n   */\n  public makeScreenShot(\n    width: number,\n    height: number,\n    fitting: string = 'Stretch'\n  ) {\n    this.graphicsLibrary.makeScreenShot(width, height, fitting);\n  }\n\n  /**\n   * Initialize XR.\n   * @param xrSessionType Type of the XR session. Either AR or VR.\n   * @param onSessionEnded Callback when the XR session ends.\n   */\n  public initXR(xrSessionType: XRSessionType, onSessionEnded?: () => void) {\n    this.graphicsLibrary.initXRSession(xrSessionType, onSessionEnded);\n  }\n\n  /**\n   * End VR and remove VR settings.\n   * @param xrSessionType Type of the XR session. Either AR or VR.\n   */\n  public endXR(xrSessionType: XRSessionType) {\n    this.graphicsLibrary.endXRSession(xrSessionType);\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    if (typeof this.configuration.eventDataLoader === 'undefined') {\n      this.configuration.eventDataLoader = new PhoenixLoader();\n    }\n    const eventKeys =\n      this.configuration.eventDataLoader.getEventsList(eventsData);\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach((callback) => callback(eventKeys));\n\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Reset labels\n    this.resetLabels();\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    this.ui.addLabelsFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.eventDataLoader.buildEventData(\n      eventData,\n      this.graphicsLibrary,\n      this.ui,\n      this.infoLogger\n    );\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n    // Reload the event data state in Phoenix menu\n    this.ui.loadEventFolderPhoenixMenuState();\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  /**\n   * Get the three manager responsible for three.js functions.\n   * @returns The three.js manager.\n   */\n  public getThreeManager() {\n    return this.graphicsLibrary;\n  }\n\n  /**\n   * Get the UI manager responsible for UI related functions.\n   * @returns The UI manager.\n   */\n  public getUIManager() {\n    return this.ui;\n  }\n\n  /**\n   * Get the info logger containing event display logs.\n   * @returns The info logger instance being used by the event display.\n   */\n  public getInfoLogger() {\n    return this.infoLogger;\n  }\n\n  /**\n   * Get the loading manager for managing loadable items.\n   * @returns The loading manager.\n   */\n  public getLoadingManager() {\n    return this.loadingManager;\n  }\n\n  /**\n   * Get the state manager that manages event display's state.\n   * @returns The state manager.\n   */\n  public getStateManager() {\n    if (!this.stateManager) {\n      this.stateManager = new StateManager();\n    }\n\n    return this.stateManager;\n  }\n\n  /**\n   * Get the URL options manager that manages options given through URL.\n   * @returns The URL options manager.\n   */\n  public getURLOptionsManager() {\n    return this.urlOptionsManager;\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param doubleSided If true, render both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   * @param setFlat Whether object should be flat-shaded or not. Default `true`.\n   * @returns Promise for loading the geometry.\n   */\n  public async loadOBJGeometry(\n    filename: string,\n    name: string,\n    color: any,\n    menuNodeName?: string,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n    setFlat: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`obj_geom_${name}`);\n\n    const { object } = await this.graphicsLibrary.loadOBJGeometry(\n      filename,\n      name,\n      color,\n      doubleSided,\n      initiallyVisible,\n      setFlat\n    );\n    this.ui.addGeometry(object, menuNodeName);\n\n    this.loadingManager.itemLoaded(`obj_geom_${name}`);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   */\n  public parseOBJGeometry(\n    content: string,\n    name: string,\n    menuNodeName?: string,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem(`parse_obj_${name}`);\n    const { object } = this.graphicsLibrary.parseOBJGeometry(\n      content,\n      name,\n      initiallyVisible\n    );\n    this.ui.addGeometry(object, menuNodeName);\n    this.loadingManager.itemLoaded(`parse_obj_${name}`);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   * @returns Promise for loading the geometry.\n   */\n  public async parsePhoenixDisplay(input: any): Promise {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      this.ui.addLabelsFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n\n      this.loadingManager.addLoadableItem(`parse_phnx_${name}`);\n      await this.graphicsLibrary.parsePhnxScene(phoenixScene.scene);\n      this.loadingManager.itemLoaded(`parse_phnx_${name}`);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input Data of the GLTF (.gltf) file.\n   * @param name Name given to the geometry. If empty Name will be taken from the geometry itself\n   * @returns Promise for loading the geometry.\n   */\n  public async parseGLTFGeometry(\n    input: string | ArrayBuffer,\n    name: string\n  ): Promise {\n    this.loadingManager.addLoadableItem(`parse_gltf_${name}`);\n\n    const allGeometriesUIParameters =\n      await this.graphicsLibrary.parseGLTFGeometry(input, name);\n    for (const { object } of allGeometriesUIParameters) {\n      this.ui.addGeometry(object);\n    }\n\n    this.loadingManager.itemLoaded(`parse_gltf_${name}`);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   * @returns Promise for loading the geometry.\n   */\n  public async loadGLTFGeometry(\n    url: any,\n    name: string | undefined,\n    menuNodeName?: string,\n    scale?: number,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`gltf_geom_${name}`);\n\n    const allGeometriesUIParameters =\n      await this.graphicsLibrary.loadGLTFGeometry(\n        url,\n        name,\n        menuNodeName,\n        scale,\n        initiallyVisible\n      );\n    for (const { object, menuNodeName } of allGeometriesUIParameters) {\n      this.ui.addGeometry(object, menuNodeName);\n    }\n\n    this.loadingManager.itemLoaded(`gltf_geom_${name}`);\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   * @returns Promise for loading the geometry.\n   */\n  public async loadJSONGeometry(\n    json: string | { [key: string]: any },\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`json_geom_${name}`);\n\n    const { object } = await this.graphicsLibrary.loadJSONGeometry(\n      json,\n      name,\n      scale,\n      doubleSided,\n      initiallyVisible\n    );\n    this.ui.addGeometry(object, menuNodeName);\n\n    this.loadingManager.itemLoaded(`json_geom_${name}`);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n  }\n\n  /**\n   * Load JSON geometry from JSRoot.\n   * @param url URL of the JSRoot geometry file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   */\n  public async loadRootJSONGeometry(\n    url: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem('root_json_geom');\n\n    const object = await httpRequest(url, 'object');\n    await this.loadJSONGeometry(\n      build(object, { dflt_colors: true }).toJSON(),\n      name,\n      menuNodeName,\n      scale,\n      doubleSided,\n      initiallyVisible\n    );\n\n    this.loadingManager.itemLoaded('root_json_geom');\n  }\n\n  /**\n   * Load ROOT geometry from JSRoot.\n   * @param url URL of the JSRoot file.\n   * @param objectName Name of the object inside the \".root\" file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   */\n  public async loadRootGeometry(\n    url: string,\n    objectName: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem('root_geom');\n    // See https://github.com/root-project/jsroot/blob/19ce116b68701ab45e0a092c673119bf97ede0c2/modules/core.mjs#L241.\n    jsrootSettings.UseStamp = false;\n\n    const file = await openFile(url);\n    const obj = await file.readObject(objectName);\n\n    await this.loadJSONGeometry(\n      build(obj, { dflt_colors: true }).toJSON(),\n      name,\n      menuNodeName,\n      scale,\n      doubleSided,\n      initiallyVisible\n    );\n\n    this.loadingManager.itemLoaded('root_geom');\n  }\n\n  /**\n   * Build Geometry from thr passed parameters, where\n   * @param parameters\n   */\n  public buildGeometryFromParameters(parameters: any): void {\n    this.graphicsLibrary.addGeometryFromParameters(parameters);\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: {\n    eventData: { [key: string]: any };\n    geometries: any[];\n  }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      this.ui.addEventDataTypeFolder(objectType);\n\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection(objectType, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.eventDataLoader.getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.eventDataLoader.getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    return this.configuration.eventDataLoader.getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (\n        filename: string,\n        name: string,\n        colour: any,\n        menuNodeName: string,\n        doubleSided: boolean\n      ) => {\n        this.loadOBJGeometry(filename, name, colour, menuNodeName, doubleSided);\n      },\n      loadJSONGeometry: (\n        json: string | { [key: string]: any },\n        name: string,\n        menuNodeName: string,\n        scale?: number,\n        doubleSided?: boolean,\n        initiallyVisible: boolean = true\n      ) => {\n        this.loadJSONGeometry(\n          json,\n          name,\n          menuNodeName,\n          scale,\n          doubleSided,\n          initiallyVisible\n        );\n      },\n      buildGeometryFromParameters: (parameters: { [key: string]: any }) =>\n        this.buildGeometryFromParameters(parameters),\n      scene: this.getThreeManager().getSceneManager().getScene(),\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string; attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   */\n  public lookAtObject(uuid: string) {\n    this.graphicsLibrary.lookAtObject(uuid);\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   */\n  public highlightObject(uuid: string) {\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Enable keyboard controls for the event display.\n   */\n  public enableKeyboardControls() {\n    this.ui.enableKeyboardControls();\n    this.graphicsLibrary.enableKeyboardControls();\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    this.graphicsLibrary.animateThroughEvent(\n      startPos,\n      tweenDuration,\n      onAnimationEnd\n    );\n  }\n\n  /**\n   * Animate scene by animating camera through the scene and animating event collision.\n   * @param animationPreset Preset for animation including positions to go through and\n   * event collision animation options.\n   * @param onEnd Function to call when the animation ends.\n   */\n  public animatePreset(animationPreset: AnimationPreset, onEnd?: () => void) {\n    this.graphicsLibrary.animatePreset(animationPreset, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Add label to a 3D object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @param uuid UUID of the three.js object.\n   */\n  public addLabelToObject(\n    label: string,\n    collection: string,\n    indexInCollection: number,\n    uuid: string\n  ) {\n    const labelId = this.configuration.eventDataLoader.addLabelToEventObject(\n      label,\n      collection,\n      indexInCollection\n    );\n\n    // Remove the label if the string is empty\n    if (!label) {\n      this.ui.removeLabel(labelId, true);\n      return;\n    }\n\n    this.ui.addLabel(labelId);\n    this.graphicsLibrary.addLabelToObject(label, uuid, labelId);\n  }\n\n  /**\n   * Reset/remove all labels.\n   */\n  public resetLabels() {\n    // labelsObject[EventDataType][Collection][Index]\n    const labelsObject = this.configuration.eventDataLoader.getLabelsObject();\n    for (const eventDataType in labelsObject) {\n      for (const collection in labelsObject[eventDataType]) {\n        for (const index in labelsObject[eventDataType][collection]) {\n          const labelId = getLabelTitle(eventDataType, collection, index);\n          this.ui.removeLabel(labelId, true);\n\n          delete labelsObject[eventDataType][collection][index];\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XRManager.html":{"url":"classes/XRManager.html","title":"class - XRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/xr/xr-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                XR manager for XR related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionType: XRSessionType)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:38\n                            \n                        \n\n                \n                    \n                            Create the XR manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sessionType\n                                                  \n                                                        \n                                                                        XRSessionType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Type of the session, either AR or VR.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:36\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:32\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:34\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:30\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:28\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:26\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:38\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    endXRSession()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/xr-manager.ts:99\n                \n            \n\n\n            \n                \n                    End the current XR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/xr-manager.ts:109\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for XR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in XR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                    \n                    getXRCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/xr-manager.ts:135\n                \n            \n\n\n            \n                \n                    Get the camera used by XR.\n\n\n                    \n                    \n                    \n                        Returns :     Camera\n\n                    \n                    \n                        The camera used by XR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionEnded()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/xr-manager.ts:88\n                \n            \n\n\n            \n                \n                    Callback when the XR session ends.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                    \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/xr-manager.ts:78\n                \n            \n\n\n            \n                \n                    Callback for when the XR session is started.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The XR session.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/three-manager/xr/xr-manager.ts:53\n                \n            \n\n\n            \n                \n                    Set and configure the XR session.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the XR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the XR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the XR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArrayCamera,\n  Camera,\n  Group,\n  PerspectiveCamera,\n  Vector3,\n  WebGLRenderer,\n} from 'three';\n\n// NOTE: This was created on 28/06/2021\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 29/06/2021\n\n/** Type of the XR session. */\nexport enum XRSessionType {\n  VR = 'VR',\n  AR = 'AR',\n}\n\n/**\n * XR manager for XR related operations.\n */\nexport class XRManager {\n  /** Whether the XR is currently active or not. */\n  protected xrActive: boolean = false;\n  /** Returns required and optional features when requesting an XR session. */\n  protected sessionInit: () => { [key: string]: any };\n  /** Renderer to set the XR session for. */\n  protected renderer: WebGLRenderer;\n  /** Currently active XR session. */\n  protected currentXRSession: any = null;\n  /** Callback to call when the XR session ends. */\n  protected onSessionEnded: () => void;\n  /** Group containing the the camera for XR. */\n  public cameraGroup: Group;\n  /** The camera used by XR. */\n  public xrCamera: Camera;\n\n  /**\n   * Create the XR manager.\n   * @param sessionType Type of the session, either AR or VR.\n   * @param sessionInit Other options for the session like optional features.\n   */\n  constructor(private sessionType: XRSessionType) {}\n\n  /**\n   * Set and configure the XR session.\n   * @param renderer Renderer to set the XR session for.\n   * @param onSessionStarted Callback to call when the XR session starts.\n   * @param onSessionEnded Callback to call when the XR session ends.\n   */\n  public setXRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void\n  ) {\n    this.renderer = renderer;\n    this.onSessionEnded = onSessionEnded;\n    const webXR = (navigator as any)?.xr;\n    const xrType = this.sessionType === XRSessionType.VR ? 'vr' : 'ar';\n\n    webXR\n      ?.requestSession(`immersive-${xrType}`, this.sessionInit?.())\n      .then((session: any) => {\n        this.onXRSessionStarted.bind(this)(session);\n        onSessionStarted?.();\n      })\n      .catch((error: any) => {\n        console.error(`${xrType.toUpperCase()} Error:`, error);\n      });\n  }\n\n  /**\n   * Callback for when the XR session is started.\n   * @param session The XR session.\n   */\n  protected async onXRSessionStarted(session: any) {\n    this.xrActive = true;\n    session.addEventListener('end', this.onXRSessionEnded.bind(this));\n    await this.renderer.xr.setSession(session);\n    this.currentXRSession = session;\n  }\n\n  /**\n   * Callback when the XR session ends.\n   */\n  protected onXRSessionEnded() {\n    this.xrActive = false;\n    this.currentXRSession.removeEventListener('end', this.onXRSessionEnded);\n    this.currentXRSession = null;\n    this.cameraGroup = undefined;\n    this.onSessionEnded?.();\n  }\n\n  /**\n   * End the current XR session.\n   */\n  public endXRSession() {\n    this.currentXRSession?.end();\n  }\n\n  /**\n   * Get the group containing the camera for XR.\n   * XR camera works by adding a Group with Camera to the scene.\n   * @param camera Camera which is to be cloned for XR use.\n   * @returns The camera group used in XR mode.\n   */\n  public getCameraGroup(camera?: Camera): Group {\n    // Set up the camera position in the XR - Adding a group with camera does it\n    if (!this.cameraGroup) {\n      this.cameraGroup = new Group();\n    }\n    if (camera && this.xrActive) {\n      this.xrCamera = this.renderer.xr\n        .getCamera()\n        .copy(new ArrayCamera([camera.clone() as PerspectiveCamera]));\n      this.xrCamera.name = 'XR_CAMERA';\n\n      const cameraPosition =\n        this.sessionType === XRSessionType.VR\n          ? this.xrCamera.position\n          : new Vector3(0, 0, 0.1);\n      this.cameraGroup.position.copy(cameraPosition);\n      this.cameraGroup.add(this.xrCamera);\n    }\n\n    return this.cameraGroup;\n  }\n\n  /**\n   * Get the camera used by XR.\n   * @returns The camera used by XR.\n   */\n  public getXRCamera() {\n    return this.xrCamera;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n2.14.0 (2023-03-22)\nNote: Version bump only for package phoenix-event-display\n2.13.0 (2023-03-02)\nReverts\n\nRevert \"Updated versions to try to reduce yarn warnings\" (477845f)\n\n2.12.0 (2023-01-13)\nBug Fixes\n\nevent-display: allowing geometry name to be undefined (9ffb5e2)\nevent-display: make side and length optional in calo cell params (448eb4f)\n\nFeatures\n\nevent-display: adding side and length variables for the calo cell/cluster (29beae7)\n\n2.11.4 (2022-10-27)\nBug Fixes\n\nevent-display: An argument for 'camera' was not provided (dcb4c88)\nlinting (f97e615)\n\n2.11.2 (2022-10-03)\nReverts\n\nRevert \"Simple angular 14 fix\" (f40beac)\nRevert \"Improve scripts after removing phoenix-event-display from phoenix-ng 'paths'\" (24ecd77)\n\n2.11.1 (2022-09-29)\nNote: Version bump only for package phoenix-event-display\n2.11.0 (2022-09-13)\nFeatures\n\napp: add e2e tests for phoenix app (69544e6)\nevent-display: add root geometry loading to loading manager (6c92e33)\nevent-display: load root geometry in io options correctly (ff77aaa)\nevent-display: remove loadJSRootScripts function from script loader (e152933)\nevent-display: update jsroot usage in JSRootEventLoader (4791f53)\nevent-display: use full path for object names to make them unique (3d1f91c)\nevent-display: use jsroot 7 to load root json geometry (5518a3e)\nevent-display: use url inside of objects for loading jsroot geometries (a54d302)\n\n2.10.0 (2022-07-21)\nBug Fixes\n\nevent-display: fixed handling of event properties (6ace2f6)\n\n2.9.0 (2022-06-17)\nBug Fixes\n\nevent-display: fix clipping angle not being applied from menu config (62bf178)\nevent-display: fix geometry not being loaded correctly in menu (7e0870b)\nevent-display: fix opacity not being set for LHCb geometry (65e657b)\n\nFeatures\n\napp: add component to periodically cycle through events (05ae1d6)\nupdate all packages (9276ef9)\napp: make sure all volumes are transparent in LHCb (7e36462)\n\n2.8.0 (2022-05-16)\nNote: Version bump only for package phoenix-event-display\n2.7.0 (2022-04-05)\nFeatures\n\napp: add object clipping for upper and lower geometry (1788560)\napp: add start clipping angle and opening angle for object clipping (9bc48e0)\napp: add start clipping angle and opening angle for object clipping (12b1754)\napp: add start clipping angle and opening angle for object clipping (4c5fac9)\napp: add start clipping angle and opening angle for object clipping (a8336ae)\napp: add start clipping angle and opening angle for object clipping (3255a65)\nevent-display: add 'start' clipping angle as well as opening angle (d2c02d5)\nevent-display: add docs to phoenix ui implementations (0c48b27)\nevent-display: add function to get event data type folder of each menu (c91aa0e)\nevent-display: add interface for Phoenix UI (aaed8f5)\nevent-display: implement phoenix-ui interface for phoenix menu (d4866ea)\nevent-display: implement PhoenixUI interface for dat.GUI menu (a4e8aaa)\nevent-display: update calls to ui-manager (473a39c)\nevent-display: update phoenix loader UI manager for PhoenixUI interface (f2376cc)\nevent-display: use generic menus in ui-manager (7a42b65)\n\n2.6.0 (2022-02-28)\nBug Fixes\n\napp: fix types in templates (545c956)\napp: use workaround for phoenix menu config types in templates (9d109e5)\n\nFeatures\n\nupdate packages (f2ed0a3)\n\n2.5.2 (2022-01-15)\nNote: Version bump only for package phoenix-event-display\n2.5.0 (2021-12-20)\nBug Fixes\n\nevent-display: fix jets disappearing on scaling to 0 (14cdc8f)\n\nFeatures\n\nupdate packages (26444f1)\nevent-display: externalize three.js dependency in webpack bundle (6a7e82f)\nevent-display: improve JiveXML loader (34a783c), closes #364\nevent-display: simplify phoenix menu node types (c60b3c1)\n\n2.4.0 (2021-10-28)\nBug Fixes\n\nevent-display: handle AR and VR permission errors (dfbc6a2)\nevent-display: update three.js imports (4e41f72)\nevent-display: use proper error handling for local storage (55cad7c)\n\nFeatures\n\nupdate all packages (c0af497)\nevent-display: remove labels on event load (75f829a)\n\n2.3.2 (2021-09-28)\nBug Fixes\n\nevent-display: remove XRSessionInit type from xr-manager (608f529)\n\n2.3.1 (2021-09-28)\nBug Fixes\n\nevent-display: add @types/three package as a dev dependency (10244f7)\n\nFeatures\n\nevent-display: function to get url options from url options manager (0ba5097)\n\n2.3.0 (2021-09-20)\nBug Fixes\n\nevent-display: do not apply Phoenix menu node toggle if undefined in config (bf98a24)\nevent-display: fix cuts not displaying for tracks in collections info (14d5f3a)\nevent-display: fix error in adding labels for electrons (98c7055)\nevent-display: fix opacity for tracks (094261c)\n\nFeatures\n\nUpgrade all packages (4698ea4)\n\n2.2.0 (2021-08-03)\nBug Fixes\n\nevent-display: fix AR not working in playground (7f35fdb)\nevent-display: fix bug in jive xml loader (39241a4)\nevent-display: fix collection color not working with load state (4603dbc)\nevent-display: fix load state throwing error (16ea0df)\nevent-display: fix tests (7e9c733)\nevent-display: increase max cut value for jets (9f4cf7c), closes #336\nevent-display: use coneR, if available, to determine jet width (d4b62c2)\nFix linting issues and update code (dc7d74a)\n\nFeatures\n\nevent-display: add option to scale vertices (08c8e00)\nevent-display: improve handling of scale option and add it for vertices (34d9b2c)\nupdate all packages including Angular (9a88331)\nupdate packages except Angular (26eff0e)\nupgrade all packages (36486b8)\napp: option to start AR with or without DOM overlay (9a6c243)\nevent-display: JiveXML, load coneR (set default if missing). (867d28a)\nevent-display: make background transparent in AR mode (46b8aee)\nevent-display: use dom overlay for AR (c897ab3)\nevent-display: use DOM overlay for AR (a5eaa34)\n\n2.1.0 (2021-06-28)\nBug Fixes\n\napp: clean packages not used in phoenix-ng (037af62)\nevent-display: bug when handling out-of-bounds theta (717304e)\nevent-display: cuts to match pT values (62ae417)\nevent-display: fix pt scale of compound objects for JiveXML (a821e42)\nevent-display: handle track pT as p (scale correctly) (7b839e3)\nevent-display: simplify handling of compound objs needing a track extrapolation (3daabc5)\nevent-display: since can scale jets, no longer limit length (bb41683)\n\nFeatures\n\nevent-display: add AR manager (3017ca9)\nevent-display: add docs to AR manager (5334996)\nevent-display: add scene to window EventDisplay object (07d8633)\nevent-display: combine repeating code for VR and AR into XR (50fc5f7)\nevent-display: create a common xr-manager (2700aaf)\nevent-display: extend ARManager from XRManager (ae76d4a)\nevent-display: extend VRManager from XRManager (15dd07c)\nevent-display: handle camera position differently for AR (5894cac)\nevent-display: refactor to make general getCompound from getMuon (dfe8e8d)\nevent-display: setup AR with event display (8e7396f)\nevent-display: use new extrapolationLimit of RKHelper and better debug output (14e4cbb)\nevent-display: use workaround to manage scale in AR (a5481e1)\nevent-display: working AR setup in event display (fdd492a)\n\n2.0.0 (2021-06-08)\nBug Fixes\n\nevent-display: add energy cut, refactor (000ab78)\nevent-display: attempt to improve robustness of tracks (689da29)\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fix collision animation (3e5d80d)\nevent-display: fix eta calculation for JiveXML (6dbd797)\nevent-display: fix phoenix menu node types (1af6ae2)\nevent-display: fix too many params for hits (8b994a7)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: persist cuts when collection is toggled (1dd0431)\nevent-display: properly display the PlanarCalorimeters (f41920b)\nevent-display: random colors for collections and fix color by vertex (303187a)\nevent-display: use line animation for line hit (df425ee)\nfix misc errors and improve styles (124a272)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\napp: improve background colors (2c97f5c)\napp: setup for preset scene animations (6e919e1)\nevent-display: add a sample animation preset (e07725a)\nevent-display: add color by vertex options (d2e0547)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add function to animate scene (a411631)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: add types for Phoenix menu configs (68f3d45)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: complete types for phoenix menu node (cc04d5a)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: improve preset animation (2371f75)\nupdate all packages (7d2eb64)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: improve color manager code (3839578)\nevent-display: only show selected color by options (3041166)\nevent-display: type changes for phoenix menu (9a79692)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\nevent-dosplay: improve processing of PlanarCaloCells in Phoenix loader (5a8fe9f)\n\n1.9.0 (2021-05-16)\nBug Fixes\n\nevent-display: add energy cut, refactor (000ab78)\nevent-display: attempt to improve robustness of tracks (689da29)\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fix eta calculation for JiveXML (6dbd797)\nevent-display: fix phoenix menu node types (1af6ae2)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: properly display the PlanarCalorimeters (f41920b)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\nevent-display: add color by vertex options (d2e0547)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: add types for Phoenix menu configs (68f3d45)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: complete types for phoenix menu node (cc04d5a)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: improve color manager code (3839578)\nevent-display: only show selected color by options (3041166)\nevent-display: type changes for phoenix menu (9a79692)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\nevent-dosplay: improve processing of PlanarCaloCells in Phoenix loader (5a8fe9f)\n\n1.8.0 (2021-05-01)\nBug Fixes\n\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\n\n1.7.0 (2021-04-21)\nBug Fixes\n\nevent-display: attempt to improve the output of the track extension by removing close hits (5bdc562)\nevent-display: fix drawing of hits (db3ca8b)\nevent-display: handle older json hit format again (edcd567)\n\n1.6.0 (2021-04-18)\nBug Fixes\n\napp: add sphericalToCartesian method (bbea6b0)\nevent-display: add back in geometrical limits for clusters (0b95e5b)\nevent-display: add eta and phi cuts for tracks (f8a0080)\nevent-display: add missing docs (c9781e5)\nevent-display: add missing documentation (236bdf4)\nevent-display: calocluster eta position was wrong. (66cbbc0)\nevent-display: cleanup JixeXML loader (6a834e8)\nevent-display: prettier fixes (7528ee0)\nevent-display: run prettier (again) (f279898)\nevent-display: use BufferGeometry for CMS objects with new three.js update (b8e88b8)\n\nFeatures\n\napp: bind clipping state with UI menu (40bbba0)\napp: complete dialog for share link and embed (50c2584)\napp: setup link share form (b10bb7a)\nevent-display: ability to remove geometry in Phoenix menu (7d90d72)\nevent-display: ability to scale CaloClusters (ff666e2)\nevent-display: add ability to scale clusters in just one direction (5a562ab), closes #257\nevent-display: add coordinate helper (57e438f)\nevent-display: add guidelines and simplify some coordinate transformations (56f94f0)\nevent-display: Add missing energy (6ef17d0)\nevent-display: add opacity and wireframe for CaloClusters (85d4a14)\nevent-display: add support for HitLines (455f536)\nevent-display: add types for dat.GUI (7632a18)\nevent-display: create an active observable variable (854e543)\nevent-display: improve grid lines (ca3cc2f)\nevent-display: improve handling of UI menus in UI manager (b7a324a)\nevent-display: introduce new URL options and improve handling them (f7cd6b4)\nevent-display: JiveXML : add support for more hit types (bbcdf0c)\nevent-display: keep state of event data folder on event switch (b52282f)\nevent-display: make Phoenix available in browser without a namespace (5389282)\nevent-display: move opacity and wireframing to collection level (6486982)\nevent-display: options for CaloClusters (68cd7ad)\nevent-display: Remove LineHits and use hits to extend tracks (30b5160)\nevent-display: restructure phoenix-event-display (2e16371)\nevent-display: separate dat.GUI UI menu (29093a2)\nevent-display: separate Phoenix menu UI from UI manager (5743adc)\nevent-display: split dat.GUI menu options (45a0123)\nevent-display: start splitting UI manager (56ff275)\nevent-display: use run and event number and file name for config json (03a1de4)\nupgrade all packages except three.js (8e2eff4)\nupgrade three.js except for CMSObjects (0b2dd8a)\n\n1.5.0 (2021-03-24)\nBug Fixes\n\nevent-display: catch VR request session error (d2874b8)\nevent-display: fix jsroot loading root file (8cbcaa5)\nevent-display: handle tracks with no positions (3b1991c)\nevent-display: improve renderer init (a8f8353)\nevent-display: remove optimize controls function (266af04)\nevent-display: remove redundant import (359d353)\nevent-display: use per physics object color and not collection color (ac0c4f1)\nremove JSROOT source files from repo (7bcd7ba)\n\nFeatures\n\napp: ability to import ig archive in CMS (9540af5)\napp: Add more realistic geometry for ATLAS (d207bad)\nevent-display: allow resize and improve tests and drop improving CPU usage (a474af2)\nevent-display: resize canvas with window resize (5ea04f1)\nevent-display: update to use CDN for JSROOT (2fa310f)\nevent-display: use latest version of JSROOT (fbd584e)\n\n1.4.0 (2021-02-16)\nBug Fixes\n\nevent-display: disable keyboard controls when typing (4f80bd6)\nevent-display: improve object selection from uuid and label input (3475836)\nevent-display: persist toggle state of phoenix menu node children (e96136b)\nevent-display: remove rollup config and fix globalThis usage (e6f69a0)\n\nFeatures\n\nevent-display: ability to add 3D label text (c9d4880)\nevent-display: add labels configuration to dat.GUI menu (d677089)\nevent-display: add labels to UI configuration (d90e3a6)\nevent-display: add size and color options for labels (3ce675f)\nevent-display: better handling of labels object (e10a68d)\nevent-display: complete setup with webpack for browser (3f6367f)\nevent-display: complete support to save and load labels (2219a3e)\nevent-display: create a url options manager for url options (fe0b2e6)\nevent-display: create generic function for getting object position (8d7b160)\nevent-display: delete label on empty value and change add label icon (3756330)\nevent-display: make label always look at camera (0837334)\nevent-display: set up add label to object functions (db261a6)\nevent-display: setup webpack for browser bundle (dc05ed9)\nevent-display: support to hide widgets through URL (cb2ec40)\nevent-display: use optional chaining for hide widgets url option (c991e54)\nevent-display: Use types for phoenix menu configuration (79e6d7c)\nevent-display: working labels object (60269f7)\nUpdate Angular and all packages to latest (f4c2e31)\n\n1.3.0 (2021-01-16)\nBug Fixes\n\nevent-display: assign the right name to geometry (b7e8da0)\nevent-display: code improvements (f94c0e4)\nevent-display: fix parsing of GLTF geometry (dc5d489)\nevent-display: improve code for hiding tube tracks (e9f1bc9)\nevent-display: minor script fix (5139c6e)\nevent-display: remove color from obj file userdata (8ba94e7)\nevent-display: revert jasmine spec files (dc140dd)\nevent-display: try fixing CMSLoader tests (789da8b)\n\nFeatures\n\nevent-display: display size on selection (6943f79)\nevent-display: hide tube tracks on zoom (7d606b2)\n\n1.2.0 (2020-12-06)\nBug Fixes\n\nevent-display: add Edward's controller set up (a6a1c19)\nevent-display: changes to animation loop for VR (37df19f)\nevent-display: finally fix VR completely (4764196)\nevent-display: fix applying multiple cuts at the same time (8f3e8e1)\nevent-display: fix applying state for range slider (c36a222)\nevent-display: fix loading and add default view to experiments (ab8feb4)\nevent-display: initialize cuts with correct values (e297c98)\nevent-display: make it possible to flat shade (dcf6cec)\nevent-display: optimal animation loop set up (da3ead5)\nevent-display: optimal render for effects manager (1975d70)\nevent-display: reset clipping on init (029d526)\nevent-display: stop animation loop on home (c39ecd3)\nevent-display: update configuration in tests (18f8db2)\n\nFeatures\n\napp: add toggle for screenshot mode (22a1ec8)\napp: make loader generic (ff10477)\napp: set up performance mode with selection (947f6bf)\napp: use event display loader in Angular component (25b2a9d)\nevent-display: ability to add geometry to a menu folder (30b0383)\nevent-display: ability to initialize event display without init (69d3f75)\nevent-display: add ability to add parametrised geometry (04dc545)\nevent-display: add and set up loading manager (5f0f942)\nevent-display: handle loading better (9474565)\nevent-display: make loading functions return Promise for async await (4262a1b)\nevent-display: performance mode and antialias support (d3920c4)\nevent-display: support for toggling antialiasing (48130b2)\nevent-display: use object to simplify configuration (4b10452)\n\n1.1.0 (2020-11-07)\nBug Fixes\n\napp: cut filter failed if value return was zero (0a26fea)\napp: cut should be pT, not mom (73b7c27)\napp: fix attribute pipe (0980379)\napp: fix tests (f87c587)\napp: pT should always be positive (3918159)\nevent-display: add optional chaining to CMS event info (fixes tests) (5283e9a)\nevent-display: fix geometry too big in overlay view (c7a35db)\nevent-display: fix URL event not working with hash routes (9eb21f5)\nevent-display: Formatted correctly (b46c49f)\nevent-display: use optional chaining in CMS loader (cfb1b6a)\nVR: Fix bugged scene in VR mode (9efd9ca)\n\nFeatures\n\napp: Option to load config from URL in ATLAS (1906976)\napp: phoenix-ui-components library (17909eb)\napp: yet another MAJOR refactoring (1261358)\nevent-display: add defaultView to configuration (612205c)\nevent-display: implicitly load event data from URL (9e3dc20)\nevent-display: state manager for managing event display state for save and load (7d1ca22)\n\n1.0.2 (2020-10-05)\n\nComplete deployment set up (399ac77)\n\n1.0.1 (2020-10-05)\nNote: Version bump only for package phoenix-event-display\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/event-display.ts\n            \n            class\n            EventDisplay\n            \n                100 %\n                (58/58)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/active-variable.ts\n            \n            class\n            ActiveVariable\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/helpers/browser-storage.ts\n            \n            variable\n            getFromLocalStorage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/browser-storage.ts\n            \n            variable\n            setToLocalStorage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/constants.ts\n            \n            variable\n            EVENT_DATA_TYPE_COLORS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/coordinate-helper.ts\n            \n            class\n            CoordinateHelper\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            loadFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            saveFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/info-logger.ts\n            \n            class\n            InfoLogger\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/helpers/labels.ts\n            \n            variable\n            getLabelTitle\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/pretty-symbols.ts\n            \n            class\n            PrettySymbols\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/rk-helper.ts\n            \n            class\n            RKHelper\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            Field\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            RungeKutta\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            State\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/helpers/zip.ts\n            \n            variable\n            readZipFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/lib/models/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/lib/types/configuration.ts\n            \n            interface\n            Configuration\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                src/loaders/edm4hep-json-loader.ts\n            \n            class\n            Edm4hepJsonLoader\n            \n                100 %\n                (40/40)\n            \n        \n        \n            \n                \n                src/loaders/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (43/43)\n            \n        \n        \n            \n                \n                src/loaders/jsroot-event-loader.ts\n            \n            class\n            JSRootEventLoader\n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                src/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/loaders/objects/tracks.ts\n            \n            class\n            TracksMaterial\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/loaders/objects/tracks.ts\n            \n            class\n            TracksMesh\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            class\n            ScriptLoader\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                src/managers/loading-manager.ts\n            \n            class\n            LoadingManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/state-manager.ts\n            \n            class\n            StateManager\n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                src/managers/three-manager/animations-manager.ts\n            \n            class\n            AnimationsManager\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/managers/three-manager/animations-manager.ts\n            \n            interface\n            AnimationPreset\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/managers/three-manager/color-manager.ts\n            \n            class\n            ColorManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/managers/three-manager/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/managers/three-manager/effects-manager.ts\n            \n            class\n            EffectsManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/managers/three-manager/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/managers/three-manager/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/managers/three-manager/index.ts\n            \n            class\n            ThreeManager\n            \n                100 %\n                (68/68)\n            \n        \n        \n            \n                \n                src/managers/three-manager/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/three-manager/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (42/42)\n            \n        \n        \n            \n                \n                src/managers/three-manager/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/three-manager/xr/ar-manager.ts\n            \n            class\n            ARManager\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/managers/three-manager/xr/vr-manager.ts\n            \n            class\n            VRManager\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/managers/three-manager/xr/xr-manager.ts\n            \n            class\n            XRManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/color-options.ts\n            \n            class\n            ColorOptions\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/dat-gui-ui.ts\n            \n            class\n            DatGUIMenuUI\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/index.ts\n            \n            class\n            UIManager\n            \n                100 %\n                (40/40)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/index.ts\n            \n            variable\n            defaultAnimationPresets\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n            \n            class\n            PhoenixMenuNode\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts\n            \n            class\n            PhoenixMenuUI\n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-ui.ts\n            \n            interface\n            PhoenixUI\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            class\n            URLOptionsManager\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            variable\n            phoenixURLOptions\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @babel/core : ^7.20.12\n        \n            @tweenjs/tween.js : ^18.6.4\n        \n            dat.gui : ^0.7.9\n        \n            html2canvas : ^1.4.1\n        \n            jsroot : ^7.3.0\n        \n            jszip : ^3.10.1\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.149.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClippingSetting   (src/.../preset-view.model.ts)\n                        \n                        \n                            ColorByOptionKeys   (src/.../color-options.ts)\n                        \n                        \n                            XRSessionType   (src/.../xr-manager.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/preset-view.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ClippingSetting\n                    \n                \n                    \n                        \n                            Preset view settings for clipping\n\n                        \n                    \n                        \n                            \n                                 NotForced\n                            \n                        \n                        \n                            \n                                 On\n                            \n                        \n                        \n                            \n                                 Off\n                            \n                        \n            \n        \n\n    src/managers/ui-manager/color-options.ts\n    \n        \n            \n                \n                    \n                        \n                        ColorByOptionKeys\n                    \n                \n                    \n                        \n                            Keys for options available for coloring event data by.\n\n                        \n                    \n                        \n                            \n                                 CHARGE\n                            \n                        \n                        \n                            \n                                Value : charge\n                            \n                        \n                        \n                            \n                                 MOM\n                            \n                        \n                        \n                            \n                                Value : mom\n                            \n                        \n                        \n                            \n                                 VERTEX\n                            \n                        \n                        \n                            \n                                Value : vertex\n                            \n                        \n            \n        \n\n    src/managers/three-manager/xr/xr-manager.ts\n    \n        \n            \n                \n                    \n                        \n                        XRSessionType\n                    \n                \n                    \n                        \n                            Type of the XR session.\n\n                        \n                    \n                        \n                            \n                                 VR\n                            \n                        \n                        \n                            \n                                Value : VR\n                            \n                        \n                        \n                            \n                                 AR\n                            \n                        \n                        \n                            \n                                Value : AR\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPhoenix event display\n\n\n\nA highly modular and API driven experiment independent event display that uses three.js for processing and presenting detector geometry and event data.\nTo use in your application, install the package.\nnpm install phoenix-event-display\n# or\nyarn add phoenix-event-displayUsage\nAs a module\nTo create a simple event display.\n// Import required classes\nimport { EventDisplay, PhoenixLoader } from 'phoenix-event-display';\n\n// Create the event display\nconst eventDisplay = new EventDisplay();\n\n// Define the configuration\nconst configuration = {\n  elementId: '',\n  eventDataLoader: new PhoenixLoader(), // or some other event data loader\n  // ... other configuration options\n};\n\n// Initialize the event display with the configuration\neventDisplay.init(configuration);\n\n// Load and parse event data in Phoenix format and display it\nfetch('path/to/event-data.json')\n  .then((res) => res.json())\n  .then((res) => {\n    eventDisplay.parsePhoenixEvents(res);\n  });\n\n// Load detector geometry\neventDisplay.loadOBJGeometry(\n  'path/to/geometry.obj',\n  'Detector OBJ',\n  0x8c8c8c /* color */\n);As a standalone bundle\nPhoenix can be bundled and used directly in the HTML as a script along with three.js. You can either use the CDN or build from source.\nTo build Phoenix as a bundle.\nyarn build:bundleThis will generate a file phoenix.min.js in the ./dist/bundle directory which can be included in your HTML code.\nWithout building, you can include the bundle directly from CDN.\n\n  \n    ...\n  \n\n  \n    \n\n    \n    \n\n    \n      // Create the event display\n      const eventDisplay = new EventDisplay();\n\n      // Define the configuration\n      const configuration = {\n        elementId: 'eventDisplay',\n        eventDataLoader: new PhoenixLoader(), // or some other event data loader\n        // ... other configuration options\n      };\n\n      // Initialize the event display with the configuration\n      eventDisplay.init(configuration);\n\n      // ... other event display functions\n    \n  \nExamples\n\nUsage in Angular (as a service)\nUsage in React\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    43 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 2.14.0\n        \n            Description : API for web-based experiment independent event display.\n        \n            Homepage : http://github.com/HSF/phoenix/tree/master/packages/phoenix-event-display#readme\n        \n            License : Apache-2.0\n        \n            Repository : git://github.com/HSF/phoenix.git\n        \n            Author : Phoenix contributors (https://github.com/HSF/phoenix/graphs/contributors)\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CallbackFunction   (src/.../active-variable.ts)\n                        \n                        \n                            ColorByOption   (src/.../color-options.ts)\n                        \n                        \n                            ConfigButton   (src/.../config-types.ts)\n                        \n                        \n                            ConfigCheckbox   (src/.../config-types.ts)\n                        \n                        \n                            ConfigColor   (src/.../config-types.ts)\n                        \n                        \n                            ConfigLabel   (src/.../config-types.ts)\n                        \n                        \n                            ConfigRangeSlider   (src/.../config-types.ts)\n                        \n                        \n                            ConfigSelect   (src/.../config-types.ts)\n                        \n                        \n                            ConfigSlider   (src/.../config-types.ts)\n                        \n                        \n                            GeometryUIParameters   (src/.../geometry-ui-parameters.ts)\n                        \n                        \n                            PhoenixMenuConfigs   (src/.../config-types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/active-variable.ts\n    \n    \n        \n            \n                \n                    \n                    CallbackFunction\n                \n            \n            \n                \n                    Callback function type.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/managers/ui-manager/color-options.ts\n    \n    \n        \n            \n                \n                    \n                    ColorByOption\n                \n            \n            \n                \n                    Type for a single color by option.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/managers/ui-manager/phoenix-menu/config-types.ts\n    \n    \n        \n            \n                \n                    \n                    ConfigButton\n                \n            \n            \n                \n                    Type for Phoenix menu node \"button\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigCheckbox\n                \n            \n            \n                \n                    Type for Phoenix menu node \"checkbox\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigColor\n                \n            \n            \n                \n                    Type for Phoenix menu node \"color\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigLabel\n                \n            \n            \n                \n                    Type for Phoenix menu node \"label\" config.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigRangeSlider\n                \n            \n            \n                \n                    Type for Phoenix menu node \"rangeSlider\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigSelect\n                \n            \n            \n                \n                    Type for Phoenix menu node \"select\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigSlider\n                \n            \n            \n                \n                    Type for Phoenix menu node \"slider\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PhoenixMenuConfigs\n                \n            \n            \n                \n                    Type for all Phoenix menu mode configuration options.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/lib/types/geometry-ui-parameters.ts\n    \n    \n        \n            \n                \n                    \n                    GeometryUIParameters\n                \n            \n            \n                \n                    Parameters used when adding geometry to UI menus.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            defaultAnimationPresets   (src/.../index.ts)\n                        \n                        \n                            EVENT_DATA_TYPE_COLORS   (src/.../constants.ts)\n                        \n                        \n                            getFromLocalStorage   (src/.../browser-storage.ts)\n                        \n                        \n                            getLabelTitle   (src/.../labels.ts)\n                        \n                        \n                            loadFile   (src/.../file.ts)\n                        \n                        \n                            phoenixURLOptions   (src/.../url-options-manager.ts)\n                        \n                        \n                            readZipFile   (src/.../zip.ts)\n                        \n                        \n                            saveFile   (src/.../file.ts)\n                        \n                        \n                            setToLocalStorage   (src/.../browser-storage.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/managers/ui-manager/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultAnimationPresets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AnimationPreset[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    name: 'Cavern to ID',\n    positions: [\n      {\n        position: [66388.95051168812, 5264.228603228927, -46910.7848593543],\n        duration: 1000,\n      },\n      {\n        position: [12834.18729094943, 677.7571205763458, 135.68755273443463],\n        duration: 2000,\n      },\n      {\n        position: [312.02688693297375, 25.884223757326, 270.10019006776236],\n        duration: 3500,\n      },\n      {\n        position: [263.3640855132258, 19.874838262525053, -318.16541790248885],\n        duration: 3000,\n      },\n      {\n        position: [5534.140362338047, 234.03507981484574, -2933.619479808285],\n        duration: 2000,\n      },\n      {\n        position: [2681.277288705242, 646.5795158318147, 5628.5248735111745],\n        duration: 1000,\n      },\n      {\n        position: [-6062.586283740076, 790.5876682946184, 1381.1675900848818],\n        duration: 1000,\n      },\n      {\n        position: [-1766.7693725879053, 1007.1048030984678, -5928.901341784575],\n        duration: 1000,\n      },\n      {\n        position: [12814.982506255355, 2516.987185037266, -22891.902734328327],\n        duration: 1000,\n      },\n    ],\n    animateEventAfterInterval: 5000,\n    collisionDuration: 6000,\n  },\n]\n                    \n                \n\n            \n                \n                    If animation presets not passed in configuration, we will use this.\n\n                \n            \n\n        \n    \n\n    src/helpers/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EVENT_DATA_TYPE_COLORS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Hits: new Color(0xff0000),\n  Tracks: new Color(0xff0000),\n  Jets: new Color(0x2194ce),\n  CaloClusters: new Color(0xffd166),\n  MuonChambers: new Color(0xff0000),\n  Vertices: new Color(0xffd166),\n  MissingEnergy: new Color(0xffffff),\n  PlanarCaloCells: new Color(0xfff69a),\n}\n                    \n                \n\n            \n                \n                    Colors of different event data types.\n\n                \n            \n\n        \n    \n\n    src/helpers/browser-storage.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getFromLocalStorage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (item: string) => {\n  try {\n    return localStorage.getItem(item);\n  } catch (exception) {\n    console.warn('Exception in localStorage', exception);\n  }\n}\n                    \n                \n\n            \n                \n                    Get an item from local storage.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setToLocalStorage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (item: string, value: string) => {\n  try {\n    localStorage.setItem(item, value);\n  } catch (exception) {\n    console.warn('Exception in localStorage', exception);\n  }\n}\n                    \n                \n\n            \n                \n                    Set item to local storage.\n\n                \n            \n\n        \n    \n\n    src/helpers/labels.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLabelTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  eventDataType: string,\n  collection: string,\n  index: string | number\n) => `${eventDataType} > ${collection} > ${index}`\n                    \n                \n\n            \n                \n                    Get title of the label.\n\n                \n            \n\n        \n    \n\n    src/helpers/file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  onFileRead: (data: string) => void,\n  contentType: string = 'application/json'\n) => {\n  // Create a mock input file element and use that to read the file\n  let inputFile = document.createElement('input');\n  inputFile.type = 'file';\n  inputFile.accept = contentType;\n  inputFile.onchange = (e: any) => {\n    const configFile = e.target?.files[0];\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      onFileRead?.(e.target.result.toString());\n\n      inputFile.remove();\n      inputFile = null;\n    };\n    reader.readAsText(configFile);\n  };\n  inputFile.click();\n}\n                    \n                \n\n            \n                \n                    Load a file from user by mocking an input element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  data: string,\n  fileName: string,\n  contentType: string = 'application/json'\n) => {\n  const blob = new Blob([data], { type: contentType });\n  const tempAnchor = document.createElement('a');\n  tempAnchor.style.display = 'none';\n  tempAnchor.href = URL.createObjectURL(blob);\n  tempAnchor.download = fileName;\n  tempAnchor.click();\n  tempAnchor.remove();\n}\n                    \n                \n\n            \n                \n                    Save and download file with the given data.\n\n                \n            \n\n        \n    \n\n    src/managers/url-options-manager.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        phoenixURLOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n  embed: false,\n}\n                    \n                \n\n            \n                \n                    Model for Phoenix URL options.\n\n                \n            \n\n        \n    \n\n    src/helpers/zip.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        readZipFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (file: File | ArrayBuffer) => {\n  const archive = new JSZip();\n  const filesWithData: { [fileName: string]: string } = {};\n\n  await archive.loadAsync(file);\n  for (const filePath in archive.files) {\n    const fileData = await archive.file(filePath).async('string');\n    filesWithData[filePath] = fileData;\n  }\n\n  return filesWithData;\n}\n                    \n                \n\n            \n                \n                    Read a zip file and return its contents as an object.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
